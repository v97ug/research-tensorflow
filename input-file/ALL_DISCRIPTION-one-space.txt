 AbstractImageUploadImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AbstractImageUploadImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":6,"i6":6,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Class AbstractImageUploadImpl java.lang.Object twitter4j.media.AbstractImageUploadImpl All Implemented Interfaces: ImageUpload Direct Known Subclasses: ImgLyUpload, MobypictureUpload, TwippleUpload, YFrogUpload abstract class AbstractImageUploadImpl extends java.lang.Object implements ImageUpload Since: Twitter4J 2.1.8 Author: Rémy Rakic - remy.rakic at gmail.com, Takao Nakaguchi - takao.nakaguchi at gmail.com, withgod - noname at withgod.jp Field Summary Fields  Modifier and Type Field and Description protected java.lang.String apiKey  private HttpParameter[] appendParameter  private HttpClient client  private Configuration conf  (package private) java.util.Map<java.lang.String,java.lang.String> headers  (package private) HttpResponse httpResponse  (package private) HttpParameter image  private static Logger logger  (package private) HttpParameter message  (package private) OAuthAuthorization oauth  (package private) HttpParameter[] postParameter  (package private) static java.lang.String TWITTER_VERIFY_CREDENTIALS_JSON_V1_1  (package private) java.lang.String uploadUrl  Constructor Summary Constructors  Constructor and Description AbstractImageUploadImpl(Configuration conf, OAuthAuthorization oauth)  AbstractImageUploadImpl(Configuration conf, java.lang.String apiKey, OAuthAuthorization oauth)  Method Summary All Methods Instance Methods Abstract Methods Concrete Methods  Modifier and Type Method and Description (package private) HttpParameter[] appendHttpParameters(HttpParameter[] src, HttpParameter[] dst)  boolean equals(java.lang.Object o)  (package private) java.lang.String generateVerifyCredentialsAuthorizationHeader()  protected java.lang.String generateVerifyCredentialsAuthorizationURL(java.lang.String verifyCredentialsUrl)  int hashCode()  protected abstract java.lang.String postUpload()  protected abstract void preUpload()  java.lang.String toString()  private java.lang.String upload()  java.lang.String upload(java.io.File file)  java.lang.String upload(java.io.File file, java.lang.String message)  java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody)  java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody, java.lang.String message)  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail TWITTER_VERIFY_CREDENTIALS_JSON_V1_1 static final java.lang.String TWITTER_VERIFY_CREDENTIALS_JSON_V1_1 See Also: Constant Field Values client private HttpClient client conf private Configuration conf apiKey protected java.lang.String apiKey oauth OAuthAuthorization oauth uploadUrl java.lang.String uploadUrl postParameter HttpParameter[] postParameter appendParameter private HttpParameter[] appendParameter image HttpParameter image message HttpParameter message headers final java.util.Map<java.lang.String,java.lang.String> headers httpResponse HttpResponse httpResponse logger private static final Logger logger Constructor Detail AbstractImageUploadImpl AbstractImageUploadImpl(Configuration conf, OAuthAuthorization oauth) AbstractImageUploadImpl AbstractImageUploadImpl(Configuration conf, java.lang.String apiKey, OAuthAuthorization oauth) Method Detail upload public java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException upload public java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody, java.lang.String message) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException upload public java.lang.String upload(java.io.File file, java.lang.String message) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException upload public java.lang.String upload(java.io.File file) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException upload private java.lang.String upload() throws TwitterException Throws: TwitterException preUpload protected abstract void preUpload() throws TwitterException Throws: TwitterException postUpload protected abstract java.lang.String postUpload() throws TwitterException Throws: TwitterException appendHttpParameters HttpParameter[] appendHttpParameters(HttpParameter[] src, HttpParameter[] dst) generateVerifyCredentialsAuthorizationHeader java.lang.String generateVerifyCredentialsAuthorizationHeader() generateVerifyCredentialsAuthorizationURL protected java.lang.String generateVerifyCredentialsAuthorizationURL(java.lang.String verifyCredentialsUrl) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AccessToken <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AccessToken"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class AccessToken java.lang.Object twitter4j.auth.OAuthToken twitter4j.auth.AccessToken All Implemented Interfaces: java.io.Serializable public class AccessToken extends OAuthToken implements java.io.Serializable Representing authorized Access Token which is passed to the service provider in order to access protected resources. the token and token secret can be stored into some persistent stores such as file system or RDBMS for the further accesses. Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private java.lang.String screenName  private static long serialVersionUID  private long userId  Constructor Summary Constructors  Constructor and Description AccessToken(HttpResponse res)  AccessToken(java.lang.String token, java.lang.String tokenSecret)  AccessToken(java.lang.String token, java.lang.String tokenSecret, long userId)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  java.lang.String getScreenName()  long getUserId()  int hashCode()  java.lang.String toString()  Methods inherited from class twitter4j.auth.OAuthToken getParameter, getSecretKeySpec, getToken, getTokenSecret, setSecretKeySpec Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values screenName private java.lang.String screenName userId private long userId Constructor Detail AccessToken AccessToken(HttpResponse res) throws TwitterException Throws: TwitterException AccessToken public AccessToken(java.lang.String token, java.lang.String tokenSecret) AccessToken public AccessToken(java.lang.String token, java.lang.String tokenSecret, long userId) Method Detail getScreenName public java.lang.String getScreenName() Returns: screen name Since: Twitter4J 2.0.4 getUserId public long getUserId() Returns: user id Since: Twitter4J 2.0.4 equals public boolean equals(java.lang.Object o) Overrides: equals in class OAuthToken hashCode public int hashCode() Overrides: hashCode in class OAuthToken toString public java.lang.String toString() Overrides: toString in class OAuthToken Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AccountSettings <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AccountSettings"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface AccountSettings All Superinterfaces: java.io.Serializable, TwitterResponse public interface AccountSettings extends TwitterResponse, java.io.Serializable Since: Twitter4J 2.1.9 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getLanguage() Returns the language used to render Twitter's UII for this user. java.lang.String getScreenName() Returns the user's screen name java.lang.String getSleepEndTime() Returns sleep end time. java.lang.String getSleepStartTime() Returns sleep start time. TimeZone getTimeZone() Returns the timezone configured for this user. Location[] getTrendLocations() Return the user's trend locations boolean isAlwaysUseHttps() Returns true if the wants to always access twitter using HTTPS. boolean isDiscoverableByEmail() Returns true if the user is discoverable by email. boolean isGeoEnabled() Return true if the user is enabling geo location boolean isSleepTimeEnabled() Returns true if the user enabled sleep time. Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail isSleepTimeEnabled boolean isSleepTimeEnabled() Returns true if the user enabled sleep time. Returns: true if the user enabled sleep time getSleepStartTime java.lang.String getSleepStartTime() Returns sleep start time. Returns: sleep start time getSleepEndTime java.lang.String getSleepEndTime() Returns sleep end time. Returns: sleep end time getTrendLocations Location[] getTrendLocations() Return the user's trend locations Returns: the user's trend locations isGeoEnabled boolean isGeoEnabled() Return true if the user is enabling geo location Returns: true if the user is enabling geo location getTimeZone TimeZone getTimeZone() Returns the timezone configured for this user. Returns: the timezone (formated as a Rails TimeZone name) getLanguage java.lang.String getLanguage() Returns the language used to render Twitter's UII for this user. Returns: the language ISO 639-1 representation isDiscoverableByEmail boolean isDiscoverableByEmail() Returns true if the user is discoverable by email. Returns: true if the user is discoverable by email isAlwaysUseHttps boolean isAlwaysUseHttps() Returns true if the wants to always access twitter using HTTPS. Returns: true if the wants to always access twitter using HTTPS getScreenName java.lang.String getScreenName() Returns the user's screen name Returns: the user's screen name Since: Twitter4J 3.0.5 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AccountTotals <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AccountTotals"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface AccountTotals All Superinterfaces: java.io.Serializable, TwitterResponse public interface AccountTotals extends TwitterResponse, java.io.Serializable Since: Twitter4J 2.1.9 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getFavorites() Returns the number of total favorites. int getFollowers() Returns the number of total followers. int getFriends() Returns the number of total friends. int getUpdates() Returns the number of total updates. Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getUpdates int getUpdates() Returns the number of total updates. Returns: the number of total updates getFollowers int getFollowers() Returns the number of total followers. Returns: the number of total followers getFavorites int getFavorites() Returns the number of total favorites. Returns: the number of total favorites getFriends int getFriends() Returns the number of total friends. Returns: the number of total friends Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AsyncOAuth2Support <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AsyncOAuth2Support"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Interface AsyncOAuth2Support All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface AsyncOAuth2Support Author: Amine Bezzarga - abezzarg at gmail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void getOAuth2TokenAsync() Obtains an OAuth 2 Bearer token. Method Detail getOAuth2TokenAsync void getOAuth2TokenAsync() Obtains an OAuth 2 Bearer token. See Also: POST oauth2/token | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AsyncOAuthSupport <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AsyncOAuthSupport"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Interface AsyncOAuthSupport All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface AsyncOAuthSupport Since: Twitter4J 3.0.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void getOAuthAccessTokenAsync() Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. void getOAuthAccessTokenAsync(RequestToken requestToken) Retrieves an access token associated with the supplied request token and sets userId. void getOAuthAccessTokenAsync(RequestToken requestToken, java.lang.String oauthVerifier) Retrieves an access token associated with the supplied request token and sets userId. void getOAuthAccessTokenAsync(java.lang.String oauthVerifier) Retrieves an access token. void getOAuthAccessTokenAsync(java.lang.String screenName, java.lang.String password) Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. void getOAuthRequestTokenAsync() Retrieves a request token void getOAuthRequestTokenAsync(java.lang.String callbackURL) Retrieves a request token void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType) Retrieves a request token void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) Retrieves a request token Method Detail getOAuthRequestTokenAsync void getOAuthRequestTokenAsync() Retrieves a request token Since: Twitter4J 3.0.0 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestTokenAsync void getOAuthRequestTokenAsync(java.lang.String callbackURL) Retrieves a request token Parameters: callbackURL - callback URL Since: Twitter4J 3.0.0 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestTokenAsync void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType) Retrieves a request token Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. Since: Twitter4J 3.0.0 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestTokenAsync void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) Retrieves a request token Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. xAuthMode - Set to reverse_auth to obtain a special request token to be used in the reverse auth process. Since: Twitter4J 3.0.0 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthAccessTokenAsync void getOAuthAccessTokenAsync() Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. Since: Twitter4J 3.0.0 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync void getOAuthAccessTokenAsync(java.lang.String oauthVerifier) Retrieves an access token. Parameters: oauthVerifier - OAuth verifier. AKA pin. Since: Twitter4J 3.0.0 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync void getOAuthAccessTokenAsync(RequestToken requestToken) Retrieves an access token associated with the supplied request token and sets userId. Parameters: requestToken - the request token Since: Twitter4J 3.0.0 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync void getOAuthAccessTokenAsync(RequestToken requestToken, java.lang.String oauthVerifier) Retrieves an access token associated with the supplied request token and sets userId. Parameters: requestToken - the request token oauthVerifier - OAuth verifier. AKA pin. Since: Twitter 3.0.0 See Also: OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync void getOAuthAccessTokenAsync(java.lang.String screenName, java.lang.String password) Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Parameters: screenName - the screen name password - the password Since: Twitter 3.0.0 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, xAuth | Twitter Developers, POST oauth/access_token | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AsyncTwitter <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AsyncTwitter"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface AsyncTwitter All Superinterfaces: AsyncOAuth2Support, AsyncOAuthSupport, DirectMessagesResourcesAsync, FavoritesResourcesAsync, FriendsFollowersResourcesAsync, HelpResourcesAsync, ListsResourcesAsync, OAuth2Support, OAuthSupport, PlacesGeoResourcesAsync, SavedSearchesResourcesAsync, SearchResourceAsync, java.io.Serializable, SpamReportingResourceAsync, SuggestedUsersResourcesAsync, TimelinesResourcesAsync, TrendsResourcesAsync, TweetsResourcesAsync, TwitterBase, UsersResourcesAsync All Known Implementing Classes: AsyncTwitterImpl public interface AsyncTwitter extends java.io.Serializable, OAuthSupport, OAuth2Support, AsyncOAuthSupport, AsyncOAuth2Support, TwitterBase, TimelinesResourcesAsync, TweetsResourcesAsync, SearchResourceAsync, DirectMessagesResourcesAsync, FriendsFollowersResourcesAsync, UsersResourcesAsync, SuggestedUsersResourcesAsync, FavoritesResourcesAsync, ListsResourcesAsync, SavedSearchesResourcesAsync, PlacesGeoResourcesAsync, TrendsResourcesAsync, SpamReportingResourceAsync, HelpResourcesAsync Since: Twitter4J 2.2.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void addListener(TwitterListener listener) Adds twitter listener void shutdown() Shuts down internal dispatcher thread shared across all AsyncTwitter instances. Methods inherited from interface twitter4j.auth.OAuthSupport getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, setOAuthAccessToken, setOAuthConsumer Methods inherited from interface twitter4j.auth.OAuth2Support getOAuth2Token, invalidateOAuth2Token, setOAuth2Token, setOAuthConsumer Methods inherited from interface twitter4j.auth.AsyncOAuthSupport getOAuthAccessTokenAsync, getOAuthAccessTokenAsync, getOAuthAccessTokenAsync, getOAuthAccessTokenAsync, getOAuthAccessTokenAsync, getOAuthRequestTokenAsync, getOAuthRequestTokenAsync, getOAuthRequestTokenAsync, getOAuthRequestTokenAsync Methods inherited from interface twitter4j.auth.AsyncOAuth2Support getOAuth2TokenAsync Methods inherited from interface twitter4j.TwitterBase addRateLimitStatusListener, getAuthorization, getConfiguration, getId, getScreenName, onRateLimitReached, onRateLimitStatus Methods inherited from interface twitter4j.api.TimelinesResourcesAsync getHomeTimeline, getHomeTimeline, getMentions, getMentions, getRetweetsOfMe, getRetweetsOfMe, getUserTimeline, getUserTimeline, getUserTimeline, getUserTimeline, getUserTimeline, getUserTimeline Methods inherited from interface twitter4j.api.TweetsResourcesAsync destroyStatus, getOEmbed, getRetweets, lookup, retweetStatus, showStatus, updateStatus, updateStatus Methods inherited from interface twitter4j.api.SearchResourceAsync search Methods inherited from interface twitter4j.api.DirectMessagesResourcesAsync destroyDirectMessage, getDirectMessages, getDirectMessages, getSentDirectMessages, getSentDirectMessages, sendDirectMessage, sendDirectMessage, showDirectMessage Methods inherited from interface twitter4j.api.FriendsFollowersResourcesAsync createFriendship, createFriendship, createFriendship, createFriendship, destroyFriendship, destroyFriendship, getFollowersIDs, getFollowersIDs, getFollowersIDs, getFollowersList, getFollowersList, getFriendsIDs, getFriendsIDs, getFriendsIDs, getFriendsList, getFriendsList, getIncomingFriendships, getOutgoingFriendships, lookupFriendships, lookupFriendships, showFriendship, showFriendship, updateFriendship, updateFriendship Methods inherited from interface twitter4j.api.UsersResourcesAsync createBlock, createBlock, createMute, createMute, destroyBlock, destroyBlock, destroyMute, destroyMute, getAccountSettings, getBlocksIDs, getBlocksIDs, getBlocksList, getBlocksList, getContributees, getContributees, getContributors, getContributors, getMutesIDs, getMutesList, lookupUsers, lookupUsers, removeProfileBanner, searchUsers, showUser, showUser, updateAccountSettings, updateProfile, updateProfileBackgroundImage, updateProfileBackgroundImage, updateProfileBanner, updateProfileBanner, updateProfileColors, updateProfileImage, updateProfileImage, verifyCredentials Methods inherited from interface twitter4j.api.SuggestedUsersResourcesAsync getMemberSuggestions, getSuggestedUserCategories, getUserSuggestions Methods inherited from interface twitter4j.api.FavoritesResourcesAsync createFavorite, destroyFavorite, getFavorites, getFavorites, getFavorites, getFavorites, getFavorites, getFavorites Methods inherited from interface twitter4j.api.ListsResourcesAsync createUserList, createUserListMember, createUserListMember, createUserListMembers, createUserListMembers, createUserListMembers, createUserListMembers, createUserListSubscription, createUserListSubscription, destroyUserList, destroyUserList, destroyUserListMember, destroyUserListMember, destroyUserListSubscription, destroyUserListSubscription, getUserListMembers, getUserListMembers, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserLists, getUserLists, getUserListStatuses, getUserListStatuses, getUserListSubscribers, getUserListSubscribers, getUserListSubscriptions, showUserList, showUserList, showUserListMembership, showUserListMembership, showUserListSubscription, showUserListSubscription, updateUserList, updateUserList Methods inherited from interface twitter4j.api.SavedSearchesResourcesAsync createSavedSearch, destroySavedSearch, getSavedSearches, showSavedSearch Methods inherited from interface twitter4j.api.PlacesGeoResourcesAsync getGeoDetails, getSimilarPlaces, reverseGeoCode, searchPlaces Methods inherited from interface twitter4j.api.TrendsResourcesAsync getAvailableTrends, getClosestTrends, getPlaceTrends Methods inherited from interface twitter4j.api.SpamReportingResourceAsync reportSpam, reportSpam Methods inherited from interface twitter4j.api.HelpResourcesAsync getAPIConfiguration, getLanguages, getPrivacyPolicy, getRateLimitStatus, getRateLimitStatus, getTermsOfService Method Detail addListener void addListener(TwitterListener listener) Adds twitter listener Parameters: listener - TwitterListener shutdown void shutdown() Shuts down internal dispatcher thread shared across all AsyncTwitter instances. Since: Twitter4J 2.1.9 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AsyncTwitterFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AsyncTwitterFactory"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class AsyncTwitterFactory java.lang.Object twitter4j.AsyncTwitterFactory All Implemented Interfaces: java.io.Serializable public final class AsyncTwitterFactory extends java.lang.Object implements java.io.Serializable A factory class for AsyncTwitter. An instance of this class is completely thread safe and can be re-used and used concurrently. Note that currently AsyncTwitter is NOT compatible with Google App Engine as it is maintaining threads internally. Since: Twitter4J 2.1.0 Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private Configuration conf  private static long serialVersionUID  private static AsyncTwitter SINGLETON  Constructor Summary Constructors  Constructor and Description AsyncTwitterFactory() Creates an AsyncTwitterFactory with the root configuration, with no listener. AsyncTwitterFactory(Configuration conf) Creates an AsyncTwitterFactory with the given configuration. AsyncTwitterFactory(java.lang.String configTreePath) Creates a AsyncTwitterFactory with the specified config tree, with given listener Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description AsyncTwitter getInstance() Returns an instance associated with the configuration bound to this factory. AsyncTwitter getInstance(AccessToken accessToken) Returns a OAuth Authenticated instance. consumer key and consumer Secret must be provided by twitter4j.properties, or system properties. Unlike OAuthSupport.setOAuthAccessToken(twitter4j.auth.AccessToken), this factory method potentially returns a cached instance. AsyncTwitter getInstance(Authorization auth)  AsyncTwitter getInstance(Twitter twitter) a kind of copy factory method constructs an AsyncTwitter from Twitter instance static AsyncTwitter getSingleton() Returns default singleton AsyncTwitter instance. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values conf private final Configuration conf SINGLETON private static final AsyncTwitter SINGLETON Constructor Detail AsyncTwitterFactory public AsyncTwitterFactory() Creates an AsyncTwitterFactory with the root configuration, with no listener. AsyncTwitter instances will not perform callbacks when using this constructor. AsyncTwitterFactory public AsyncTwitterFactory(Configuration conf) Creates an AsyncTwitterFactory with the given configuration. Parameters: conf - the configuration to use Since: Twitter4J 2.1.1 AsyncTwitterFactory public AsyncTwitterFactory(java.lang.String configTreePath) Creates a AsyncTwitterFactory with the specified config tree, with given listener Parameters: configTreePath - the path Since: Twitter4J 2.1.12 Method Detail getInstance public AsyncTwitter getInstance() Returns an instance associated with the configuration bound to this factory. Returns: default singleton instance getInstance public AsyncTwitter getInstance(AccessToken accessToken) Returns a OAuth Authenticated instance. consumer key and consumer Secret must be provided by twitter4j.properties, or system properties. Unlike OAuthSupport.setOAuthAccessToken(twitter4j.auth.AccessToken), this factory method potentially returns a cached instance. Parameters: accessToken - access token Returns: an instance getInstance public AsyncTwitter getInstance(Authorization auth) Parameters: auth - authorization Returns: an instance getInstance public AsyncTwitter getInstance(Twitter twitter) a kind of copy factory method constructs an AsyncTwitter from Twitter instance Parameters: twitter - Twitter instance Returns: an instance getSingleton public static AsyncTwitter getSingleton() Returns default singleton AsyncTwitter instance. Returns: default singleton AsyncTwitter instance Since: Twitter4J 2.2.4 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AsyncTwitterImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AsyncTwitterImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":10,"i128":10,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":10,"i137":10,"i138":10,"i139":10,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":10,"i146":10,"i147":10,"i148":10,"i149":10,"i150":10,"i151":10,"i152":10,"i153":10,"i154":10,"i155":10,"i156":10,"i157":10,"i158":10,"i159":10,"i160":10,"i161":10,"i162":10,"i163":10,"i164":10,"i165":10,"i166":10,"i167":10,"i168":10,"i169":10,"i170":10,"i171":10,"i172":10,"i173":10,"i174":10,"i175":10,"i176":10,"i177":10,"i178":10,"i179":10,"i180":10,"i181":10,"i182":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class AsyncTwitterImpl java.lang.Object twitter4j.TwitterBaseImpl twitter4j.AsyncTwitterImpl All Implemented Interfaces: java.io.Serializable, DirectMessagesResourcesAsync, FavoritesResourcesAsync, FriendsFollowersResourcesAsync, HelpResourcesAsync, ListsResourcesAsync, PlacesGeoResourcesAsync, SavedSearchesResourcesAsync, SearchResourceAsync, SpamReportingResourceAsync, SuggestedUsersResourcesAsync, TimelinesResourcesAsync, TrendsResourcesAsync, TweetsResourcesAsync, UsersResourcesAsync, AsyncTwitter, AsyncOAuth2Support, AsyncOAuthSupport, OAuth2Support, OAuthSupport, TwitterBase class AsyncTwitterImpl extends TwitterBaseImpl implements AsyncTwitter Twitter API with a series of asynchronous APIs. With this class, you can call TwitterAPI asynchronously. Note that currently this class is NOT compatible with Google App Engine as it is maintaining threads internally. Currently this class is not carefully designed to be extended. It is suggested to extend this class only for mock testing purporse. Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested Classes  Modifier and Type Class and Description (package private) class  AsyncTwitterImpl.AsyncTask  Field Summary Fields  Modifier and Type Field and Description private static Dispatcher dispatcher  private java.util.List<TwitterListener> listeners  private static long serialVersionUID  private Twitter twitter  Fields inherited from class twitter4j.TwitterBaseImpl auth, conf, factory, http Constructor Summary Constructors  Constructor and Description AsyncTwitterImpl(Configuration conf, Authorization auth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void addListener(TwitterListener listener) Adds twitter listener void createBlock(long userId) Blocks the user specified in the ID parameter as the authenticating user. void createBlock(java.lang.String screenName) Blocks the user specified in the ID parameter as the authenticating user. void createFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. void createFriendship(long userId) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void createFriendship(long userId, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void createFriendship(java.lang.String screenName) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void createFriendship(java.lang.String screenName, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void createMute(long userId) Mutes the user specified in the ID parameter as the authenticating user. void createMute(java.lang.String screenName) Mutes the user specified in the screen name parameter as the authenticating user. void createSavedSearch(java.lang.String query) Creates a saved search for the authenticated user. void createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) Creates a new list for the authenticated user. void createUserListMember(long listId, long userId) Adds a member to a list. void createUserListMember(long ownerId, java.lang.String slug, long userId) Adds a member to a list. void createUserListMembers(long listId, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListMembers(long listId, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListMembers(long ownerId, java.lang.String slug, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListSubscription(long listId) Make the authenticated user follow the specified list. void createUserListSubscription(long ownerId, java.lang.String slug) Make the authenticated user follow the specified list. void destroyBlock(long userId) Un-blocks the user specified in the ID parameter as the authenticating user. void destroyBlock(java.lang.String screenName) Un-blocks the user specified in the ID parameter as the authenticating user. void destroyDirectMessage(long id) Destroys the direct message specified in the required ID parameter. void destroyFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. void destroyFriendship(long userId) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. void destroyFriendship(java.lang.String screenName) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. void destroyMute(long userId) Un-mutes the user specified in the ID parameter as the authenticating user. void destroyMute(java.lang.String screenName) Un-mutes the user specified in the screen name parameter as the authenticating user. void destroySavedSearch(int id) Destroys a saved search for the authenticated user. void destroyStatus(long statusId) Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. void destroyUserList(long listId) Deletes the specified list. void destroyUserList(long ownerId, java.lang.String slug) Deletes the specified list. void destroyUserListMember(long listId, long userId) Removes the specified member from the list. void destroyUserListMember(long ownerId, java.lang.String slug, long userId) Removes the specified member from the list. void destroyUserListSubscription(long listId) Unsubscribes the authenticated user form the specified list. void destroyUserListSubscription(long ownerId, java.lang.String slug) Unsubscribes the authenticated user form the specified list. boolean equals(java.lang.Object o)  void getAccountSettings() Returns the current trend, geo and sleep time information for the authenticating user. void getAPIConfiguration() Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. void getAvailableTrends() Retrieves the locations that Twitter has trending topic information for. void getBlocksIDs() Returns an array of numeric user ids the authenticating user is blocking. void getBlocksIDs(long cursor) Returns an array of numeric user ids the authenticating user is blocking. void getBlocksList() Returns a list of user objects that the authenticating user is blocking. void getBlocksList(long cursor) Returns a list of user objects that the authenticating user is blocking. void getClosestTrends(GeoLocation location) Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. void getContributees(long userId) Returns an array of users that the specified user can contribute to. void getContributees(java.lang.String screenName) Returns an array of users that the specified user can contribute to. void getContributors(long userId) Returns an array of users who can contribute to the specified account. void getContributors(java.lang.String screenName) Returns an array of users who can contribute to the specified account. void getDirectMessages() Returns a list of the direct messages sent to the authenticating user. void getDirectMessages(Paging paging) Returns a list of the direct messages sent to the authenticating user. private Dispatcher getDispatcher()  void getFavorites() Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(long userId) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(long userId, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(java.lang.String screenName) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(java.lang.String screenName, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFollowersIDs(long cursor) Returns an array of numeric IDs for every user the specified user is followed by. void getFollowersIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. void getFollowersIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. void getFollowersList(long userId, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getFollowersList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getFriendsIDs(long cursor) Returns an array of numeric IDs for every user the authenticating user is following. void getFriendsIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is following. void getFriendsIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is following. void getFriendsList(long userId, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getFriendsList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getGeoDetails(java.lang.String id) Find out more details of a place that was returned from the PlacesGeoResourcesAsync.reverseGeoCode(twitter4j.GeoQuery) method. void getHomeTimeline() Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. void getHomeTimeline(Paging paging) Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. void getIncomingFriendships(long cursor) Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. void getLanguages() Returns the list of languages supported by Twitter along with their ISO 639-1 code. void getMemberSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. void getMentions() Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. void getMentions(Paging paging) Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. void getMutesIDs(long cursor) Returns an array of numeric user ids the authenticating user is muting. void getMutesList(long cursor) Returns a list of user objects that the authenticating user is muting. OAuth2Token getOAuth2Token() Obtains an OAuth 2 Bearer token. void getOAuth2TokenAsync() Obtains an OAuth 2 Bearer token. AccessToken getOAuthAccessToken() Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. AccessToken getOAuthAccessToken(RequestToken requestToken) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) Retrieves an access token. AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. void getOAuthAccessTokenAsync() Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. void getOAuthAccessTokenAsync(RequestToken requestToken) Retrieves an access token associated with the supplied request token and sets userId. void getOAuthAccessTokenAsync(RequestToken requestToken, java.lang.String oauthVerifier) Retrieves an access token associated with the supplied request token and sets userId. void getOAuthAccessTokenAsync(java.lang.String oauthVerifier) Retrieves an access token. void getOAuthAccessTokenAsync(java.lang.String screenName, java.lang.String password) Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. RequestToken getOAuthRequestToken() Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackUrl) Retrieves a request token void getOAuthRequestTokenAsync() Retrieves a request token void getOAuthRequestTokenAsync(java.lang.String callbackURL) Retrieves a request token void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType) Retrieves a request token void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) Retrieves a request token void getOEmbed(OEmbedRequest req) Returns information allowing the creation of an embedded representation of a Tweet on third party sites. void getOutgoingFriendships(long cursor) Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. void getPlaceTrends(int woeid) Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. void getPrivacyPolicy() Returns Twitter's Privacy Policy. void getRateLimitStatus() Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. void getRateLimitStatus(java.lang.String... resources) Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. void getRetweets(long statusId) Returns up to 100 of the first retweets of a given tweet. void getRetweetsOfMe() Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. void getRetweetsOfMe(Paging paging) Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. void getSavedSearches() Returns the authenticated user's saved search queries. void getSentDirectMessages() Returns a list of the direct messages sent by the authenticating user. void getSentDirectMessages(Paging paging) Returns a list of the direct messages sent by the authenticating user. void getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) Locates places near the given coordinates which are similar in name. void getSuggestedUserCategories() Access to Twitter's suggested user list. void getTermsOfService() Returns Twitter's' Terms of Service. void getUserListMembers(long listId, long cursor) Returns the members of the specified list. void getUserListMembers(long ownerId, java.lang.String slug, long cursor) Returns the members of the specified list. void getUserListMemberships(long cursor) List the lists the authenticating user has been added to. void getUserListMemberships(long listMemberId, long cursor) List the lists the specified user has been added to. void getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. void getUserListMemberships(java.lang.String listMemberScreenName, long cursor) List the lists the specified user has been added to. void getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. void getUserLists(long listOwnerUserId) List the lists of the specified user. void getUserLists(java.lang.String listOwnerScreenName) List the lists of the specified user. void getUserListStatuses(long listId, Paging paging) Show tweet timeline for members of the specified list. void getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) Show tweet timeline for members of the specified list. void getUserListSubscribers(long listId, long cursor) Returns the subscribers of the specified list. void getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) Returns the subscribers of the specified list. void getUserListSubscriptions(java.lang.String listOwnerScreenName, long cursor) List the lists the specified user follows. void getUserSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. void getUserTimeline() Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(long userId) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(long userId, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(Paging paging) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(java.lang.String screenName) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(java.lang.String screenName, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. int hashCode()  void invalidateOAuth2Token() Revokes an issued OAuth 2 Bearer Token. void lookup(long... ids) Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. void lookupFriendships(long... ids) Returns the relationship of the authenticating user to the specified users. void lookupFriendships(java.lang.String... screenNames) Returns the relationship of the authenticating user to the specified users. void lookupUsers(long... ids) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. void lookupUsers(java.lang.String... screenNames) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. void removeProfileBanner() Removes the uploaded profile banner for the authenticating user. void reportSpam(long userId) The user specified in the id is blocked by the authenticated user and reported as a spammer. void reportSpam(java.lang.String screenName) The user specified in the id is blocked by the authenticated user and reported as a spammer. void retweetStatus(long statusId) Retweets a tweet. void reverseGeoCode(GeoQuery query) Search for places (cities and neighborhoods) that can be attached to a statuses/update. void search(Query query) Returns tweets that match a specified query. void searchPlaces(GeoQuery query) Search for places that can be attached to a statuses/update. void searchUsers(java.lang.String query, int page) Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. void sendDirectMessage(long userId, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. void sendDirectMessage(java.lang.String screenName, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. void setOAuth2Token(OAuth2Token oauth2Token) Sets the OAuth 2 Bearer token. void setOAuthAccessToken(AccessToken accessToken) Sets the access token void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) sets the OAuth consumer key and consumer secret void showDirectMessage(long id) Returns a single direct message, specified by an id parameter. void showFriendship(long sourceId, long targetId) Returns detailed information about the relationship between two users. void showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) Returns detailed information about the relationship between two users. void showSavedSearch(int id) Retrieve the data for a saved search owned by the authenticating user specified by the given id. void showStatus(long id) Returns a single status, specified by the id parameter below. void showUser(long userId) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. void showUser(java.lang.String screenName) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. void showUserList(long listId) Show the specified list. void showUserList(long ownerId, java.lang.String slug) Show the specified list. void showUserListMembership(long listId, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json void showUserListMembership(long ownerId, java.lang.String slug, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json void showUserListSubscription(long listId, long userId) Check if the specified user is a subscriber of the specified list. void showUserListSubscription(long ownerId, java.lang.String slug, long userId) Check if the specified user is a subscriber of the specified list. void shutdown() Shuts down internal dispatcher thread shared across all AsyncTwitter instances. java.lang.String toString()  void updateAccountSettings(java.lang.Integer trend_locationWoeid, java.lang.Boolean sleep_timeEnabled, java.lang.String start_sleepTime, java.lang.String end_sleepTime, java.lang.String time_zone, java.lang.String lang) Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. void updateFriendship(long userId, boolean enableDeviceNotification, boolean retweet) Allows you to enable or disable retweets and device notifications from the specified user. void updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweet) Allows you to enable or disable retweets and device notifications from the specified user. void updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) Sets values that users are able to set under the "Account" tab of their settings page. void updateProfileBackgroundImage(java.io.File image, boolean tile) Updates the authenticating user's profile background image. void updateProfileBackgroundImage(java.io.InputStream image, boolean tile) Updates the authenticating user's profile background image. void updateProfileBanner(java.io.File image) Uploads a profile banner on behalf of the authenticating user. void updateProfileBanner(java.io.InputStream image) Uploads a profile banner on behalf of the authenticating user. void updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. void updateProfileImage(java.io.File image) Updates the authenticating user's profile image. void updateProfileImage(java.io.InputStream image) Updates the authenticating user's profile image. void updateStatus(StatusUpdate latestStatus) Updates the authenticating user's status. void updateStatus(java.lang.String statusText) Updates the authenticating user's status. void updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. void updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. void verifyCredentials() Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Methods inherited from class twitter4j.TwitterBaseImpl addRateLimitStatusListener, ensureAuthorizationEnabled, ensureOAuthEnabled, fillInIDAndScreenName, getAuthorization, getConfiguration, getId, getOAuthRequestToken, getOAuthRequestToken, getScreenName, httpResponseReceived, onRateLimitReached, onRateLimitStatus, setFactory Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Methods inherited from interface twitter4j.auth.OAuthSupport getOAuthRequestToken, getOAuthRequestToken Methods inherited from interface twitter4j.TwitterBase addRateLimitStatusListener, getAuthorization, getConfiguration, getId, getScreenName, onRateLimitReached, onRateLimitStatus Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values twitter private final Twitter twitter listeners private final java.util.List<TwitterListener> listeners dispatcher private static transient volatile Dispatcher dispatcher Constructor Detail AsyncTwitterImpl AsyncTwitterImpl(Configuration conf, Authorization auth) Method Detail addListener public void addListener(TwitterListener listener) Description copied from interface: AsyncTwitter Adds twitter listener Specified by: addListener in interface AsyncTwitter Parameters: listener - TwitterListener getMentions public void getMentions() Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected. This method calls https://api.twitter.com/1.1/statuses/mentions Specified by: getMentions in interface TimelinesResourcesAsync See Also: GET statuses/mentions | Twitter Developers getMentions public void getMentions(Paging paging) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected. This method calls https://api.twitter.com/1.1/statuses/mentions Specified by: getMentions in interface TimelinesResourcesAsync Parameters: paging - controls pagination See Also: GET statuses/mentions | Twitter Developers getUserTimeline public void getUserTimeline(java.lang.String screenName, Paging paging) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResourcesAsync Parameters: screenName - Specifies the screen name of the user for whom to return the user_timeline. paging - controls pagination See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public void getUserTimeline(long userId, Paging paging) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResourcesAsync Parameters: userId - Specifies the ID of the user for whom to return the user_timeline. paging - controls pagination See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public void getUserTimeline(Paging paging) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResourcesAsync Parameters: paging - controls pagination See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public void getUserTimeline(java.lang.String screenName) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResourcesAsync Parameters: screenName - Specifies the screen name of the user for whom to return the user_timeline. See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public void getUserTimeline(long userId) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResourcesAsync Parameters: userId - Specifies the ID of the user for whom to return the user_timeline. See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public void getUserTimeline() Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResourcesAsync See Also: GET statuses/user_timeline | Twitter Developers getHomeTimeline public void getHomeTimeline() Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Specified by: getHomeTimeline in interface TimelinesResourcesAsync See Also: GET statuses/home_timeline | Twitter Developers getHomeTimeline public void getHomeTimeline(Paging paging) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Specified by: getHomeTimeline in interface TimelinesResourcesAsync Parameters: paging - controls pagination See Also: GET statuses/home_timeline | Twitter Developers getRetweetsOfMe public void getRetweetsOfMe() Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Specified by: getRetweetsOfMe in interface TimelinesResourcesAsync See Also: GET statuses/retweets_of_me | Twitter Developers getRetweetsOfMe public void getRetweetsOfMe(Paging paging) Description copied from interface: TimelinesResourcesAsync Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Specified by: getRetweetsOfMe in interface TimelinesResourcesAsync Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. See Also: GET statuses/retweets_of_me | Twitter Developers getRetweets public void getRetweets(long statusId) Description copied from interface: TweetsResourcesAsync Returns up to 100 of the first retweets of a given tweet. This method calls https://api.twitter.com/1.1/statuses/retweets Specified by: getRetweets in interface TweetsResourcesAsync Parameters: statusId - The numerical ID of the tweet you want the retweets of. See Also: Tweets Resources › statuses/retweets/:id showStatus public void showStatus(long id) Description copied from interface: TweetsResourcesAsync Returns a single status, specified by the id parameter below. The status's author will be returned inline. This method calls https://api.twitter.com/1.1/statuses/show Specified by: showStatus in interface TweetsResourcesAsync Parameters: id - int See Also: GET statuses/show/:id | Twitter Developers destroyStatus public void destroyStatus(long statusId) Description copied from interface: TweetsResourcesAsync Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. This method calls https://api.twitter.com/1.1/statuses/destroy Specified by: destroyStatus in interface TweetsResourcesAsync Parameters: statusId - String See Also: POST statuses/destroy/:id | Twitter Developers updateStatus public void updateStatus(java.lang.String statusText) Description copied from interface: TweetsResourcesAsync Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. This method calls https://api.twitter.com/1.1/statuses/update Specified by: updateStatus in interface TweetsResourcesAsync Parameters: statusText - String See Also: POST statuses/update | Twitter Developers updateStatus public void updateStatus(StatusUpdate latestStatus) Description copied from interface: TweetsResourcesAsync Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. Statuses over 140 characters will be forcibly truncated. This method calls https://api.twitter.com/1.1/statuses/update Specified by: updateStatus in interface TweetsResourcesAsync Parameters: latestStatus - the latest status to be updated. See Also: POST statuses/update | Twitter Developers retweetStatus public void retweetStatus(long statusId) Description copied from interface: TweetsResourcesAsync Retweets a tweet. Returns the original tweet with retweet details embedded. This method calls https://api.twitter.com/1.1/statuses/retweet Specified by: retweetStatus in interface TweetsResourcesAsync Parameters: statusId - The ID of the status to retweet. See Also: POST statuses/retweet/:id | Twitter Developers getOEmbed public void getOEmbed(OEmbedRequest req) Description copied from interface: TweetsResourcesAsync Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification for information about the response format. While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements. Do not rely on any class or id parameters to stay constant in the returned markup. This method calls https://api.twitter.com/1.1/statuses/oembed.json Specified by: getOEmbed in interface TweetsResourcesAsync Parameters: req - request See Also: GET statuses/oembed | Twitter Developers lookup public void lookup(long... ids) Description copied from interface: TweetsResourcesAsync Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. This method is especially useful to get the details (hydrate) a collection of Tweet IDs. This method calls https://api.twitter.com/1.1/statuses/lookup.json Specified by: lookup in interface TweetsResourcesAsync Parameters: ids - array of the ids to lookup See Also: GET statuses/lookup search public void search(Query query) Description copied from interface: SearchResourceAsync Returns tweets that match a specified query. This method calls http://search.twitter.com/search.json Specified by: search in interface SearchResourceAsync Parameters: query - - the search condition See Also: GET search | Twitter Developers, Twitter API / Search Operators getDirectMessages public void getDirectMessages() Description copied from interface: DirectMessagesResourcesAsync Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages Specified by: getDirectMessages in interface DirectMessagesResourcesAsync See Also: GET direct_messages | Twitter Developers getDirectMessages public void getDirectMessages(Paging paging) Description copied from interface: DirectMessagesResourcesAsync Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages Specified by: getDirectMessages in interface DirectMessagesResourcesAsync Parameters: paging - controls pagination See Also: GET direct_messages | Twitter Developers getSentDirectMessages public void getSentDirectMessages() Description copied from interface: DirectMessagesResourcesAsync Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent Specified by: getSentDirectMessages in interface DirectMessagesResourcesAsync See Also: GET direct_messages/sent | Twitter Developers getSentDirectMessages public void getSentDirectMessages(Paging paging) Description copied from interface: DirectMessagesResourcesAsync Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent Specified by: getSentDirectMessages in interface DirectMessagesResourcesAsync Parameters: paging - controls pagination See Also: GET direct_messages/sent | Twitter Developers showDirectMessage public void showDirectMessage(long id) Description copied from interface: DirectMessagesResourcesAsync Returns a single direct message, specified by an id parameter. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/direct_messages/show/:id.json Specified by: showDirectMessage in interface DirectMessagesResourcesAsync Parameters: id - message id See Also: #newtwitter and the API - Twitter API Announcements | Google Group destroyDirectMessage public void destroyDirectMessage(long id) Description copied from interface: DirectMessagesResourcesAsync Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message. This method calls https://api.twitter.com/1.1/direct_messages/destroy Specified by: destroyDirectMessage in interface DirectMessagesResourcesAsync Parameters: id - int See Also: POST direct_messages/destroy/:id | Twitter Developers sendDirectMessage public void sendDirectMessage(long userId, java.lang.String text) Description copied from interface: DirectMessagesResourcesAsync Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Specified by: sendDirectMessage in interface DirectMessagesResourcesAsync Parameters: userId - the screen name of the user to whom send the direct message text - The text of your direct message. See Also: POST direct_messages/new | Twitter Developers sendDirectMessage public void sendDirectMessage(java.lang.String screenName, java.lang.String text) Description copied from interface: DirectMessagesResourcesAsync Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Specified by: sendDirectMessage in interface DirectMessagesResourcesAsync Parameters: screenName - the screen name of the user to whom send the direct message text - The text of your direct message. See Also: POST direct_messages/new | Twitter Developers getFriendsIDs public void getFriendsIDs(long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every user the authenticating user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResourcesAsync Parameters: cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. See Also: GET friends/ids | Twitter Developers getFriendsIDs public void getFriendsIDs(long userId, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResourcesAsync Parameters: userId - Specifies the ID of the user for whom to return the friends list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. See Also: GET friends/ids | Twitter Developers getFriendsIDs public void getFriendsIDs(java.lang.String screenName, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResourcesAsync Parameters: screenName - Specifies the screen name of the user for whom to return the friends list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. See Also: GET friends/ids | Twitter Developers getFollowersIDs public void getFollowersIDs(long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResourcesAsync Parameters: cursor - Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET followers/ids | Twitter Developers getFollowersIDs public void getFollowersIDs(long userId, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResourcesAsync Parameters: userId - Specifies the ID of the user for whom to return the followers list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. See Also: GET followers/ids | Twitter Developers getFollowersIDs public void getFollowersIDs(java.lang.String screenName, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResourcesAsync Parameters: screenName - Specifies the screen name of the user for whom to return the followers list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. See Also: GET followers/ids | Twitter Developers lookupFriendships public void lookupFriendships(long... ids) Description copied from interface: FriendsFollowersResourcesAsync Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Specified by: lookupFriendships in interface FriendsFollowersResourcesAsync Parameters: ids - array of the ids to lookup See Also: #newtwitter and the API - Twitter API Announcements | Google Group lookupFriendships public void lookupFriendships(java.lang.String... screenNames) Description copied from interface: FriendsFollowersResourcesAsync Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Specified by: lookupFriendships in interface FriendsFollowersResourcesAsync Parameters: screenNames - array of the screen names to lookup See Also: #newtwitter and the API - Twitter API Announcements | Google Group getIncomingFriendships public void getIncomingFriendships(long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. This method calls https://api.twitter.com/1.1/friendships/incoming.json Specified by: getIncomingFriendships in interface FriendsFollowersResourcesAsync Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. See Also: GET friendships/incoming | Twitter Developers getOutgoingFriendships public void getOutgoingFriendships(long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. This method calls https://api.twitter.com/1.1/friendships/outgoing.json Specified by: getOutgoingFriendships in interface FriendsFollowersResourcesAsync Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. See Also: GET friendships/outgoing | Twitter Developers createFriendship public void createFriendship(long userId) Description copied from interface: FriendsFollowersResourcesAsync Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Specified by: createFriendship in interface FriendsFollowersResourcesAsync Parameters: userId - the ID of the user to be befriended See Also: POST friendships/create | Twitter Developers createFriendship public void createFriendship(java.lang.String screenName) Description copied from interface: FriendsFollowersResourcesAsync Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Specified by: createFriendship in interface FriendsFollowersResourcesAsync Parameters: screenName - the screen name of the user to be befriended See Also: POST friendships/create | Twitter Developers createFriendship public void createFriendship(long userId, boolean follow) Description copied from interface: FriendsFollowersResourcesAsync Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Specified by: createFriendship in interface FriendsFollowersResourcesAsync Parameters: userId - the ID of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. See Also: POST friendships/create | Twitter Developers createFriendship public void createFriendship(java.lang.String screenName, boolean follow) Description copied from interface: FriendsFollowersResourcesAsync Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Specified by: createFriendship in interface FriendsFollowersResourcesAsync Parameters: screenName - the screen name of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. See Also: POST friendships/create | Twitter Developers destroyFriendship public void destroyFriendship(long userId) Description copied from interface: FriendsFollowersResourcesAsync Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy Specified by: destroyFriendship in interface FriendsFollowersResourcesAsync Parameters: userId - the screen name of the user to be befriended See Also: POST friendships/destroy | Twitter Developers destroyFriendship public void destroyFriendship(java.lang.String screenName) Description copied from interface: FriendsFollowersResourcesAsync Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy Specified by: destroyFriendship in interface FriendsFollowersResourcesAsync Parameters: screenName - the screen name of the user to be befriended See Also: POST friendships/destroy | Twitter Developers updateFriendship public void updateFriendship(long userId, boolean enableDeviceNotification, boolean retweet) Description copied from interface: FriendsFollowersResourcesAsync Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Specified by: updateFriendship in interface FriendsFollowersResourcesAsync Parameters: userId - user id to update enableDeviceNotification - set true to enable device notification retweet - set true to enable retweets See Also: #newtwitter and the API - Twitter API Announcements | Google Group updateFriendship public void updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweet) Description copied from interface: FriendsFollowersResourcesAsync Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Specified by: updateFriendship in interface FriendsFollowersResourcesAsync Parameters: screenName - screen name to update enableDeviceNotification - set true to enable device notification retweet - set true to enable retweets See Also: #newtwitter and the API - Twitter API Announcements | Google Group showFriendship public void showFriendship(long sourceId, long targetId) Description copied from interface: FriendsFollowersResourcesAsync Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Specified by: showFriendship in interface FriendsFollowersResourcesAsync Parameters: sourceId - the ID of the source user targetId - the ID of the target user See Also: GET friendships/show | Twitter Developers showFriendship public void showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) Description copied from interface: FriendsFollowersResourcesAsync Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Specified by: showFriendship in interface FriendsFollowersResourcesAsync Parameters: sourceScreenName - the screen name of the source user targetScreenName - the screen name of the target user See Also: GET friendships/show | Twitter Developers getFriendsList public void getFriendsList(long userId, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResourcesAsync Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. See Also: GET friends/list | Twitter Developers getFriendsList public void getFriendsList(java.lang.String screenName, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResourcesAsync Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. See Also: GET friends/list | Twitter Developers getFollowersList public void getFollowersList(long userId, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResourcesAsync Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. See Also: GET followers/list | Twitter Developers getFollowersList public void getFollowersList(java.lang.String screenName, long cursor) Description copied from interface: FriendsFollowersResourcesAsync Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResourcesAsync Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. See Also: GET followers/list | Twitter Developers getAccountSettings public void getAccountSettings() Description copied from interface: UsersResourcesAsync Returns the current trend, geo and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Specified by: getAccountSettings in interface UsersResourcesAsync See Also: GET account/settings | Twitter Developers verifyCredentials public void verifyCredentials() Description copied from interface: UsersResourcesAsync Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. This method calls https://api.twitter.com/1.1/account/verify_credentials.json Specified by: verifyCredentials in interface UsersResourcesAsync See Also: GET account/verify_credentials | Twitter Developers updateAccountSettings public void updateAccountSettings(java.lang.Integer trend_locationWoeid, java.lang.Boolean sleep_timeEnabled, java.lang.String start_sleepTime, java.lang.String end_sleepTime, java.lang.String time_zone, java.lang.String lang) Description copied from interface: UsersResourcesAsync Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Specified by: updateAccountSettings in interface UsersResourcesAsync Parameters: trend_locationWoeid - Optional. The Yahoo! Where On Earth ID to use as the user's default trend location. sleep_timeEnabled - Optional. Whether sleep time is enabled for the user start_sleepTime - Optional. The hour that sleep time should begin if it is enabled. end_sleepTime - Optional. The hour that sleep time should end if it is enabled. time_zone - Optional. The timezone dates and times should be displayed in for the user. lang - Optional. The language which Twitter should render in for this user. (two letter ISO 639-1) See Also: POST account/settings | Twitter Developers updateProfile public void updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) Description copied from interface: UsersResourcesAsync Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated. Specified by: updateProfile in interface UsersResourcesAsync Parameters: name - Optional. Maximum of 20 characters. url - Optional. Maximum of 100 characters. Will be prepended with "http://" if not present. location - Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way. description - Optional. Maximum of 160 characters. See Also: POST account/update_profile | Twitter Developers updateProfileBackgroundImage public void updateProfileBackgroundImage(java.io.File image, boolean tile) Description copied from interface: UsersResourcesAsync Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Specified by: updateProfileBackgroundImage in interface UsersResourcesAsync Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. See Also: POST account/update_profile_background_image | Twitter Developers updateProfileBackgroundImage public void updateProfileBackgroundImage(java.io.InputStream image, boolean tile) Description copied from interface: UsersResourcesAsync Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Specified by: updateProfileBackgroundImage in interface UsersResourcesAsync Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. See Also: POST account/update_profile_background_image | Twitter Developers updateProfileColors public void updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) Description copied from interface: UsersResourcesAsync Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexadecimal value, and may be either three or six characters (ex: #fff or #ffffff). This method calls https://api.twitter.com/1.1/account/update_profile_colors Specified by: updateProfileColors in interface UsersResourcesAsync Parameters: profileBackgroundColor - optional, can be null profileTextColor - optional, can be null profileLinkColor - optional, can be null profileSidebarFillColor - optional, can be null profileSidebarBorderColor - optional, can be null See Also: POST account/update_profile_colors | Twitter Developers updateProfileImage public void updateProfileImage(java.io.File image) Description copied from interface: UsersResourcesAsync Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Specified by: updateProfileImage in interface UsersResourcesAsync Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. See Also: POST account/update_profile_image | Twitter Developers updateProfileImage public void updateProfileImage(java.io.InputStream image) Description copied from interface: UsersResourcesAsync Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Specified by: updateProfileImage in interface UsersResourcesAsync Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. See Also: POST account/update_profile_image | Twitter Developers getBlocksList public void getBlocksList() Description copied from interface: UsersResourcesAsync Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.xml Specified by: getBlocksList in interface UsersResourcesAsync See Also: GET blocks/blocking | Twitter Developers getBlocksList public void getBlocksList(long cursor) Description copied from interface: UsersResourcesAsync Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.xml Specified by: getBlocksList in interface UsersResourcesAsync Parameters: cursor - Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." See Also: GET blocks/blocking | Twitter Developers getBlocksIDs public void getBlocksIDs() Description copied from interface: UsersResourcesAsync Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking/ids Specified by: getBlocksIDs in interface UsersResourcesAsync See Also: GET blocks/ids | Twitter Developers getBlocksIDs public void getBlocksIDs(long cursor) Description copied from interface: UsersResourcesAsync Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking/ids Specified by: getBlocksIDs in interface UsersResourcesAsync Parameters: cursor - cursor See Also: GET blocks/ids | Twitter Developers createBlock public void createBlock(long userId) Description copied from interface: UsersResourcesAsync Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Specified by: createBlock in interface UsersResourcesAsync Parameters: userId - the screen_name of the user to block See Also: POST blocks/create | Twitter Developers createBlock public void createBlock(java.lang.String screenName) Description copied from interface: UsersResourcesAsync Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Specified by: createBlock in interface UsersResourcesAsync Parameters: screenName - the screen_name of the user to block See Also: POST blocks/create | Twitter Developers destroyBlock public void destroyBlock(long userId) Description copied from interface: UsersResourcesAsync Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Specified by: destroyBlock in interface UsersResourcesAsync Parameters: userId - the ID of the user to block See Also: POST blocks/destroy | Twitter Developers destroyBlock public void destroyBlock(java.lang.String screenName) Description copied from interface: UsersResourcesAsync Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Specified by: destroyBlock in interface UsersResourcesAsync Parameters: screenName - the screen_name of the user to block See Also: POST blocks/destroy | Twitter Developers getMutesList public void getMutesList(long cursor) Description copied from interface: UsersResourcesAsync Returns a list of user objects that the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/list Specified by: getMutesList in interface UsersResourcesAsync Parameters: cursor - Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." See Also: GET mutes/users/list | Twitter Developers getMutesIDs public void getMutesIDs(long cursor) Description copied from interface: UsersResourcesAsync Returns an array of numeric user ids the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/ids Specified by: getMutesIDs in interface UsersResourcesAsync Parameters: cursor - Causes the list of muted users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." See Also: GET mutes/users/ids | Twitter Developers createMute public void createMute(long userId) Description copied from interface: UsersResourcesAsync Mutes the user specified in the ID parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Specified by: createMute in interface UsersResourcesAsync Parameters: userId - the ID of the user to mute See Also: POST mutes/users/create | Twitter Developers createMute public void createMute(java.lang.String screenName) Description copied from interface: UsersResourcesAsync Mutes the user specified in the screen name parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Specified by: createMute in interface UsersResourcesAsync Parameters: screenName - the screen_name of the user to mute See Also: POST mutes/users/create | Twitter Developers destroyMute public void destroyMute(long userId) Description copied from interface: UsersResourcesAsync Un-mutes the user specified in the ID parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Specified by: destroyMute in interface UsersResourcesAsync Parameters: userId - the ID of the user to mute See Also: POST mutes/users/destroy | Twitter Developers destroyMute public void destroyMute(java.lang.String screenName) Description copied from interface: UsersResourcesAsync Un-mutes the user specified in the screen name parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Specified by: destroyMute in interface UsersResourcesAsync Parameters: screenName - the screen_name of the user to mute See Also: POST mutes/users/destroy | Twitter Developers lookupUsers public void lookupUsers(long... ids) Description copied from interface: UsersResourcesAsync Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Specified by: lookupUsers in interface UsersResourcesAsync Parameters: ids - Specifies the screen names of the users to retrieve. See Also: GET users/lookup | Twitter Developers lookupUsers public void lookupUsers(java.lang.String... screenNames) Description copied from interface: UsersResourcesAsync Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Specified by: lookupUsers in interface UsersResourcesAsync Parameters: screenNames - Specifies the screen names of the users to retrieve. See Also: GET users/lookup | Twitter Developers showUser public void showUser(long userId) Description copied from interface: UsersResourcesAsync Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Specified by: showUser in interface UsersResourcesAsync Parameters: userId - the ID of the user for whom to request the retrieve See Also: GET users/show | Twitter Developers showUser public void showUser(java.lang.String screenName) Description copied from interface: UsersResourcesAsync Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Specified by: showUser in interface UsersResourcesAsync Parameters: screenName - the screen name of the user for whom to request the detail See Also: GET users/show | Twitter Developers searchUsers public void searchUsers(java.lang.String query, int page) Description copied from interface: UsersResourcesAsync Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. This method calls https://api.twitter.com/1.1/users/search.json Specified by: searchUsers in interface UsersResourcesAsync Parameters: query - The query to run against people search. page - Specifies the page of results to retrieve. Number of statuses per page is fixed to 20. See Also: GET users/search | Twitter Developers getContributees public void getContributees(long userId) Description copied from interface: UsersResourcesAsync Returns an array of users that the specified user can contribute to. Specified by: getContributees in interface UsersResourcesAsync Parameters: userId - The user id of the user for whom to return results for See Also: GET users/contributors | Twitter Developers getContributees public void getContributees(java.lang.String screenName) Description copied from interface: UsersResourcesAsync Returns an array of users that the specified user can contribute to. Specified by: getContributees in interface UsersResourcesAsync Parameters: screenName - The screen name of the user for whom to return results for See Also: GET users/contributors | Twitter Developers getContributors public void getContributors(long userId) Description copied from interface: UsersResourcesAsync Returns an array of users who can contribute to the specified account. Specified by: getContributors in interface UsersResourcesAsync Parameters: userId - The user id of the user for whom to return results for See Also: GET users/contributors | Twitter Developers getContributors public void getContributors(java.lang.String screenName) Description copied from interface: UsersResourcesAsync Returns an array of users who can contribute to the specified account. Specified by: getContributors in interface UsersResourcesAsync Parameters: screenName - The screen name of the user for whom to return results for See Also: GET users/contributors | Twitter Developers removeProfileBanner public void removeProfileBanner() Description copied from interface: UsersResourcesAsync Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success. This method calls https://api.twitter.com/1.1/account/remove_profile_banner.json Specified by: removeProfileBanner in interface UsersResourcesAsync See Also: POST account/remove_profile_banner | Twitter Developers updateProfileBanner public void updateProfileBanner(java.io.File image) Description copied from interface: UsersResourcesAsync Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Specified by: updateProfileBanner in interface UsersResourcesAsync Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. See Also: POST account/update_profile_banner | Twitter Developers updateProfileBanner public void updateProfileBanner(java.io.InputStream image) Description copied from interface: UsersResourcesAsync Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Specified by: updateProfileBanner in interface UsersResourcesAsync Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. See Also: POST account/update_profile_banner | Twitter Developers getUserSuggestions public void getUserSuggestions(java.lang.String categorySlug) Description copied from interface: SuggestedUsersResourcesAsync Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. This method calls https://api.twitter.com/1.1/users/suggestions/:slug.json Specified by: getUserSuggestions in interface SuggestedUsersResourcesAsync Parameters: categorySlug - slug See Also: GET users/suggestions/:slug | Twitter Developers getSuggestedUserCategories public void getSuggestedUserCategories() Description copied from interface: SuggestedUsersResourcesAsync Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in the users/suggestions/category endpoint to get the users in that category. This method calls https://api.twitter.com/1.1/users/suggestions Specified by: getSuggestedUserCategories in interface SuggestedUsersResourcesAsync See Also: GET users/suggestions | Twitter Developers getMemberSuggestions public void getMemberSuggestions(java.lang.String categorySlug) Description copied from interface: SuggestedUsersResourcesAsync Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/users/suggestions/:slug/members.json Specified by: getMemberSuggestions in interface SuggestedUsersResourcesAsync Parameters: categorySlug - slug See Also: #newtwitter and the API - Twitter API Announcements | Google Group getFavorites public void getFavorites() Description copied from interface: FavoritesResourcesAsync Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites Specified by: getFavorites in interface FavoritesResourcesAsync See Also: GET favorites | Twitter Developers getFavorites public void getFavorites(long userId) Description copied from interface: FavoritesResourcesAsync Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites Specified by: getFavorites in interface FavoritesResourcesAsync Parameters: userId - the id of the user for whom to request a list of favorite statuses See Also: GET favorites | Twitter Developers getFavorites public void getFavorites(java.lang.String screenName) Description copied from interface: FavoritesResourcesAsync Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites Specified by: getFavorites in interface FavoritesResourcesAsync Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses See Also: GET favorites | Twitter Developers getFavorites public void getFavorites(Paging paging) Description copied from interface: FavoritesResourcesAsync Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites.json Specified by: getFavorites in interface FavoritesResourcesAsync Parameters: paging - controls pagination. Supports sinceId and page parameters. See Also: GET favorites | Twitter Developers getFavorites public void getFavorites(long userId, Paging paging) Description copied from interface: FavoritesResourcesAsync Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Specified by: getFavorites in interface FavoritesResourcesAsync Parameters: userId - the id of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. See Also: GET favorites | Twitter Developers getFavorites public void getFavorites(java.lang.String screenName, Paging paging) Description copied from interface: FavoritesResourcesAsync Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Specified by: getFavorites in interface FavoritesResourcesAsync Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. See Also: GET favorites | Twitter Developers destroyFavorite public void destroyFavorite(long id) Description copied from interface: FavoritesResourcesAsync Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful. This method calls https://api.twitter.com/1.1/favorites/destroy Specified by: destroyFavorite in interface FavoritesResourcesAsync Parameters: id - the ID or screen name of the user for whom to request a list of un-favorite statuses. See Also: POST favorites/destroy/:id | Twitter Developers createFavorite public void createFavorite(long id) Description copied from interface: FavoritesResourcesAsync Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful. This method calls https://api.twitter.com/1.1/favorites/create%C2%A0 Specified by: createFavorite in interface FavoritesResourcesAsync Parameters: id - the ID or screen name of the user for whom to request a list of favorite statuses. See Also: POST favorites/create/:id | Twitter Developers getUserLists public void getUserLists(long listOwnerUserId) Description copied from interface: ListsResourcesAsync List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Specified by: getUserLists in interface ListsResourcesAsync Parameters: listOwnerUserId - The id of the list owner returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists | Twitter Developers getUserLists public void getUserLists(java.lang.String listOwnerScreenName) Description copied from interface: ListsResourcesAsync List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Specified by: getUserLists in interface ListsResourcesAsync Parameters: listOwnerScreenName - The screen name of the list owner as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists | Twitter Developers getUserListStatuses public void getUserListStatuses(long listId, Paging paging) Description copied from interface: ListsResourcesAsync Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Specified by: getUserListStatuses in interface ListsResourcesAsync Parameters: listId - The id of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. See Also: GET lists/statuses | Twitter Developers getUserListStatuses public void getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) Description copied from interface: ListsResourcesAsync Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Specified by: getUserListStatuses in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. See Also: GET lists/statuses | Twitter Developers destroyUserListMember public void destroyUserListMember(long listId, long userId) Description copied from interface: ListsResourcesAsync Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Specified by: destroyUserListMember in interface ListsResourcesAsync Parameters: listId - The id of the list. userId - The screen name of the member you wish to remove from the list. See Also: POST lists/members/destroy | Twitter Developers destroyUserListMember public void destroyUserListMember(long ownerId, java.lang.String slug, long userId) Description copied from interface: ListsResourcesAsync Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Specified by: destroyUserListMember in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The screen name of the member you wish to remove from the list. See Also: POST lists/members/destroy | Twitter Developers getUserListMemberships public void getUserListMemberships(long cursor) Description copied from interface: ListsResourcesAsync List the lists the authenticating user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResourcesAsync Parameters: cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/memberships | Twitter Developers getUserListMemberships public void getUserListMemberships(java.lang.String listMemberScreenName, long cursor) Description copied from interface: ListsResourcesAsync List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResourcesAsync Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/memberships | Twitter Developers getUserListMemberships public void getUserListMemberships(long listMemberId, long cursor) Description copied from interface: ListsResourcesAsync List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResourcesAsync Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/memberships | Twitter Developers getUserListMemberships public void getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) Description copied from interface: ListsResourcesAsync List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResourcesAsync Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. See Also: GET lists/memberships | Twitter Developers getUserListMemberships public void getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) Description copied from interface: ListsResourcesAsync List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResourcesAsync Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. See Also: GET lists/memberships | Twitter Developers getUserListSubscribers public void getUserListSubscribers(long listId, long cursor) Description copied from interface: ListsResourcesAsync Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResourcesAsync Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public void getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) Description copied from interface: ListsResourcesAsync Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/subscribers | Twitter Developers createUserListSubscription public void createUserListSubscription(long listId) Description copied from interface: ListsResourcesAsync Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Specified by: createUserListSubscription in interface ListsResourcesAsync Parameters: listId - The id of the list. See Also: POST lists/subscribers/create | Twitter Developers createUserListSubscription public void createUserListSubscription(long ownerId, java.lang.String slug) Description copied from interface: ListsResourcesAsync Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Specified by: createUserListSubscription in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list See Also: POST lists/subscribers/create | Twitter Developers showUserListSubscription public void showUserListSubscription(long listId, long userId) Description copied from interface: ListsResourcesAsync Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Specified by: showUserListSubscription in interface ListsResourcesAsync Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/subscribers/show | Twitter Developers showUserListSubscription public void showUserListSubscription(long ownerId, java.lang.String slug, long userId) Description copied from interface: ListsResourcesAsync Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Specified by: showUserListSubscription in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/subscribers/show | Twitter Developers destroyUserListSubscription public void destroyUserListSubscription(long listId) Description copied from interface: ListsResourcesAsync Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Specified by: destroyUserListSubscription in interface ListsResourcesAsync Parameters: listId - The id of the list. See Also: POST lists/subscribers/destroy | Twitter Developers destroyUserListSubscription public void destroyUserListSubscription(long ownerId, java.lang.String slug) Description copied from interface: ListsResourcesAsync Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Specified by: destroyUserListSubscription in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list See Also: POST lists/subscribers/destroy | Twitter Developers createUserListMembers public void createUserListMembers(long listId, long... userIds) Description copied from interface: ListsResourcesAsync Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResourcesAsync Parameters: listId - The id of the list. userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public void createUserListMembers(long ownerId, java.lang.String slug, long... userIds) Description copied from interface: ListsResourcesAsync Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public void createUserListMembers(long listId, java.lang.String... screenNames) Description copied from interface: ListsResourcesAsync Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResourcesAsync Parameters: listId - The id of the list. screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public void createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) Description copied from interface: ListsResourcesAsync Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. See Also: POST lists/members/create_all | Twitter Developers showUserListMembership public void showUserListMembership(long listId, long userId) Description copied from interface: ListsResourcesAsync Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Specified by: showUserListMembership in interface ListsResourcesAsync Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. See Also: GET lists/members/show | Twitter Developers showUserListMembership public void showUserListMembership(long ownerId, java.lang.String slug, long userId) Description copied from interface: ListsResourcesAsync Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Specified by: showUserListMembership in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. .getStatusCode() returns 404 in that case.) See Also: GET lists/members/show | Twitter Developers getUserListMembers public void getUserListMembers(long listId, long cursor) Description copied from interface: ListsResourcesAsync Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResourcesAsync Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/members | Twitter Developers getUserListMembers public void getUserListMembers(long ownerId, java.lang.String slug, long cursor) Description copied from interface: ListsResourcesAsync Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/members | Twitter Developers createUserListMember public void createUserListMember(long listId, long userId) Description copied from interface: ListsResourcesAsync Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Specified by: createUserListMember in interface ListsResourcesAsync Parameters: listId - The id of the list. userId - The id of the user to add as a member of the list. See Also: POST lists/members/create | Twitter Developers createUserListMember public void createUserListMember(long ownerId, java.lang.String slug, long userId) Description copied from interface: ListsResourcesAsync Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Specified by: createUserListMember in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user to add as a member of the list. See Also: POST lists/members/create | Twitter Developers destroyUserList public void destroyUserList(long listId) Description copied from interface: ListsResourcesAsync Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Specified by: destroyUserList in interface ListsResourcesAsync Parameters: listId - The id of the list to delete See Also: POST lists/destroy | Twitter Developers destroyUserList public void destroyUserList(long ownerId, java.lang.String slug) Description copied from interface: ListsResourcesAsync Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Specified by: destroyUserList in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list See Also: POST lists/destroy | Twitter Developers updateUserList public void updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Description copied from interface: ListsResourcesAsync Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Specified by: updateUserList in interface ListsResourcesAsync Parameters: listId - The id of the list to update. newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. See Also: POST lists/update | Twitter Developers updateUserList public void updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Description copied from interface: ListsResourcesAsync Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Specified by: updateUserList in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. See Also: POST lists/update | Twitter Developers createUserList public void createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) Description copied from interface: ListsResourcesAsync Creates a new list for the authenticated user. Accounts are limited to 20 lists. This method calls https://api.twitter.com/1.1/lists/create.json Specified by: createUserList in interface ListsResourcesAsync Parameters: listName - The name of the list you are creating. Required. isPublicList - set true if you wish to make a public list description - The description of the list you are creating. Optional. See Also: POST lists/create | Twitter Developers showUserList public void showUserList(long listId) Description copied from interface: ListsResourcesAsync Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Specified by: showUserList in interface ListsResourcesAsync Parameters: listId - The id of the list to show See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers showUserList public void showUserList(long ownerId, java.lang.String slug) Description copied from interface: ListsResourcesAsync Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Specified by: showUserList in interface ListsResourcesAsync Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers getUserListSubscriptions public void getUserListSubscriptions(java.lang.String listOwnerScreenName, long cursor) Description copied from interface: ListsResourcesAsync List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Specified by: getUserListSubscriptions in interface ListsResourcesAsync Parameters: listOwnerScreenName - The screen name of the list owner cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Also: GET lists/subscriptions | Twitter Developers getSavedSearches public void getSavedSearches() Description copied from interface: SavedSearchesResourcesAsync Returns the authenticated user's saved search queries. This method calls https://api.twitter.com/1.1/saved_searches.json blocking. Specified by: getSavedSearches in interface SavedSearchesResourcesAsync See Also: GET saved_searches | Twitter Developers showSavedSearch public void showSavedSearch(int id) Description copied from interface: SavedSearchesResourcesAsync Retrieve the data for a saved search owned by the authenticating user specified by the given id. This method calls https://api.twitter.com/1.1/saved_searches/show/:id.json Specified by: showSavedSearch in interface SavedSearchesResourcesAsync Parameters: id - The id of the saved search to be retrieved. See Also: GET saved_searches/show/:id | Twitter Developers createSavedSearch public void createSavedSearch(java.lang.String query) Description copied from interface: SavedSearchesResourcesAsync Creates a saved search for the authenticated user. This method calls https://api.twitter.com/1.1/saved_searches/saved_searches/create.json Specified by: createSavedSearch in interface SavedSearchesResourcesAsync Parameters: query - the query string See Also: POST saved_searches/create | Twitter Developers destroySavedSearch public void destroySavedSearch(int id) Description copied from interface: SavedSearchesResourcesAsync Destroys a saved search for the authenticated user. The search specified by id must be owned by the authenticating user. This method calls https://api.twitter.com/1.1/saved_searches/destroy/id.json Specified by: destroySavedSearch in interface SavedSearchesResourcesAsync Parameters: id - The id of the saved search to be deleted. See Also: POST saved_searches/destroy/:id | Twitter Developers getGeoDetails public void getGeoDetails(java.lang.String id) Description copied from interface: PlacesGeoResourcesAsync Find out more details of a place that was returned from the PlacesGeoResourcesAsync.reverseGeoCode(twitter4j.GeoQuery) method. This method calls https://api.twitter.com/1.1/geo/id/:id.json Specified by: getGeoDetails in interface PlacesGeoResourcesAsync Parameters: id - The ID of the location to query about. See Also: GET geo/id/:place_id | Twitter Developers reverseGeoCode public void reverseGeoCode(GeoQuery query) Description copied from interface: PlacesGeoResourcesAsync Search for places (cities and neighborhoods) that can be attached to a statuses/update. Given a latitude and a longitude, return a list of all the valid places that can be used as a place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location up with a call to statuses/update. There are multiple granularities of places that can be returned -- "neighborhoods", "cities", etc. At this time, only United States data is available through this method. This API call is meant to be an informative call and will deliver generalized results about geography. This method calls https://api.twitter.com/1.1/geo/reverse_geocode.json Specified by: reverseGeoCode in interface PlacesGeoResourcesAsync Parameters: query - search query See Also: GET geo/reverse_geocode | Twitter Developers searchPlaces public void searchPlaces(GeoQuery query) Description copied from interface: PlacesGeoResourcesAsync Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to statuses/update. This is the recommended method to use find places that can be attached to statuses/update. Unlike geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user. This method calls https://api.twitter.com/1.1/geo/search.json Specified by: searchPlaces in interface PlacesGeoResourcesAsync Parameters: query - search query See Also: GET geo/search | Twitter Developers getSimilarPlaces public void getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) Description copied from interface: PlacesGeoResourcesAsync Locates places near the given coordinates which are similar in name. Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to post/geo/place to create a new one. The token contained in the response is the token needed to be able to create a new place. This method calls https://api.twitter.com/1.1/geo/similar_places.json Specified by: getSimilarPlaces in interface PlacesGeoResourcesAsync Parameters: location - The latitude and longitude to search around. name - The name a place is known as. containedWithin - optional: the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. streetAddress - optional: This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes. getPlaceTrends public void getPlaceTrends(int woeid) Description copied from interface: TrendsResourcesAsync Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage. This method calls https://api.twitter.com/1.1/trends/place.json Specified by: getPlaceTrends in interface TrendsResourcesAsync Parameters: woeid - The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. See Also: GET trends/place | Twitter Developers getAvailableTrends public void getAvailableTrends() Description copied from interface: TrendsResourcesAsync Retrieves the locations that Twitter has trending topic information for. The response is an array of "locations" that encode the location's WOEID (a Yahoo! Where On Earth ID) and some other human-readable information such as a canonical name and country the location belongs in. This method calls https://api.twitter.com/1.1/trends/available.json Specified by: getAvailableTrends in interface TrendsResourcesAsync See Also: GET trends/available | Twitter Developers getClosestTrends public void getClosestTrends(GeoLocation location) Description copied from interface: TrendsResourcesAsync Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. This method calls https://api.twitter.com/1.1/trends/closest.json Specified by: getClosestTrends in interface TrendsResourcesAsync Parameters: location - the available trend locations will be sorted by distance to the lat and long passed in. The sort is nearest to furthest. See Also: GET trends/closest | Twitter Developers reportSpam public void reportSpam(long userId) Description copied from interface: SpamReportingResourceAsync The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Specified by: reportSpam in interface SpamReportingResourceAsync Parameters: userId - The ID of the user you want to report as a spammer. See Also: POST report_spam | Twitter Developers reportSpam public void reportSpam(java.lang.String screenName) Description copied from interface: SpamReportingResourceAsync The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Specified by: reportSpam in interface SpamReportingResourceAsync Parameters: screenName - The screen name of the user you want to report as a spammer. See Also: POST report_spam | Twitter Developers getAPIConfiguration public void getAPIConfiguration() Description copied from interface: HelpResourcesAsync Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. Specified by: getAPIConfiguration in interface HelpResourcesAsync See Also: GET help/configuration | Twitter Developers getLanguages public void getLanguages() Description copied from interface: HelpResourcesAsync Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests. Specified by: getLanguages in interface HelpResourcesAsync See Also: GET help/languages | Twitter Developers getPrivacyPolicy public void getPrivacyPolicy() Description copied from interface: HelpResourcesAsync Returns Twitter's Privacy Policy. This method calls https://api.twitter.com/1.1/help/privacy.json Specified by: getPrivacyPolicy in interface HelpResourcesAsync See Also: GET help/privacy | Twitter Developers getTermsOfService public void getTermsOfService() Description copied from interface: HelpResourcesAsync Returns Twitter's' Terms of Service. This method calls https://api.twitter.com/1.1/help/tos.json Specified by: getTermsOfService in interface HelpResourcesAsync See Also: GET help/tos | Twitter Developers getRateLimitStatus public void getRateLimitStatus() Description copied from interface: HelpResourcesAsync Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Specified by: getRateLimitStatus in interface HelpResourcesAsync See Also: GET application/rate_limit_status getRateLimitStatus public void getRateLimitStatus(java.lang.String... resources) Description copied from interface: HelpResourcesAsync Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. As of Nov 4th 2012, supported resource names are as follows: "trends","application","users","saved_searches","geo","direct_messages","blocks","favorites","statuses","followers","help","friends","search","friendships","account","lists" This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Specified by: getRateLimitStatus in interface HelpResourcesAsync Parameters: resources - resources See Also: GET application/rate_limit_status getOAuthRequestTokenAsync public void getOAuthRequestTokenAsync() Description copied from interface: AsyncOAuthSupport Retrieves a request token Specified by: getOAuthRequestTokenAsync in interface AsyncOAuthSupport See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestTokenAsync public void getOAuthRequestTokenAsync(java.lang.String callbackURL) Description copied from interface: AsyncOAuthSupport Retrieves a request token Specified by: getOAuthRequestTokenAsync in interface AsyncOAuthSupport Parameters: callbackURL - callback URL See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestTokenAsync public void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType) Description copied from interface: AsyncOAuthSupport Retrieves a request token Specified by: getOAuthRequestTokenAsync in interface AsyncOAuthSupport Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestTokenAsync public void getOAuthRequestTokenAsync(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) Description copied from interface: AsyncOAuthSupport Retrieves a request token Specified by: getOAuthRequestTokenAsync in interface AsyncOAuthSupport Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. xAuthMode - Set to reverse_auth to obtain a special request token to be used in the reverse auth process. See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthAccessTokenAsync public void getOAuthAccessTokenAsync() Description copied from interface: AsyncOAuthSupport Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. Specified by: getOAuthAccessTokenAsync in interface AsyncOAuthSupport See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync public void getOAuthAccessTokenAsync(java.lang.String oauthVerifier) Description copied from interface: AsyncOAuthSupport Retrieves an access token. Specified by: getOAuthAccessTokenAsync in interface AsyncOAuthSupport Parameters: oauthVerifier - OAuth verifier. AKA pin. See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync public void getOAuthAccessTokenAsync(RequestToken requestToken) Description copied from interface: AsyncOAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessTokenAsync in interface AsyncOAuthSupport Parameters: requestToken - the request token See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync public void getOAuthAccessTokenAsync(RequestToken requestToken, java.lang.String oauthVerifier) Description copied from interface: AsyncOAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessTokenAsync in interface AsyncOAuthSupport Parameters: requestToken - the request token oauthVerifier - OAuth verifier. AKA pin. See Also: OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessTokenAsync public void getOAuthAccessTokenAsync(java.lang.String screenName, java.lang.String password) Description copied from interface: AsyncOAuthSupport Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Specified by: getOAuthAccessTokenAsync in interface AsyncOAuthSupport Parameters: screenName - the screen name password - the password See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, xAuth | Twitter Developers, POST oauth/access_token | Twitter Developers shutdown public void shutdown() Description copied from interface: AsyncTwitter Shuts down internal dispatcher thread shared across all AsyncTwitter instances. Specified by: shutdown in interface AsyncTwitter getDispatcher private Dispatcher getDispatcher() setOAuthConsumer public void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) Description copied from interface: OAuthSupport sets the OAuth consumer key and consumer secret Specified by: setOAuthConsumer in interface OAuth2Support Specified by: setOAuthConsumer in interface OAuthSupport Overrides: setOAuthConsumer in class TwitterBaseImpl Parameters: consumerKey - OAuth consumer key consumerSecret - OAuth consumer secret getOAuthRequestToken public RequestToken getOAuthRequestToken() throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Overrides: getOAuthRequestToken in class TwitterBaseImpl Returns: generated request token. Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken public RequestToken getOAuthRequestToken(java.lang.String callbackUrl) throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Overrides: getOAuthRequestToken in class TwitterBaseImpl Parameters: callbackUrl - callback URL Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken() throws TwitterException Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. Basic authenticated instance of this class will try acquiring an AccessToken using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Basic authenticated instance of this class will try acquiring an AccessToken using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Overrides: getOAuthAccessToken in class TwitterBaseImpl Returns: access token Throws: TwitterException - When Twitter service or network is unavailable, when the user has not authorized, or when the client application is not permitted to use xAuth See Also: xAuth | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Overrides: getOAuthAccessToken in class TwitterBaseImpl Parameters: oauthVerifier - OAuth verifier. AKA pin. Returns: access token Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(RequestToken requestToken) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessToken in interface OAuthSupport Overrides: getOAuthAccessToken in class TwitterBaseImpl Parameters: requestToken - the request token Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessToken in interface OAuthSupport Overrides: getOAuthAccessToken in class TwitterBaseImpl Parameters: requestToken - the request token oauthVerifier - OAuth verifier. AKA pin. Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers setOAuthAccessToken public void setOAuthAccessToken(AccessToken accessToken) Description copied from interface: OAuthSupport Sets the access token Specified by: setOAuthAccessToken in interface OAuthSupport Overrides: setOAuthAccessToken in class TwitterBaseImpl Parameters: accessToken - accessToken getOAuthAccessToken public AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Overrides: getOAuthAccessToken in class TwitterBaseImpl Parameters: screenName - the screen name password - the password Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, xAuth | Twitter Developers, POST oauth/access_token | Twitter Developers getOAuth2Token public OAuth2Token getOAuth2Token() throws TwitterException Description copied from interface: OAuth2Support Obtains an OAuth 2 Bearer token. Specified by: getOAuth2Token in interface OAuth2Support Overrides: getOAuth2Token in class TwitterBaseImpl Returns: OAuth 2 Bearer token Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. See Also: POST oauth2/token | Twitter Developers setOAuth2Token public void setOAuth2Token(OAuth2Token oauth2Token) Description copied from interface: OAuth2Support Sets the OAuth 2 Bearer token. Specified by: setOAuth2Token in interface OAuth2Support Overrides: setOAuth2Token in class TwitterBaseImpl Parameters: oauth2Token - OAuth 2 Bearer token getOAuth2TokenAsync public void getOAuth2TokenAsync() Description copied from interface: AsyncOAuth2Support Obtains an OAuth 2 Bearer token. Specified by: getOAuth2TokenAsync in interface AsyncOAuth2Support See Also: POST oauth2/token | Twitter Developers invalidateOAuth2Token public void invalidateOAuth2Token() throws TwitterException Description copied from interface: OAuth2Support Revokes an issued OAuth 2 Bearer Token. Specified by: invalidateOAuth2Token in interface OAuth2Support Overrides: invalidateOAuth2Token in class TwitterBaseImpl Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. equals public boolean equals(java.lang.Object o) Overrides: equals in class TwitterBaseImpl hashCode public int hashCode() Overrides: hashCode in class TwitterBaseImpl toString public java.lang.String toString() Overrides: toString in class TwitterBaseImpl Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Authorization <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Authorization"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Interface Authorization All Superinterfaces: java.io.Serializable All Known Implementing Classes: BasicAuthorization, NullAuthorization, OAuth2Authorization, OAuthAuthorization public interface Authorization extends java.io.Serializable An interface represents credentials. Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getAuthorizationHeader(HttpRequest req)  boolean isEnabled() Returns true if authorization credentials are set. Method Detail getAuthorizationHeader java.lang.String getAuthorizationHeader(HttpRequest req) isEnabled boolean isEnabled() Returns true if authorization credentials are set. Returns: true if authorization credentials are set Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AuthorizationConfiguration <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AuthorizationConfiguration"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Interface AuthorizationConfiguration All Known Subinterfaces: Configuration All Known Implementing Classes: ConfigurationBase, PropertyConfiguration public interface AuthorizationConfiguration A static factory class for Authorization. Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getOAuth2AccessToken()  java.lang.String getOAuth2TokenType()  java.lang.String getOAuthAccessToken()  java.lang.String getOAuthAccessTokenSecret()  java.lang.String getOAuthConsumerKey()  java.lang.String getOAuthConsumerSecret()  java.lang.String getPassword()  java.lang.String getUser()  Method Detail getUser java.lang.String getUser() getPassword java.lang.String getPassword() getOAuthConsumerKey java.lang.String getOAuthConsumerKey() getOAuthConsumerSecret java.lang.String getOAuthConsumerSecret() getOAuthAccessToken java.lang.String getOAuthAccessToken() getOAuthAccessTokenSecret java.lang.String getOAuthAccessTokenSecret() getOAuth2TokenType java.lang.String getOAuth2TokenType() getOAuth2AccessToken java.lang.String getOAuth2AccessToken() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method AuthorizationFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="AuthorizationFactory"; } } catch(err) { } //--> var methods = {"i0":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class AuthorizationFactory java.lang.Object twitter4j.auth.AuthorizationFactory public final class AuthorizationFactory extends java.lang.Object A static factory class for Authorization. Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com Constructor Summary Constructors  Constructor and Description AuthorizationFactory()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static Authorization getInstance(Configuration conf)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail AuthorizationFactory public AuthorizationFactory() Method Detail getInstance public static Authorization getInstance(Configuration conf) Parameters: conf - configuration Returns: authorization instance Since: Twitter4J 2.1.11 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method BasicAuthorization <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="BasicAuthorization"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class BasicAuthorization java.lang.Object twitter4j.auth.BasicAuthorization All Implemented Interfaces: java.io.Serializable, Authorization public class BasicAuthorization extends java.lang.Object implements Authorization, java.io.Serializable An authentication implementation implements Basic authentication Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private java.lang.String basic  private java.lang.String password  private static long serialVersionUID  private java.lang.String userId  Constructor Summary Constructors  Constructor and Description BasicAuthorization(java.lang.String userId, java.lang.String password)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description private java.lang.String encodeBasicAuthenticationString()  boolean equals(java.lang.Object o)  java.lang.String getAuthorizationHeader(HttpRequest req)  java.lang.String getPassword()  java.lang.String getUserId()  int hashCode()  boolean isEnabled() #{inheritDoc} java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values userId private final java.lang.String userId password private final java.lang.String password basic private final java.lang.String basic Constructor Detail BasicAuthorization public BasicAuthorization(java.lang.String userId, java.lang.String password) Method Detail getUserId public java.lang.String getUserId() getPassword public java.lang.String getPassword() encodeBasicAuthenticationString private java.lang.String encodeBasicAuthenticationString() getAuthorizationHeader public java.lang.String getAuthorizationHeader(HttpRequest req) Specified by: getAuthorizationHeader in interface Authorization isEnabled public boolean isEnabled() #{inheritDoc} Specified by: isEnabled in interface Authorization Returns: true if authorization credentials are set equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Category <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Category"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Category public interface Category Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getName()  int getSize()  java.lang.String getSlug()  Method Detail getName java.lang.String getName() getSlug java.lang.String getSlug() getSize int getSize() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method CharacterUtil <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="CharacterUtil"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.util Class CharacterUtil java.lang.Object twitter4j.util.CharacterUtil public final class CharacterUtil extends java.lang.Object Since: Twitter4J 2.1.2 Author: Yusuke Yamamoto - yusuke at mac.com Constructor Summary Constructors  Modifier Constructor and Description private CharacterUtil()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static int count(java.lang.String text) Counts the length of the tweet static boolean isExceedingLengthLimitation(java.lang.String text) Returns true if the length of the string is exceeding length limitation Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail CharacterUtil private CharacterUtil() Method Detail count public static int count(java.lang.String text) Counts the length of the tweet Parameters: text - tweet to be counted Returns: the length of the tweet isExceedingLengthLimitation public static boolean isExceedingLengthLimitation(java.lang.String text) Returns true if the length of the string is exceeding length limitation Parameters: text - String to be examined Returns: if the length of the string is exceeding length limitation Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Configuration <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Configuration"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6,"i35":6,"i36":6,"i37":6,"i38":6,"i39":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.conf Interface Configuration All Superinterfaces: AuthorizationConfiguration, java.io.Serializable All Known Implementing Classes: ConfigurationBase, PropertyConfiguration public interface Configuration extends AuthorizationConfiguration, java.io.Serializable Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getAsyncNumThreads()  long getContributingTo()  java.lang.String getDispatcherImpl()  HttpClientConfiguration getHttpClientConfiguration()  int getHttpStreamingReadTimeout()  java.lang.String getLoggerFactory()  java.lang.String getMediaProvider()  java.lang.String getMediaProviderAPIKey()  java.util.Properties getMediaProviderParameters()  java.lang.String getOAuth2AccessToken()  java.lang.String getOAuth2InvalidateTokenURL()  java.lang.String getOAuth2Scope()  java.lang.String getOAuth2TokenType()  java.lang.String getOAuth2TokenURL()  java.lang.String getOAuthAccessToken()  java.lang.String getOAuthAccessTokenSecret()  java.lang.String getOAuthAccessTokenURL()  java.lang.String getOAuthAuthenticationURL()  java.lang.String getOAuthAuthorizationURL()  java.lang.String getOAuthConsumerKey()  java.lang.String getOAuthConsumerSecret()  java.lang.String getOAuthRequestTokenURL()  java.lang.String getPassword()  java.lang.String getRestBaseURL()  java.lang.String getSiteStreamBaseURL()  java.lang.String getStreamBaseURL()  java.lang.String getUploadBaseURL()  java.lang.String getUser()  java.lang.String getUserStreamBaseURL()  boolean isApplicationOnlyAuthEnabled()  boolean isDaemonEnabled()  boolean isDebugEnabled()  boolean isIncludeEntitiesEnabled()  boolean isIncludeMyRetweetEnabled()  boolean isJSONStoreEnabled()  boolean isMBeanEnabled()  boolean isStallWarningsEnabled()  boolean isTrimUserEnabled()  boolean isUserStreamRepliesAllEnabled()  boolean isUserStreamWithFollowingsEnabled()  Method Detail isDebugEnabled boolean isDebugEnabled() isApplicationOnlyAuthEnabled boolean isApplicationOnlyAuthEnabled() getUser java.lang.String getUser() Specified by: getUser in interface AuthorizationConfiguration getPassword java.lang.String getPassword() Specified by: getPassword in interface AuthorizationConfiguration getHttpClientConfiguration HttpClientConfiguration getHttpClientConfiguration() getHttpStreamingReadTimeout int getHttpStreamingReadTimeout() getOAuthConsumerKey java.lang.String getOAuthConsumerKey() Specified by: getOAuthConsumerKey in interface AuthorizationConfiguration getOAuthConsumerSecret java.lang.String getOAuthConsumerSecret() Specified by: getOAuthConsumerSecret in interface AuthorizationConfiguration getOAuthAccessToken java.lang.String getOAuthAccessToken() Specified by: getOAuthAccessToken in interface AuthorizationConfiguration getOAuthAccessTokenSecret java.lang.String getOAuthAccessTokenSecret() Specified by: getOAuthAccessTokenSecret in interface AuthorizationConfiguration getOAuth2TokenType java.lang.String getOAuth2TokenType() Specified by: getOAuth2TokenType in interface AuthorizationConfiguration getOAuth2AccessToken java.lang.String getOAuth2AccessToken() Specified by: getOAuth2AccessToken in interface AuthorizationConfiguration getOAuth2Scope java.lang.String getOAuth2Scope() getRestBaseURL java.lang.String getRestBaseURL() getUploadBaseURL java.lang.String getUploadBaseURL() getStreamBaseURL java.lang.String getStreamBaseURL() getOAuthRequestTokenURL java.lang.String getOAuthRequestTokenURL() getOAuthAuthorizationURL java.lang.String getOAuthAuthorizationURL() getOAuthAccessTokenURL java.lang.String getOAuthAccessTokenURL() getOAuthAuthenticationURL java.lang.String getOAuthAuthenticationURL() getOAuth2TokenURL java.lang.String getOAuth2TokenURL() getOAuth2InvalidateTokenURL java.lang.String getOAuth2InvalidateTokenURL() getUserStreamBaseURL java.lang.String getUserStreamBaseURL() getSiteStreamBaseURL java.lang.String getSiteStreamBaseURL() isIncludeMyRetweetEnabled boolean isIncludeMyRetweetEnabled() isJSONStoreEnabled boolean isJSONStoreEnabled() isMBeanEnabled boolean isMBeanEnabled() isUserStreamRepliesAllEnabled boolean isUserStreamRepliesAllEnabled() isUserStreamWithFollowingsEnabled boolean isUserStreamWithFollowingsEnabled() isStallWarningsEnabled boolean isStallWarningsEnabled() getMediaProvider java.lang.String getMediaProvider() getMediaProviderAPIKey java.lang.String getMediaProviderAPIKey() getMediaProviderParameters java.util.Properties getMediaProviderParameters() getAsyncNumThreads int getAsyncNumThreads() getContributingTo long getContributingTo() getDispatcherImpl java.lang.String getDispatcherImpl() getLoggerFactory java.lang.String getLoggerFactory() isIncludeEntitiesEnabled boolean isIncludeEntitiesEnabled() isTrimUserEnabled boolean isTrimUserEnabled() isDaemonEnabled boolean isDaemonEnabled() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ConfigurationBase <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ConfigurationBase"; } } catch(err) { } //--> var methods = {"i0":10,"i1":9,"i2":10,"i3":10,"i4":9,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":9,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.conf Class ConfigurationBase java.lang.Object twitter4j.conf.ConfigurationBase All Implemented Interfaces: java.io.Serializable, AuthorizationConfiguration, Configuration Direct Known Subclasses: PropertyConfiguration class ConfigurationBase extends java.lang.Object implements Configuration, java.io.Serializable Configuration base class with default settings. Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested Classes  Modifier and Type Class and Description (package private) class  ConfigurationBase.MyHttpClientConfiguration  Field Summary Fields  Modifier and Type Field and Description private boolean applicationOnlyAuthEnabled  private int asyncNumThreads  private long contributingTo  private boolean daemonEnabled  private boolean debug  private java.lang.String dispatcherImpl  private HttpClientConfiguration httpConf  private int httpRetryCount  private int httpRetryIntervalSeconds  private int httpStreamingReadTimeout  private boolean includeEntitiesEnabled  private boolean includeMyRetweetEnabled  private static java.util.List<ConfigurationBase> instances  private boolean jsonStoreEnabled  private java.lang.String loggerFactory  private boolean mbeanEnabled  private java.lang.String mediaProvider  private java.lang.String mediaProviderAPIKey  private java.util.Properties mediaProviderParameters  private java.lang.String oAuth2AccessToken  private java.lang.String oAuth2InvalidateTokenURL  private java.lang.String oAuth2Scope  private java.lang.String oAuth2TokenType  private java.lang.String oAuth2TokenURL  private java.lang.String oAuthAccessToken  private java.lang.String oAuthAccessTokenSecret  private java.lang.String oAuthAccessTokenURL  private java.lang.String oAuthAuthenticationURL  private java.lang.String oAuthAuthorizationURL  private java.lang.String oAuthConsumerKey  private java.lang.String oAuthConsumerSecret  private java.lang.String oAuthRequestTokenURL  private java.lang.String password  private java.lang.String restBaseURL  private static long serialVersionUID  private java.lang.String siteStreamBaseURL  private boolean stallWarningsEnabled  private java.lang.String streamBaseURL  private boolean trimUserEnabled  private java.lang.String uploadBaseURL  private java.lang.String user  private java.lang.String userStreamBaseURL  private boolean userStreamRepliesAllEnabled  private boolean userStreamWithFollowingsEnabled  Constructor Summary Constructors  Modifier Constructor and Description protected ConfigurationBase()  Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description protected void cacheInstance()  private static void cacheInstance(ConfigurationBase conf)  void dumpConfiguration()  boolean equals(java.lang.Object o)  (package private) static java.lang.String fixURL(boolean useSSL, java.lang.String url)  int getAsyncNumThreads()  long getContributingTo()  java.lang.String getDispatcherImpl()  HttpClientConfiguration getHttpClientConfiguration()  int getHttpStreamingReadTimeout()  private static ConfigurationBase getInstance(ConfigurationBase configurationBase)  java.lang.String getLoggerFactory()  java.lang.String getMediaProvider()  java.lang.String getMediaProviderAPIKey()  java.util.Properties getMediaProviderParameters()  java.lang.String getOAuth2AccessToken()  java.lang.String getOAuth2InvalidateTokenURL()  java.lang.String getOAuth2Scope()  java.lang.String getOAuth2TokenType()  java.lang.String getOAuth2TokenURL()  java.lang.String getOAuthAccessToken()  java.lang.String getOAuthAccessTokenSecret()  java.lang.String getOAuthAccessTokenURL()  java.lang.String getOAuthAuthenticationURL()  java.lang.String getOAuthAuthorizationURL()  java.lang.String getOAuthConsumerKey()  java.lang.String getOAuthConsumerSecret()  java.lang.String getOAuthRequestTokenURL()  java.lang.String getPassword()  java.lang.String getRestBaseURL()  java.lang.String getSiteStreamBaseURL()  java.lang.String getStreamBaseURL()  java.lang.String getUploadBaseURL()  java.lang.String getUser()  java.lang.String getUserStreamBaseURL()  int hashCode()  boolean isApplicationOnlyAuthEnabled()  boolean isDaemonEnabled()  boolean isDebugEnabled()  boolean isIncludeEntitiesEnabled()  boolean isIncludeMyRetweetEnabled()  boolean isJSONStoreEnabled()  boolean isMBeanEnabled()  boolean isStallWarningsEnabled()  boolean isTrimUserEnabled()  boolean isUserStreamRepliesAllEnabled()  boolean isUserStreamWithFollowingsEnabled()  protected java.lang.Object readResolve()  protected void setApplicationOnlyAuthEnabled(boolean applicationOnlyAuthEnabled)  protected void setAsyncNumThreads(int asyncNumThreads)  protected void setContributingTo(long contributingTo)  protected void setDaemonEnabled(boolean daemonEnabled)  protected void setDebug(boolean debug)  protected void setDispatcherImpl(java.lang.String dispatcherImpl)  protected void setGZIPEnabled(boolean gzipEnabled)  protected void setHttpConnectionTimeout(int connectionTimeout)  protected void setHttpProxyHost(java.lang.String proxyHost)  protected void setHttpProxyPassword(java.lang.String proxyPassword)  protected void setHttpProxyPort(int proxyPort)  protected void setHttpProxyUser(java.lang.String proxyUser)  protected void setHttpReadTimeout(int readTimeout)  protected void setHttpRetryCount(int retryCount)  protected void setHttpRetryIntervalSeconds(int retryIntervalSeconds)  protected void setHttpStreamingReadTimeout(int httpStreamingReadTimeout)  protected void setIncludeEntitiesEnabled(boolean includeEntitiesEnabled)  void setIncludeMyRetweetEnabled(boolean enabled)  protected void setJSONStoreEnabled(boolean enabled)  protected void setLoggerFactory(java.lang.String loggerImpl)  protected void setMBeanEnabled(boolean enabled)  protected void setMediaProvider(java.lang.String mediaProvider)  protected void setMediaProviderAPIKey(java.lang.String mediaProviderAPIKey)  protected void setMediaProviderParameters(java.util.Properties props)  protected void setOAuth2AccessToken(java.lang.String oAuth2AccessToken)  protected void setOAuth2InvalidateTokenURL(java.lang.String oAuth2InvalidateTokenURL)  protected void setOAuth2Scope(java.lang.String oAuth2Scope)  protected void setOAuth2TokenType(java.lang.String oAuth2TokenType)  protected void setOAuth2TokenURL(java.lang.String oAuth2TokenURL)  protected void setOAuthAccessToken(java.lang.String oAuthAccessToken)  protected void setOAuthAccessTokenSecret(java.lang.String oAuthAccessTokenSecret)  protected void setOAuthAccessTokenURL(java.lang.String oAuthAccessTokenURL)  protected void setOAuthAuthenticationURL(java.lang.String oAuthAuthenticationURL)  protected void setOAuthAuthorizationURL(java.lang.String oAuthAuthorizationURL)  protected void setOAuthConsumerKey(java.lang.String oAuthConsumerKey)  protected void setOAuthConsumerSecret(java.lang.String oAuthConsumerSecret)  protected void setOAuthRequestTokenURL(java.lang.String oAuthRequestTokenURL)  protected void setPassword(java.lang.String password)  protected void setPrettyDebugEnabled(boolean prettyDebug)  protected void setRestBaseURL(java.lang.String restBaseURL)  protected void setSiteStreamBaseURL(java.lang.String siteStreamBaseURL)  protected void setStallWarningsEnabled(boolean stallWarningsEnabled)  protected void setStreamBaseURL(java.lang.String streamBaseURL)  void setTrimUserEnabled(boolean enabled)  protected void setUploadBaseURL(java.lang.String uploadBaseURL)  protected void setUser(java.lang.String user)  protected void setUserStreamBaseURL(java.lang.String siteStreamBaseURL)  protected void setUserStreamRepliesAllEnabled(boolean enabled)  protected void setUserStreamWithFollowingsEnabled(boolean enabled)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values debug private boolean debug user private java.lang.String user password private java.lang.String password httpConf private HttpClientConfiguration httpConf httpStreamingReadTimeout private int httpStreamingReadTimeout httpRetryCount private int httpRetryCount httpRetryIntervalSeconds private int httpRetryIntervalSeconds oAuthConsumerKey private java.lang.String oAuthConsumerKey oAuthConsumerSecret private java.lang.String oAuthConsumerSecret oAuthAccessToken private java.lang.String oAuthAccessToken oAuthAccessTokenSecret private java.lang.String oAuthAccessTokenSecret oAuth2TokenType private java.lang.String oAuth2TokenType oAuth2AccessToken private java.lang.String oAuth2AccessToken oAuth2Scope private java.lang.String oAuth2Scope oAuthRequestTokenURL private java.lang.String oAuthRequestTokenURL oAuthAuthorizationURL private java.lang.String oAuthAuthorizationURL oAuthAccessTokenURL private java.lang.String oAuthAccessTokenURL oAuthAuthenticationURL private java.lang.String oAuthAuthenticationURL oAuth2TokenURL private java.lang.String oAuth2TokenURL oAuth2InvalidateTokenURL private java.lang.String oAuth2InvalidateTokenURL restBaseURL private java.lang.String restBaseURL streamBaseURL private java.lang.String streamBaseURL userStreamBaseURL private java.lang.String userStreamBaseURL siteStreamBaseURL private java.lang.String siteStreamBaseURL uploadBaseURL private java.lang.String uploadBaseURL dispatcherImpl private java.lang.String dispatcherImpl asyncNumThreads private int asyncNumThreads loggerFactory private java.lang.String loggerFactory contributingTo private long contributingTo includeMyRetweetEnabled private boolean includeMyRetweetEnabled includeEntitiesEnabled private boolean includeEntitiesEnabled trimUserEnabled private boolean trimUserEnabled jsonStoreEnabled private boolean jsonStoreEnabled mbeanEnabled private boolean mbeanEnabled userStreamRepliesAllEnabled private boolean userStreamRepliesAllEnabled userStreamWithFollowingsEnabled private boolean userStreamWithFollowingsEnabled stallWarningsEnabled private boolean stallWarningsEnabled applicationOnlyAuthEnabled private boolean applicationOnlyAuthEnabled mediaProvider private java.lang.String mediaProvider mediaProviderAPIKey private java.lang.String mediaProviderAPIKey mediaProviderParameters private java.util.Properties mediaProviderParameters daemonEnabled private boolean daemonEnabled instances private static final java.util.List<ConfigurationBase> instances Constructor Detail ConfigurationBase protected ConfigurationBase() Method Detail dumpConfiguration public void dumpConfiguration() isDebugEnabled public final boolean isDebugEnabled() Specified by: isDebugEnabled in interface Configuration setDebug protected final void setDebug(boolean debug) getUser public final java.lang.String getUser() Specified by: getUser in interface AuthorizationConfiguration Specified by: getUser in interface Configuration setUser protected final void setUser(java.lang.String user) getPassword public final java.lang.String getPassword() Specified by: getPassword in interface AuthorizationConfiguration Specified by: getPassword in interface Configuration getHttpClientConfiguration public HttpClientConfiguration getHttpClientConfiguration() Specified by: getHttpClientConfiguration in interface Configuration setPassword protected final void setPassword(java.lang.String password) setPrettyDebugEnabled protected final void setPrettyDebugEnabled(boolean prettyDebug) setGZIPEnabled protected final void setGZIPEnabled(boolean gzipEnabled) setHttpProxyHost protected final void setHttpProxyHost(java.lang.String proxyHost) setHttpProxyUser protected final void setHttpProxyUser(java.lang.String proxyUser) setHttpProxyPassword protected final void setHttpProxyPassword(java.lang.String proxyPassword) setHttpProxyPort protected final void setHttpProxyPort(int proxyPort) setHttpConnectionTimeout protected final void setHttpConnectionTimeout(int connectionTimeout) setHttpReadTimeout protected final void setHttpReadTimeout(int readTimeout) getHttpStreamingReadTimeout public int getHttpStreamingReadTimeout() Specified by: getHttpStreamingReadTimeout in interface Configuration setHttpStreamingReadTimeout protected final void setHttpStreamingReadTimeout(int httpStreamingReadTimeout) setHttpRetryCount protected final void setHttpRetryCount(int retryCount) setHttpRetryIntervalSeconds protected final void setHttpRetryIntervalSeconds(int retryIntervalSeconds) getOAuthConsumerKey public final java.lang.String getOAuthConsumerKey() Specified by: getOAuthConsumerKey in interface AuthorizationConfiguration Specified by: getOAuthConsumerKey in interface Configuration setOAuthConsumerKey protected final void setOAuthConsumerKey(java.lang.String oAuthConsumerKey) getOAuthConsumerSecret public final java.lang.String getOAuthConsumerSecret() Specified by: getOAuthConsumerSecret in interface AuthorizationConfiguration Specified by: getOAuthConsumerSecret in interface Configuration setOAuthConsumerSecret protected final void setOAuthConsumerSecret(java.lang.String oAuthConsumerSecret) getOAuthAccessToken public java.lang.String getOAuthAccessToken() Specified by: getOAuthAccessToken in interface AuthorizationConfiguration Specified by: getOAuthAccessToken in interface Configuration setOAuthAccessToken protected final void setOAuthAccessToken(java.lang.String oAuthAccessToken) getOAuthAccessTokenSecret public java.lang.String getOAuthAccessTokenSecret() Specified by: getOAuthAccessTokenSecret in interface AuthorizationConfiguration Specified by: getOAuthAccessTokenSecret in interface Configuration setOAuthAccessTokenSecret protected final void setOAuthAccessTokenSecret(java.lang.String oAuthAccessTokenSecret) getOAuth2TokenType public java.lang.String getOAuth2TokenType() Specified by: getOAuth2TokenType in interface AuthorizationConfiguration Specified by: getOAuth2TokenType in interface Configuration setOAuth2TokenType protected final void setOAuth2TokenType(java.lang.String oAuth2TokenType) getOAuth2AccessToken public java.lang.String getOAuth2AccessToken() Specified by: getOAuth2AccessToken in interface AuthorizationConfiguration Specified by: getOAuth2AccessToken in interface Configuration getOAuth2Scope public java.lang.String getOAuth2Scope() Specified by: getOAuth2Scope in interface Configuration setOAuth2AccessToken protected final void setOAuth2AccessToken(java.lang.String oAuth2AccessToken) setOAuth2Scope protected final void setOAuth2Scope(java.lang.String oAuth2Scope) getAsyncNumThreads public final int getAsyncNumThreads() Specified by: getAsyncNumThreads in interface Configuration setAsyncNumThreads protected final void setAsyncNumThreads(int asyncNumThreads) getContributingTo public final long getContributingTo() Specified by: getContributingTo in interface Configuration setContributingTo protected final void setContributingTo(long contributingTo) getRestBaseURL public java.lang.String getRestBaseURL() Specified by: getRestBaseURL in interface Configuration setRestBaseURL protected final void setRestBaseURL(java.lang.String restBaseURL) getUploadBaseURL public java.lang.String getUploadBaseURL() Specified by: getUploadBaseURL in interface Configuration setUploadBaseURL protected final void setUploadBaseURL(java.lang.String uploadBaseURL) getStreamBaseURL public java.lang.String getStreamBaseURL() Specified by: getStreamBaseURL in interface Configuration setStreamBaseURL protected final void setStreamBaseURL(java.lang.String streamBaseURL) getUserStreamBaseURL public java.lang.String getUserStreamBaseURL() Specified by: getUserStreamBaseURL in interface Configuration setUserStreamBaseURL protected final void setUserStreamBaseURL(java.lang.String siteStreamBaseURL) getSiteStreamBaseURL public java.lang.String getSiteStreamBaseURL() Specified by: getSiteStreamBaseURL in interface Configuration setSiteStreamBaseURL protected final void setSiteStreamBaseURL(java.lang.String siteStreamBaseURL) getOAuthRequestTokenURL public java.lang.String getOAuthRequestTokenURL() Specified by: getOAuthRequestTokenURL in interface Configuration setOAuthRequestTokenURL protected final void setOAuthRequestTokenURL(java.lang.String oAuthRequestTokenURL) getOAuthAuthorizationURL public java.lang.String getOAuthAuthorizationURL() Specified by: getOAuthAuthorizationURL in interface Configuration setOAuthAuthorizationURL protected final void setOAuthAuthorizationURL(java.lang.String oAuthAuthorizationURL) getOAuthAccessTokenURL public java.lang.String getOAuthAccessTokenURL() Specified by: getOAuthAccessTokenURL in interface Configuration setOAuthAccessTokenURL protected final void setOAuthAccessTokenURL(java.lang.String oAuthAccessTokenURL) getOAuthAuthenticationURL public java.lang.String getOAuthAuthenticationURL() Specified by: getOAuthAuthenticationURL in interface Configuration setOAuthAuthenticationURL protected final void setOAuthAuthenticationURL(java.lang.String oAuthAuthenticationURL) getOAuth2TokenURL public java.lang.String getOAuth2TokenURL() Specified by: getOAuth2TokenURL in interface Configuration setOAuth2TokenURL protected final void setOAuth2TokenURL(java.lang.String oAuth2TokenURL) getOAuth2InvalidateTokenURL public java.lang.String getOAuth2InvalidateTokenURL() Specified by: getOAuth2InvalidateTokenURL in interface Configuration setOAuth2InvalidateTokenURL protected final void setOAuth2InvalidateTokenURL(java.lang.String oAuth2InvalidateTokenURL) getDispatcherImpl public java.lang.String getDispatcherImpl() Specified by: getDispatcherImpl in interface Configuration setDispatcherImpl protected final void setDispatcherImpl(java.lang.String dispatcherImpl) getLoggerFactory public java.lang.String getLoggerFactory() Specified by: getLoggerFactory in interface Configuration isIncludeEntitiesEnabled public boolean isIncludeEntitiesEnabled() Specified by: isIncludeEntitiesEnabled in interface Configuration setIncludeEntitiesEnabled protected void setIncludeEntitiesEnabled(boolean includeEntitiesEnabled) setLoggerFactory protected final void setLoggerFactory(java.lang.String loggerImpl) isIncludeMyRetweetEnabled public boolean isIncludeMyRetweetEnabled() Specified by: isIncludeMyRetweetEnabled in interface Configuration setIncludeMyRetweetEnabled public void setIncludeMyRetweetEnabled(boolean enabled) isTrimUserEnabled public boolean isTrimUserEnabled() Specified by: isTrimUserEnabled in interface Configuration isDaemonEnabled public boolean isDaemonEnabled() Specified by: isDaemonEnabled in interface Configuration setDaemonEnabled protected void setDaemonEnabled(boolean daemonEnabled) setTrimUserEnabled public void setTrimUserEnabled(boolean enabled) isJSONStoreEnabled public boolean isJSONStoreEnabled() Specified by: isJSONStoreEnabled in interface Configuration setJSONStoreEnabled protected final void setJSONStoreEnabled(boolean enabled) isMBeanEnabled public boolean isMBeanEnabled() Specified by: isMBeanEnabled in interface Configuration setMBeanEnabled protected final void setMBeanEnabled(boolean enabled) isUserStreamRepliesAllEnabled public boolean isUserStreamRepliesAllEnabled() Specified by: isUserStreamRepliesAllEnabled in interface Configuration isUserStreamWithFollowingsEnabled public boolean isUserStreamWithFollowingsEnabled() Specified by: isUserStreamWithFollowingsEnabled in interface Configuration setUserStreamRepliesAllEnabled protected final void setUserStreamRepliesAllEnabled(boolean enabled) setUserStreamWithFollowingsEnabled protected final void setUserStreamWithFollowingsEnabled(boolean enabled) isStallWarningsEnabled public boolean isStallWarningsEnabled() Specified by: isStallWarningsEnabled in interface Configuration setStallWarningsEnabled protected final void setStallWarningsEnabled(boolean stallWarningsEnabled) isApplicationOnlyAuthEnabled public boolean isApplicationOnlyAuthEnabled() Specified by: isApplicationOnlyAuthEnabled in interface Configuration setApplicationOnlyAuthEnabled protected final void setApplicationOnlyAuthEnabled(boolean applicationOnlyAuthEnabled) getMediaProvider public java.lang.String getMediaProvider() Specified by: getMediaProvider in interface Configuration setMediaProvider protected final void setMediaProvider(java.lang.String mediaProvider) getMediaProviderAPIKey public java.lang.String getMediaProviderAPIKey() Specified by: getMediaProviderAPIKey in interface Configuration setMediaProviderAPIKey protected final void setMediaProviderAPIKey(java.lang.String mediaProviderAPIKey) getMediaProviderParameters public java.util.Properties getMediaProviderParameters() Specified by: getMediaProviderParameters in interface Configuration setMediaProviderParameters protected final void setMediaProviderParameters(java.util.Properties props) fixURL static java.lang.String fixURL(boolean useSSL, java.lang.String url) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object cacheInstance private static void cacheInstance(ConfigurationBase conf) cacheInstance protected void cacheInstance() getInstance private static ConfigurationBase getInstance(ConfigurationBase configurationBase) readResolve protected java.lang.Object readResolve() throws java.io.ObjectStreamException Throws: java.io.ObjectStreamException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ConfigurationBuilder <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ConfigurationBuilder"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.conf Class ConfigurationBuilder java.lang.Object twitter4j.conf.ConfigurationBuilder public final class ConfigurationBuilder extends java.lang.Object A builder that can be used to construct a twitter4j configuration with desired settings. This builder has sensible defaults such that new ConfigurationBuilder().build() would create a usable configuration. This configuration builder is useful for clients that wish to configure twitter4j in unit tests or from command line flags for example. Author: John Sirois - john.sirois at gmail.com Field Summary Fields  Modifier and Type Field and Description private ConfigurationBase configurationBean  Constructor Summary Constructors  Constructor and Description ConfigurationBuilder()  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description Configuration build()  private void checkNotBuilt()  ConfigurationBuilder setApplicationOnlyAuthEnabled(boolean applicationOnlyAuthEnabled)  ConfigurationBuilder setAsyncNumThreads(int asyncNumThreads)  ConfigurationBuilder setContributingTo(long contributingTo)  ConfigurationBuilder setDaemonEnabled(boolean daemonEnabled)  ConfigurationBuilder setDebugEnabled(boolean debugEnabled)  ConfigurationBuilder setDispatcherImpl(java.lang.String dispatcherImpl)  ConfigurationBuilder setGZIPEnabled(boolean gzipEnabled)  ConfigurationBuilder setHttpConnectionTimeout(int httpConnectionTimeout)  ConfigurationBuilder setHttpProxyHost(java.lang.String httpProxyHost)  ConfigurationBuilder setHttpProxyPassword(java.lang.String httpProxyPassword)  ConfigurationBuilder setHttpProxyPort(int httpProxyPort)  ConfigurationBuilder setHttpProxyUser(java.lang.String httpProxyUser)  ConfigurationBuilder setHttpReadTimeout(int httpReadTimeout)  ConfigurationBuilder setHttpRetryCount(int httpRetryCount)  ConfigurationBuilder setHttpRetryIntervalSeconds(int httpRetryIntervalSeconds)  ConfigurationBuilder setHttpStreamingReadTimeout(int httpStreamingReadTimeout)  ConfigurationBuilder setIncludeEntitiesEnabled(boolean enabled)  ConfigurationBuilder setIncludeMyRetweetEnabled(boolean enabled)  ConfigurationBuilder setJSONStoreEnabled(boolean enabled)  ConfigurationBuilder setMBeanEnabled(boolean enabled)  ConfigurationBuilder setMediaProvider(java.lang.String mediaProvider)  ConfigurationBuilder setMediaProviderAPIKey(java.lang.String mediaProviderAPIKey)  ConfigurationBuilder setMediaProviderParameters(java.util.Properties props)  ConfigurationBuilder setOAuth2AccessToken(java.lang.String oAuth2AccessToken)  ConfigurationBuilder setOAuth2InvalidateTokenURL(java.lang.String invalidateTokenURL)  ConfigurationBuilder setOAuth2Scope(java.lang.String oAuth2Scope)  ConfigurationBuilder setOAuth2TokenType(java.lang.String oAuth2TokenType)  ConfigurationBuilder setOAuth2TokenURL(java.lang.String oAuth2TokenURL)  ConfigurationBuilder setOAuthAccessToken(java.lang.String oAuthAccessToken)  ConfigurationBuilder setOAuthAccessTokenSecret(java.lang.String oAuthAccessTokenSecret)  ConfigurationBuilder setOAuthAccessTokenURL(java.lang.String oAuthAccessTokenURL)  ConfigurationBuilder setOAuthAuthenticationURL(java.lang.String oAuthAuthenticationURL)  ConfigurationBuilder setOAuthAuthorizationURL(java.lang.String oAuthAuthorizationURL)  ConfigurationBuilder setOAuthConsumerKey(java.lang.String oAuthConsumerKey)  ConfigurationBuilder setOAuthConsumerSecret(java.lang.String oAuthConsumerSecret)  ConfigurationBuilder setOAuthRequestTokenURL(java.lang.String oAuthRequestTokenURL)  ConfigurationBuilder setPassword(java.lang.String password)  ConfigurationBuilder setPrettyDebugEnabled(boolean prettyDebugEnabled)  ConfigurationBuilder setRestBaseURL(java.lang.String restBaseURL)  ConfigurationBuilder setSiteStreamBaseURL(java.lang.String siteStreamBaseURL)  ConfigurationBuilder setStreamBaseURL(java.lang.String streamBaseURL)  ConfigurationBuilder setTrimUserEnabled(boolean enabled)  ConfigurationBuilder setUser(java.lang.String user)  ConfigurationBuilder setUserStreamBaseURL(java.lang.String userStreamBaseURL)  ConfigurationBuilder setUserStreamRepliesAllEnabled(boolean enabled)  ConfigurationBuilder setUserStreamWithFollowingsEnabled(boolean enabled)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail configurationBean private ConfigurationBase configurationBean Constructor Detail ConfigurationBuilder public ConfigurationBuilder() Method Detail setPrettyDebugEnabled public ConfigurationBuilder setPrettyDebugEnabled(boolean prettyDebugEnabled) setGZIPEnabled public ConfigurationBuilder setGZIPEnabled(boolean gzipEnabled) setDebugEnabled public ConfigurationBuilder setDebugEnabled(boolean debugEnabled) setApplicationOnlyAuthEnabled public ConfigurationBuilder setApplicationOnlyAuthEnabled(boolean applicationOnlyAuthEnabled) setUser public ConfigurationBuilder setUser(java.lang.String user) setPassword public ConfigurationBuilder setPassword(java.lang.String password) setHttpProxyHost public ConfigurationBuilder setHttpProxyHost(java.lang.String httpProxyHost) setHttpProxyUser public ConfigurationBuilder setHttpProxyUser(java.lang.String httpProxyUser) setHttpProxyPassword public ConfigurationBuilder setHttpProxyPassword(java.lang.String httpProxyPassword) setHttpProxyPort public ConfigurationBuilder setHttpProxyPort(int httpProxyPort) setHttpConnectionTimeout public ConfigurationBuilder setHttpConnectionTimeout(int httpConnectionTimeout) setHttpReadTimeout public ConfigurationBuilder setHttpReadTimeout(int httpReadTimeout) setHttpStreamingReadTimeout public ConfigurationBuilder setHttpStreamingReadTimeout(int httpStreamingReadTimeout) setHttpRetryCount public ConfigurationBuilder setHttpRetryCount(int httpRetryCount) setHttpRetryIntervalSeconds public ConfigurationBuilder setHttpRetryIntervalSeconds(int httpRetryIntervalSeconds) setOAuthConsumerKey public ConfigurationBuilder setOAuthConsumerKey(java.lang.String oAuthConsumerKey) setOAuthConsumerSecret public ConfigurationBuilder setOAuthConsumerSecret(java.lang.String oAuthConsumerSecret) setOAuthAccessToken public ConfigurationBuilder setOAuthAccessToken(java.lang.String oAuthAccessToken) setOAuthAccessTokenSecret public ConfigurationBuilder setOAuthAccessTokenSecret(java.lang.String oAuthAccessTokenSecret) setOAuth2TokenType public ConfigurationBuilder setOAuth2TokenType(java.lang.String oAuth2TokenType) setOAuth2AccessToken public ConfigurationBuilder setOAuth2AccessToken(java.lang.String oAuth2AccessToken) setOAuth2Scope public ConfigurationBuilder setOAuth2Scope(java.lang.String oAuth2Scope) setOAuthRequestTokenURL public ConfigurationBuilder setOAuthRequestTokenURL(java.lang.String oAuthRequestTokenURL) setOAuthAuthorizationURL public ConfigurationBuilder setOAuthAuthorizationURL(java.lang.String oAuthAuthorizationURL) setOAuthAccessTokenURL public ConfigurationBuilder setOAuthAccessTokenURL(java.lang.String oAuthAccessTokenURL) setOAuthAuthenticationURL public ConfigurationBuilder setOAuthAuthenticationURL(java.lang.String oAuthAuthenticationURL) setOAuth2TokenURL public ConfigurationBuilder setOAuth2TokenURL(java.lang.String oAuth2TokenURL) setOAuth2InvalidateTokenURL public ConfigurationBuilder setOAuth2InvalidateTokenURL(java.lang.String invalidateTokenURL) setRestBaseURL public ConfigurationBuilder setRestBaseURL(java.lang.String restBaseURL) setStreamBaseURL public ConfigurationBuilder setStreamBaseURL(java.lang.String streamBaseURL) setUserStreamBaseURL public ConfigurationBuilder setUserStreamBaseURL(java.lang.String userStreamBaseURL) setSiteStreamBaseURL public ConfigurationBuilder setSiteStreamBaseURL(java.lang.String siteStreamBaseURL) setAsyncNumThreads public ConfigurationBuilder setAsyncNumThreads(int asyncNumThreads) setDaemonEnabled public ConfigurationBuilder setDaemonEnabled(boolean daemonEnabled) setContributingTo public ConfigurationBuilder setContributingTo(long contributingTo) setDispatcherImpl public ConfigurationBuilder setDispatcherImpl(java.lang.String dispatcherImpl) setTrimUserEnabled public ConfigurationBuilder setTrimUserEnabled(boolean enabled) setIncludeMyRetweetEnabled public ConfigurationBuilder setIncludeMyRetweetEnabled(boolean enabled) setIncludeEntitiesEnabled public ConfigurationBuilder setIncludeEntitiesEnabled(boolean enabled) setJSONStoreEnabled public ConfigurationBuilder setJSONStoreEnabled(boolean enabled) setMBeanEnabled public ConfigurationBuilder setMBeanEnabled(boolean enabled) setUserStreamRepliesAllEnabled public ConfigurationBuilder setUserStreamRepliesAllEnabled(boolean enabled) setUserStreamWithFollowingsEnabled public ConfigurationBuilder setUserStreamWithFollowingsEnabled(boolean enabled) setMediaProvider public ConfigurationBuilder setMediaProvider(java.lang.String mediaProvider) setMediaProviderAPIKey public ConfigurationBuilder setMediaProviderAPIKey(java.lang.String mediaProviderAPIKey) setMediaProviderParameters public ConfigurationBuilder setMediaProviderParameters(java.util.Properties props) build public Configuration build() checkNotBuilt private void checkNotBuilt() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ConfigurationContext <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ConfigurationContext"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.conf Class ConfigurationContext java.lang.Object twitter4j.conf.ConfigurationContext public final class ConfigurationContext extends java.lang.Object Static factory of Configuration. This class wraps ConfigurationFactory implementations. By default, twitter4j.conf.PropertyConfigurationFactory will be used and can be changed with -Dtwitter4j.configurationFactory system property. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private static java.lang.String CONFIGURATION_IMPL  private static java.lang.String DEFAULT_CONFIGURATION_FACTORY  private static ConfigurationFactory factory  Constructor Summary Constructors  Constructor and Description ConfigurationContext()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static Configuration getInstance()  static Configuration getInstance(java.lang.String configTreePath)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail DEFAULT_CONFIGURATION_FACTORY private static final java.lang.String DEFAULT_CONFIGURATION_FACTORY See Also: Constant Field Values CONFIGURATION_IMPL private static final java.lang.String CONFIGURATION_IMPL See Also: Constant Field Values factory private static final ConfigurationFactory factory Constructor Detail ConfigurationContext public ConfigurationContext() Method Detail getInstance public static Configuration getInstance() getInstance public static Configuration getInstance(java.lang.String configTreePath) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ConfigurationFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ConfigurationFactory"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.conf Interface ConfigurationFactory All Known Implementing Classes: PropertyConfigurationFactory public interface ConfigurationFactory Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void dispose() clean up resources acquired by this factory. Configuration getInstance() returns the root configuration Configuration getInstance(java.lang.String configTreePath) returns the configuration specified by the path Method Detail getInstance Configuration getInstance() returns the root configuration Returns: root configuration getInstance Configuration getInstance(java.lang.String configTreePath) returns the configuration specified by the path Parameters: configTreePath - the path Returns: the configuratoin dispose void dispose() clean up resources acquired by this factory. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ConnectionLifeCycleListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ConnectionLifeCycleListener"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface ConnectionLifeCycleListener public interface ConnectionLifeCycleListener Since: Twitter4J 2.1.7 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void onCleanUp() called before thread gets cleaned up void onConnect() called after connection was established void onDisconnect() called after connection was disconnected Method Detail onConnect void onConnect() called after connection was established onDisconnect void onDisconnect() called after connection was disconnected onCleanUp void onCleanUp() called before thread gets cleaned up Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Consumer <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Consumer"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.util.function Interface Consumer<T> public interface Consumer<T> Functional interface for handling TwitterExceptions Since: Twitter4J 4.0.4 Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void accept(T t)  Method Detail accept void accept(T t) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ControlStreamInfo <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ControlStreamInfo"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class ControlStreamInfo java.lang.Object twitter4j.ControlStreamInfo All Implemented Interfaces: java.io.Serializable public final class ControlStreamInfo extends java.lang.Object implements java.io.Serializable Since: Twitter4J 2.2.6 Author: Yusuke Yamamoto - yusuke at twitter.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private boolean includeFollowingsActivity  private boolean includeUserChanges  private java.lang.String replies  private static long serialVersionUID  private StreamController.User[] users  private java.lang.String with  Constructor Summary Constructors  Constructor and Description ControlStreamInfo(StreamController controller, JSONObject json)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  StreamController.User[] getUsers()  int hashCode()  boolean isIncludeFollowingsActivity()  boolean isIncludeUserChanges()  java.lang.String isReplies()  java.lang.String isWith()  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values users private final StreamController.User[] users includeFollowingsActivity private final boolean includeFollowingsActivity includeUserChanges private final boolean includeUserChanges replies private final java.lang.String replies with private final java.lang.String with Constructor Detail ControlStreamInfo ControlStreamInfo(StreamController controller, JSONObject json) throws TwitterException Throws: TwitterException Method Detail getUsers public StreamController.User[] getUsers() isIncludeFollowingsActivity public boolean isIncludeFollowingsActivity() isIncludeUserChanges public boolean isIncludeUserChanges() isReplies public java.lang.String isReplies() isWith public java.lang.String isWith() equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method CursorSupport <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="CursorSupport"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface CursorSupport All Known Subinterfaces: IDs, PagableResponseList<T> All Known Implementing Classes: StreamController.FriendsIDs public interface CursorSupport Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description static long START  Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description long getNextCursor()  long getPreviousCursor()  boolean hasNext()  boolean hasPrevious()  Field Detail START static final long START Since: Twitter4J 2.2.3 See Also: Constant Field Values Method Detail hasPrevious boolean hasPrevious() Returns: has previous page Since: Twitter4J 2.0.10 getPreviousCursor long getPreviousCursor() Returns: previous cursor Since: Twitter4J 2.0.10 hasNext boolean hasNext() Returns: has next Since: Twitter4J 2.0.10 getNextCursor long getNextCursor() Returns: next cursor Since: Twitter4J 2.0.10 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method DataObjectFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="DataObjectFactory"; } } catch(err) { } //--> var methods = {"i0":41,"i1":41,"i2":41,"i3":41,"i4":41,"i5":41,"i6":41,"i7":41,"i8":41,"i9":41,"i10":41,"i11":41,"i12":41,"i13":41,"i14":41,"i15":41,"i16":41}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"],32:["t6","Deprecated Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.json Class DataObjectFactory java.lang.Object twitter4j.json.DataObjectFactory Deprecated.  use TwitterObjectFactory instead public final class DataObjectFactory extends java.lang.Object Since: Twitter4J 2.1.7 Author: Yusuke Yamamoto - yusuke at mac.com Constructor Summary Constructors  Modifier Constructor and Description private DataObjectFactory() Deprecated.    Method Summary All Methods Static Methods Concrete Methods Deprecated Methods  Modifier and Type Method and Description static AccountTotals createAccountTotals(java.lang.String rawJSON) Deprecated.  Constructs an AccountTotals object from rawJSON string. static Category createCategory(java.lang.String rawJSON) Deprecated.  Constructs a Category object from rawJSON string. static DirectMessage createDirectMessage(java.lang.String rawJSON) Deprecated.  Constructs a DirectMessage object from rawJSON string. static IDs createIDs(java.lang.String rawJSON) Deprecated.  Constructs a IDs object from rawJSON string. static Location createLocation(java.lang.String rawJSON) Deprecated.  Constructs a Location object from rawJSON string. static java.lang.Object createObject(java.lang.String rawJSON) Deprecated.  use TwitterObjectFactory.createObject(String) instead static OEmbed createOEmbed(java.lang.String rawJSON) Deprecated.  Constructs an OEmbed object from rawJSON string. static Place createPlace(java.lang.String rawJSON) Deprecated.  Constructs a Place object from rawJSON string. static java.util.Map<java.lang.String,RateLimitStatus> createRateLimitStatus(java.lang.String rawJSON) Deprecated.  Constructs a RateLimitStatus object from rawJSON string. static Relationship createRelationship(java.lang.String rawJSON) Deprecated.  Constructs a Relationship object from rawJSON string. static SavedSearch createSavedSearch(java.lang.String rawJSON) Deprecated.  Constructs a SavedSearch object from rawJSON string. static Status createStatus(java.lang.String rawJSON) Deprecated.  Constructs a Status object from rawJSON string. static Trend createTrend(java.lang.String rawJSON) Deprecated.  Constructs a Trend object from rawJSON string. static Trends createTrends(java.lang.String rawJSON) Deprecated.  Constructs a Trends object from rawJSON string. static User createUser(java.lang.String rawJSON) Deprecated.  Constructs a User object from rawJSON string. static UserList createUserList(java.lang.String rawJSON) Deprecated.  Constructs a UserList object from rawJSON string. static java.lang.String getRawJSON(java.lang.Object obj) Deprecated.  Returns a raw JSON form of the provided object. Note that raw JSON forms can be retrieved only from the same thread invoked the last method call and will become inaccessible once another method call Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail DataObjectFactory private DataObjectFactory() Deprecated.  Method Detail getRawJSON public static java.lang.String getRawJSON(java.lang.Object obj) Deprecated.  Returns a raw JSON form of the provided object. Note that raw JSON forms can be retrieved only from the same thread invoked the last method call and will become inaccessible once another method call Parameters: obj - target object to retrieve JSON Returns: raw JSON Since: Twitter4J 2.1.7 createStatus public static Status createStatus(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a Status object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Status Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createUser public static User createUser(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a User object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: User Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createAccountTotals public static AccountTotals createAccountTotals(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs an AccountTotals object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: AccountTotals Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.9 createRelationship public static Relationship createRelationship(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a Relationship object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Relationship Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createPlace public static Place createPlace(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a Place object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Place Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createSavedSearch public static SavedSearch createSavedSearch(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a SavedSearch object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: SavedSearch Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createTrend public static Trend createTrend(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a Trend object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Trend Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createTrends public static Trends createTrends(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a Trends object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Trends Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createIDs public static IDs createIDs(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a IDs object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: IDs Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createRateLimitStatus public static java.util.Map<java.lang.String,RateLimitStatus> createRateLimitStatus(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a RateLimitStatus object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: RateLimitStatus Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createCategory public static Category createCategory(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a Category object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Category Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createDirectMessage public static DirectMessage createDirectMessage(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a DirectMessage object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: DirectMessage Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createLocation public static Location createLocation(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a Location object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Location Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createUserList public static UserList createUserList(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs a UserList object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: UserList Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createOEmbed public static OEmbed createOEmbed(java.lang.String rawJSON) throws TwitterException Deprecated.  Constructs an OEmbed object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: OEmbed Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 3.0.2 createObject public static java.lang.Object createObject(java.lang.String rawJSON) throws TwitterException Deprecated. use TwitterObjectFactory.createObject(String) instead Construct an object from rawJSON string. This method may be called when you do not know what a given raw JSON string contains. It will do the work of determining what type of object the JSON represents, and constructing the respective object type. For example, if the JSON contents represents a Status, then a Status will be returned. If it represents a deletion notice, then a StatusDeletionNotice will be returned. The caller can simply use instanceof to handle the returned object as applicable. NOTE: the raw JSONObject will be returned in cases where there isn't a discrete respective object type that can be constructed. That way, the caller can at least have access to the JSON itself. Parameters: rawJSON - raw JSON form as String Returns: the respective constructed object, or the JSONObject in the case where we cannot determine the object type. Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.9 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method DirectMessage <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="DirectMessage"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface DirectMessage All Superinterfaces: EntitySupport, java.io.Serializable, TwitterResponse public interface DirectMessage extends TwitterResponse, EntitySupport, java.io.Serializable A data interface representing sent/received direct message. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.util.Date getCreatedAt()  long getId()  User getRecipient()  long getRecipientId()  java.lang.String getRecipientScreenName()  User getSender()  long getSenderId()  java.lang.String getSenderScreenName()  java.lang.String getText()  Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Methods inherited from interface twitter4j.EntitySupport getExtendedMediaEntities, getHashtagEntities, getMediaEntities, getSymbolEntities, getURLEntities, getUserMentionEntities Method Detail getId long getId() getText java.lang.String getText() getSenderId long getSenderId() getRecipientId long getRecipientId() getCreatedAt java.util.Date getCreatedAt() Returns: created_at Since: Twitter4J 1.1.0 getSenderScreenName java.lang.String getSenderScreenName() getRecipientScreenName java.lang.String getRecipientScreenName() getSender User getSender() getRecipient User getRecipient() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method DirectMessagesResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="DirectMessagesResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface DirectMessagesResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface DirectMessagesResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description DirectMessage destroyDirectMessage(long id) Destroys the direct message specified in the required ID parameter. ResponseList<DirectMessage> getDirectMessages() Returns a list of the direct messages sent to the authenticating user. ResponseList<DirectMessage> getDirectMessages(Paging paging) Returns a list of the direct messages sent to the authenticating user. java.io.InputStream getDMImageAsStream(java.lang.String url) Returns a stream of the image included in direct messages. ResponseList<DirectMessage> getSentDirectMessages() Returns a list of the direct messages sent by the authenticating user. ResponseList<DirectMessage> getSentDirectMessages(Paging paging) Returns a list of the direct messages sent by the authenticating user. DirectMessage sendDirectMessage(long userId, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. DirectMessage sendDirectMessage(java.lang.String screenName, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. DirectMessage showDirectMessage(long id) Returns a single direct message, specified by an id parameter. Method Detail getDirectMessages ResponseList<DirectMessage> getDirectMessages() throws TwitterException Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages Returns: List Throws: TwitterException - when Twitter service or network is unavailable See Also: GET direct_messages | Twitter Developers getDirectMessages ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: List Throws: TwitterException - when Twitter service or network is unavailable See Also: GET direct_messages | Twitter Developers getSentDirectMessages ResponseList<DirectMessage> getSentDirectMessages() throws TwitterException Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent Returns: List Throws: TwitterException - when Twitter service or network is unavailable See Also: GET direct_messages/sent | Twitter Developers getSentDirectMessages ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws TwitterException Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: List Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: GET direct_messages/sent | Twitter Developers showDirectMessage DirectMessage showDirectMessage(long id) throws TwitterException Returns a single direct message, specified by an id parameter. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/direct_messages/show/:id.json Parameters: id - message id Returns: DirectMessage Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group destroyDirectMessage DirectMessage destroyDirectMessage(long id) throws TwitterException Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message. This method calls https://api.twitter.com/1.1/direct_messages/destroy Parameters: id - the ID of the direct message to destroy Returns: the deleted direct message Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: POST direct_messages/destroy/:id | Twitter Developers sendDirectMessage DirectMessage sendDirectMessage(long userId, java.lang.String text) throws TwitterException Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimmed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Parameters: userId - the screen name of the user to whom send the direct message text - The text of your direct message. Returns: DirectMessage Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4j 2.1.0 See Also: POST direct_messages/new | Twitter Developers sendDirectMessage DirectMessage sendDirectMessage(java.lang.String screenName, java.lang.String text) throws TwitterException Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimmed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Parameters: screenName - the screen name of the user to whom send the direct message text - The text of your direct message. Returns: DirectMessage Throws: TwitterException - when Twitter service or network is unavailable See Also: POST direct_messages/new | Twitter Developers getDMImageAsStream java.io.InputStream getDMImageAsStream(java.lang.String url) throws TwitterException Returns a stream of the image included in direct messages. Parameters: url - image url Returns: InputStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.6 See Also: Access media shared in direct messages | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method DirectMessagesResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="DirectMessagesResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface DirectMessagesResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface DirectMessagesResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void destroyDirectMessage(long id) Destroys the direct message specified in the required ID parameter. void getDirectMessages() Returns a list of the direct messages sent to the authenticating user. void getDirectMessages(Paging paging) Returns a list of the direct messages sent to the authenticating user. void getSentDirectMessages() Returns a list of the direct messages sent by the authenticating user. void getSentDirectMessages(Paging paging) Returns a list of the direct messages sent by the authenticating user. void sendDirectMessage(long userId, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. void sendDirectMessage(java.lang.String screenName, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. void showDirectMessage(long id) Returns a single direct message, specified by an id parameter. Method Detail getDirectMessages void getDirectMessages() Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages See Also: GET direct_messages | Twitter Developers getDirectMessages void getDirectMessages(Paging paging) Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages Parameters: paging - controls pagination Since: Twitter4J 2.0.1 See Also: GET direct_messages | Twitter Developers getSentDirectMessages void getSentDirectMessages() Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent See Also: GET direct_messages/sent | Twitter Developers getSentDirectMessages void getSentDirectMessages(Paging paging) Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent Parameters: paging - controls pagination Since: Twitter4J 2.0.1 See Also: GET direct_messages/sent | Twitter Developers showDirectMessage void showDirectMessage(long id) Returns a single direct message, specified by an id parameter. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/direct_messages/show/:id.json Parameters: id - message id Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group destroyDirectMessage void destroyDirectMessage(long id) Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message. This method calls https://api.twitter.com/1.1/direct_messages/destroy Parameters: id - int Since: Twitter4J 2.0.1 See Also: POST direct_messages/destroy/:id | Twitter Developers sendDirectMessage void sendDirectMessage(long userId, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Parameters: userId - the screen name of the user to whom send the direct message text - The text of your direct message. Since: Twitter4j 2.1.0 See Also: POST direct_messages/new | Twitter Developers sendDirectMessage void sendDirectMessage(java.lang.String screenName, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Parameters: screenName - the screen name of the user to whom send the direct message text - The text of your direct message. See Also: POST direct_messages/new | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method EntitySupport <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="EntitySupport"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface EntitySupport All Known Subinterfaces: DirectMessage, Status public interface EntitySupport Since: Twitter4J 2.2.5 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description ExtendedMediaEntity[] getExtendedMediaEntities() Returns an array of ExtendedMediaEntities if media of extended_entities are available in the tweet. HashtagEntity[] getHashtagEntities() Returns an array if hashtag mentioned in the tweet. MediaEntity[] getMediaEntities() Returns an array of MediaEntities if medias are available in the tweet. SymbolEntity[] getSymbolEntities() Returns an array of SymbolEntities if medias are available in the tweet. URLEntity[] getURLEntities() Returns an array if URLEntity mentioned in the tweet. UserMentionEntity[] getUserMentionEntities() Returns an array of user mentions in the tweet. Method Detail getUserMentionEntities UserMentionEntity[] getUserMentionEntities() Returns an array of user mentions in the tweet. This method will an empty array if no users were mentioned in the tweet. Returns: An array of user mention entities in the tweet. Since: Twitter4J 2.1.9 getURLEntities URLEntity[] getURLEntities() Returns an array if URLEntity mentioned in the tweet. This method will an empty array if no url were mentioned in the tweet. Returns: An array of URLEntity mentioned in the tweet. Since: Twitter4J 2.1.9 getHashtagEntities HashtagEntity[] getHashtagEntities() Returns an array if hashtag mentioned in the tweet. This method will an empty array if no hashtags were mentioned in the tweet. Returns: An array of Hashtag mentioned in the tweet. Since: Twitter4J 2.1.9 getMediaEntities MediaEntity[] getMediaEntities() Returns an array of MediaEntities if medias are available in the tweet. This method will an empty array if no medias were mentioned. Returns: an array of MediaEntities. Since: Twitter4J 2.2.3 getExtendedMediaEntities ExtendedMediaEntity[] getExtendedMediaEntities() Returns an array of ExtendedMediaEntities if media of extended_entities are available in the tweet. This method will an empty array if no extended-medias were mentioned. Returns: an array of ExtendedMediaEntities. Since: Twitter4J 4.0.2 See Also: Multiple Media Entities in Statuses getSymbolEntities SymbolEntity[] getSymbolEntities() Returns an array of SymbolEntities if medias are available in the tweet. This method will an empty array if no symbols were mentioned. Returns: an array of SymbolEntities. Since: Twitter4J 3.0.4 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ExceptionDiagnosis <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ExceptionDiagnosis"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class ExceptionDiagnosis java.lang.Object twitter4j.ExceptionDiagnosis All Implemented Interfaces: java.io.Serializable final class ExceptionDiagnosis extends java.lang.Object implements java.io.Serializable Since: Twitter4J 2.1.3 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private java.lang.String hexString  private int lineNumberHash  private static long serialVersionUID  private int stackLineHash  Constructor Summary Constructors  Constructor and Description ExceptionDiagnosis(java.lang.Throwable th)  ExceptionDiagnosis(java.lang.Throwable th, java.lang.String[] inclusionFilter)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description (package private) java.lang.String asHexString()  boolean equals(java.lang.Object o)  (package private) int getLineNumberHash()  (package private) java.lang.String getLineNumberHashAsHex()  (package private) int getStackLineHash()  (package private) java.lang.String getStackLineHashAsHex()  int hashCode()  private java.lang.String toHexString(int value)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values stackLineHash private int stackLineHash lineNumberHash private int lineNumberHash hexString private java.lang.String hexString Constructor Detail ExceptionDiagnosis ExceptionDiagnosis(java.lang.Throwable th) ExceptionDiagnosis ExceptionDiagnosis(java.lang.Throwable th, java.lang.String[] inclusionFilter) Method Detail getStackLineHash int getStackLineHash() getStackLineHashAsHex java.lang.String getStackLineHashAsHex() getLineNumberHash int getLineNumberHash() getLineNumberHashAsHex java.lang.String getLineNumberHashAsHex() asHexString java.lang.String asHexString() toHexString private java.lang.String toHexString(int value) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ExtendedMediaEntity.Variant <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ExtendedMediaEntity.Variant"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface ExtendedMediaEntity.Variant All Superinterfaces: java.io.Serializable Enclosing interface: ExtendedMediaEntity public static interface ExtendedMediaEntity.Variant extends java.io.Serializable Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getBitrate()  java.lang.String getContentType()  java.lang.String getUrl()  Method Detail getBitrate int getBitrate() getContentType java.lang.String getContentType() getUrl java.lang.String getUrl() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ExtendedMediaEntity <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ExtendedMediaEntity"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface ExtendedMediaEntity All Superinterfaces: MediaEntity, java.io.Serializable, TweetEntity, URLEntity public interface ExtendedMediaEntity extends MediaEntity Since: Twitter4J 4.x.x Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested Classes  Modifier and Type Interface and Description static interface  ExtendedMediaEntity.Variant  Nested classes/interfaces inherited from interface twitter4j.MediaEntity MediaEntity.Size Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getVideoAspectRatioHeight()  int getVideoAspectRatioWidth()  long getVideoDurationMillis()  ExtendedMediaEntity.Variant[] getVideoVariants()  Methods inherited from interface twitter4j.MediaEntity getId, getMediaURL, getMediaURLHttps, getSizes, getType Methods inherited from interface twitter4j.URLEntity getDisplayURL, getEnd, getExpandedURL, getStart, getText, getURL Method Detail getVideoAspectRatioWidth int getVideoAspectRatioWidth() getVideoAspectRatioHeight int getVideoAspectRatioHeight() getVideoDurationMillis long getVideoDurationMillis() getVideoVariants ExtendedMediaEntity.Variant[] getVideoVariants() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method FavoritesResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="FavoritesResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface FavoritesResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface FavoritesResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description Status createFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. Status destroyFavorite(long id) Un-favorites the status specified in the ID parameter as the authenticating user. ResponseList<Status> getFavorites() Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(long userId) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(long userId, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(java.lang.String screenName) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(java.lang.String screenName, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. Method Detail getFavorites ResponseList<Status> getFavorites() throws TwitterException Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites.json Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: GET favorites | Twitter Developers getFavorites ResponseList<Status> getFavorites(long userId) throws TwitterException Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. Parameters: userId - the id of the user for whom to request a list of favorite statuses Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET favorites | Twitter Developers getFavorites ResponseList<Status> getFavorites(java.lang.String screenName) throws TwitterException Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: GET favorites | Twitter Developers getFavorites ResponseList<Status> getFavorites(Paging paging) throws TwitterException Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites.json Parameters: paging - controls pagination. Supports sinceId and page parameters. Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.5 See Also: GET favorites | Twitter Developers getFavorites ResponseList<Status> getFavorites(long userId, Paging paging) throws TwitterException Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Parameters: userId - the id of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET favorites | Twitter Developers getFavorites ResponseList<Status> getFavorites(java.lang.String screenName, Paging paging) throws TwitterException Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.5 See Also: GET favorites | Twitter Developers createFavorite Status createFavorite(long id) throws TwitterException Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful. This method calls https://api.twitter.com/1.1/favorites/create/[id].json Parameters: id - the ID of the status to favorite Returns: created favorite status Throws: TwitterException - when Twitter service or network is unavailable See Also: POST favorites/create/:id | Twitter Developers destroyFavorite Status destroyFavorite(long id) throws TwitterException Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful. This method calls https://api.twitter.com/1.1/favorites/destroy/[id].json Parameters: id - the ID of the status to un-favorite Returns: destroyed statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: POST favorites/destroy/:id | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method FavoritesResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="FavoritesResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface FavoritesResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface FavoritesResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void createFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. void destroyFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. void getFavorites() Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(long id) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(long userId, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(java.lang.String screenName) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. void getFavorites(java.lang.String screenName, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. Method Detail getFavorites void getFavorites() Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites Since: Twitter4J 2.0.1 See Also: GET favorites | Twitter Developers getFavorites void getFavorites(long id) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites Parameters: id - the id of the user for whom to request a list of favorite statuses Since: Twitter4J 3.0.0 See Also: GET favorites | Twitter Developers getFavorites void getFavorites(java.lang.String screenName) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses Since: Twitter4J 2.0.1 See Also: GET favorites | Twitter Developers getFavorites void getFavorites(Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites.json Parameters: paging - controls pagination. Supports sinceId and page parameters. Since: Twitter4J 2.2.5 See Also: GET favorites | Twitter Developers getFavorites void getFavorites(long userId, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Parameters: userId - the id of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. Since: Twitter4J 2.2.5 See Also: GET favorites | Twitter Developers getFavorites void getFavorites(java.lang.String screenName, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. Since: Twitter4J 2.2.5 See Also: GET favorites | Twitter Developers createFavorite void createFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful. This method calls https://api.twitter.com/1.1/favorites/create%C2%A0 Parameters: id - the ID or screen name of the user for whom to request a list of favorite statuses. Since: 1.1.2 See Also: POST favorites/create/:id | Twitter Developers destroyFavorite void destroyFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful. This method calls https://api.twitter.com/1.1/favorites/destroy Parameters: id - the ID or screen name of the user for whom to request a list of un-favorite statuses. Since: 1.1.2 See Also: POST favorites/destroy/:id | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method FilterQuery <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="FilterQuery"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class FilterQuery java.lang.Object twitter4j.FilterQuery All Implemented Interfaces: java.io.Serializable public final class FilterQuery extends java.lang.Object implements java.io.Serializable Since: Twitter4J 2.1.2 Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private int count  private java.lang.String filterLevel  private long[] follow  private java.lang.String[] language  private double[][] locations  private static long serialVersionUID  private java.lang.String[] track  Constructor Summary Constructors  Constructor and Description FilterQuery() Creates a new FilterQuery FilterQuery(int count, long... follow) Creates a new FilterQuery FilterQuery(int count, long[] follow, java.lang.String[] track) Creates a new FilterQuery FilterQuery(int count, long[] follow, java.lang.String[] track, double[][] locations) Creates a new FilterQuery FilterQuery(int count, long[] follow, java.lang.String[] track, double[][] locations, java.lang.String[] language) Creates a new FilterQuery FilterQuery(long... follow) Creates a new FilterQuery FilterQuery(java.lang.String... track) Creates a new FilterQuery Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description (package private) HttpParameter[] asHttpParameterArray(HttpParameter stallWarningsParam)  FilterQuery count(int count) Sets count boolean equals(java.lang.Object o)  FilterQuery filterLevel(java.lang.String filterLevel) The filter level limits what tweets appear in the stream to those with a minimum filter_level attribute value. FilterQuery follow(long... follow) Sets follow int hashCode()  FilterQuery language(java.lang.String... language) Sets language FilterQuery locations(double[]... locations) Sets locations private java.lang.String toLocationsString(double[][] keywords)  java.lang.String toString()  FilterQuery track(java.lang.String... track) Sets track Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values count private int count follow private long[] follow track private java.lang.String[] track locations private double[][] locations language private java.lang.String[] language filterLevel private java.lang.String filterLevel Constructor Detail FilterQuery public FilterQuery() Creates a new FilterQuery FilterQuery public FilterQuery(long... follow) Creates a new FilterQuery Parameters: follow - Specifies the users, by ID, to receive public tweets from. FilterQuery public FilterQuery(java.lang.String... track) Creates a new FilterQuery Parameters: track - Specifies keywords to track. Since: Twitter4J 4.0.4 FilterQuery public FilterQuery(int count, long... follow) Creates a new FilterQuery Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. follow - Specifies the users, by ID, to receive public tweets from. FilterQuery public FilterQuery(int count, long[] follow, java.lang.String[] track) Creates a new FilterQuery Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. follow - Specifies the users, by ID, to receive public tweets from. track - Specifies keywords to track. FilterQuery public FilterQuery(int count, long[] follow, java.lang.String[] track, double[][] locations) Creates a new FilterQuery Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. follow - Specifies the users, by ID, to receive public tweets from. track - Specifies keywords to track. locations - Specifies the locations to track. 2D array FilterQuery public FilterQuery(int count, long[] follow, java.lang.String[] track, double[][] locations, java.lang.String[] language) Creates a new FilterQuery Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. follow - Specifies the users, by ID, to receive public tweets from. track - Specifies keywords to track. locations - Specifies the locations to track. 2D array language - Specifies the tweets language of the stream Method Detail count public FilterQuery count(int count) Sets count Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. Returns: this instance follow public FilterQuery follow(long... follow) Sets follow Parameters: follow - Specifies the users, by ID, to receive public tweets from. Returns: this instance track public FilterQuery track(java.lang.String... track) Sets track Parameters: track - Specifies keywords to track. Returns: this instance locations public FilterQuery locations(double[]... locations) Sets locations Parameters: locations - Specifies the locations to track. 2D array Returns: this instance language public FilterQuery language(java.lang.String... language) Sets language Parameters: language - Specifies languages to track. Returns: this instance filterLevel public FilterQuery filterLevel(java.lang.String filterLevel) The filter level limits what tweets appear in the stream to those with a minimum filter_level attribute value. Parameters: filterLevel - one of either none, low, or medium. Returns: this instance asHttpParameterArray HttpParameter[] asHttpParameterArray(HttpParameter stallWarningsParam) toLocationsString private java.lang.String toLocationsString(double[][] keywords) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method FriendsFollowersResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="FriendsFollowersResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6,"i35":6,"i36":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface FriendsFollowersResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface FriendsFollowersResources Author: Joern Huxhorn - jhuxhorn at googlemail.com, Mocel - docel77 at gmail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description User createFriendship(long userId) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User createFriendship(long userId, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User createFriendship(java.lang.String screenName) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User createFriendship(java.lang.String screenName, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User destroyFriendship(long userId) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. User destroyFriendship(java.lang.String screenName) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. IDs getFollowersIDs(long cursor) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(long userId, long cursor, int count) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(java.lang.String screenName, long cursor, int count) Returns an array of numeric IDs for every user the specified user is followed by. PagableResponseList<User> getFollowersList(long userId, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(long userId, long cursor, int count) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. IDs getFriendsIDs(long cursor) Returns an array of numeric IDs for every user the authenticating user is following. IDs getFriendsIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is following. IDs getFriendsIDs(long userId, long cursor, int count) Returns an array of numeric IDs for every user the specified user is following. IDs getFriendsIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is following. IDs getFriendsIDs(java.lang.String screenName, long cursor, int count) Returns an array of numeric IDs for every user the specified user is following. PagableResponseList<User> getFriendsList(long userId, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(long userId, long cursor, int count) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. IDs getIncomingFriendships(long cursor) Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. IDs getNoRetweetsFriendships() Returns a collection of user IDs that the currently authenticated user does not want to receive retweets from. IDs getOutgoingFriendships(long cursor) Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. ResponseList<Friendship> lookupFriendships(long... ids) Returns the relationship of the authenticating user to the specified users. ResponseList<Friendship> lookupFriendships(java.lang.String... screenNames) Returns the relationship of the authenticating user to the specified users. Relationship showFriendship(long sourceId, long targetId) Returns detailed information about the relationship between two users. Relationship showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) Returns detailed information about the relationship between two users. Relationship updateFriendship(long userId, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. Relationship updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. Method Detail getNoRetweetsFriendships IDs getNoRetweetsFriendships() throws TwitterException Returns a collection of user IDs that the currently authenticated user does not want to receive retweets from. This method calls https://api.twitter.com/1.1/friendships/no_retweets/ids.json Returns: a collection of numeric IDs that the currently authenticated user does not want to receive retweets from. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET friendships/no_retweets/ids | Twitter Developers getFriendsIDs IDs getFriendsIDs(long cursor) throws TwitterException Returns an array of numeric IDs for every user the authenticating user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Parameters: cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: an array of numeric IDs for every user the authenticating user is following Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET friends/ids | Twitter Developers getFriendsIDs IDs getFriendsIDs(long userId, long cursor) throws TwitterException Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Parameters: userId - Specifies the ID of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET friends/ids | Twitter Developers getFriendsIDs IDs getFriendsIDs(long userId, long cursor, int count) throws TwitterException Returns an array of numeric IDs for every user the specified user is following. This method calls http://api.twitter.com/1.1/friends/ids.json Parameters: userId - Specifies the ID of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET friends/ids | Twitter Developers getFriendsIDs IDs getFriendsIDs(java.lang.String screenName, long cursor) throws TwitterException Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Parameters: screenName - Specifies the screen name of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET friends/ids | Twitter Developers getFriendsIDs IDs getFriendsIDs(java.lang.String screenName, long cursor, int count) throws TwitterException Returns an array of numeric IDs for every user the specified user is following. This method calls http://api.twitter.com/1.1/friends/ids.json Parameters: screenName - Specifies the screen name of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET friends/ids | Twitter Developers getFollowersIDs IDs getFollowersIDs(long cursor) throws TwitterException Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Parameters: cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET followers/ids | Twitter Developers getFollowersIDs IDs getFollowersIDs(long userId, long cursor) throws TwitterException Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Parameters: userId - Specifies the ID of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET followers/ids | Twitter Developers getFollowersIDs IDs getFollowersIDs(long userId, long cursor, int count) throws TwitterException Returns an array of numeric IDs for every user the specified user is followed by. This method calls http://api.twitter.com/1.1/followers/ids.json Parameters: userId - Specifies the ID of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET followers/ids | Twitter Developers getFollowersIDs IDs getFollowersIDs(java.lang.String screenName, long cursor) throws TwitterException Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Parameters: screenName - Specifies the screen name of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET followers/ids | Twitter Developers getFollowersIDs IDs getFollowersIDs(java.lang.String screenName, long cursor, int count) throws TwitterException Returns an array of numeric IDs for every user the specified user is followed by. This method calls http://api.twitter.com/1.1/followers/ids.json Parameters: screenName - Specifies the screen name of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET followers/ids | Twitter Developers lookupFriendships ResponseList<Friendship> lookupFriendships(long... ids) throws TwitterException Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Parameters: ids - array of the ids to lookup Returns: list of Relationships Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group lookupFriendships ResponseList<Friendship> lookupFriendships(java.lang.String... screenNames) throws TwitterException Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Parameters: screenNames - array of the screen names to lookup Returns: list of Relationships Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group getIncomingFriendships IDs getIncomingFriendships(long cursor) throws TwitterException Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. This method calls https://api.twitter.com/1.1/friendships/incoming.json Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. Returns: an array of numeric IDs for every user who has a pending request to follow the authenticating user. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.2 See Also: GET friendships/incoming | Twitter Developers getOutgoingFriendships IDs getOutgoingFriendships(long cursor) throws TwitterException Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. This method calls https://api.twitter.com/1.1/friendships/outgoing.json Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. Returns: an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.2 See Also: GET friendships/outgoing | Twitter Developers createFriendship User createFriendship(long userId) throws TwitterException Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Parameters: userId - the ID of the user to be befriended Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST friendships/create | Twitter Developers createFriendship User createFriendship(java.lang.String screenName) throws TwitterException Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Parameters: screenName - the screen name of the user to be befriended Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: POST friendships/create | Twitter Developers createFriendship User createFriendship(long userId, boolean follow) throws TwitterException Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Parameters: userId - the ID of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST friendships/create | Twitter Developers createFriendship User createFriendship(java.lang.String screenName, boolean follow) throws TwitterException Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Parameters: screenName - the screen name of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.2 See Also: POST friendships/create | Twitter Developers destroyFriendship User destroyFriendship(long userId) throws TwitterException Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy/[id].json Parameters: userId - the ID of the user for whom to request a list of friends Returns: User Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST friendships/destroy | Twitter Developers destroyFriendship User destroyFriendship(java.lang.String screenName) throws TwitterException Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy/[id].json Parameters: screenName - the screen name of the user for whom to request a list of friends Returns: User Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: POST friendships/destroy | Twitter Developers updateFriendship Relationship updateFriendship(long userId, boolean enableDeviceNotification, boolean retweets) throws TwitterException Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Parameters: userId - user id to update enableDeviceNotification - set true to enable device notification retweets - set true to enable retweets Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group updateFriendship Relationship updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweets) throws TwitterException Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Parameters: screenName - screen name to update enableDeviceNotification - set true to enable device notification retweets - set true to enable retweets Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group showFriendship Relationship showFriendship(long sourceId, long targetId) throws TwitterException Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Parameters: sourceId - the ID of the source user targetId - the ID of the target user Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET friendships/show | Twitter Developers showFriendship Relationship showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) throws TwitterException Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Parameters: sourceScreenName - the screen name of the source user targetScreenName - the screen name of the target user Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET friendships/show | Twitter Developers getFriendsList PagableResponseList<User> getFriendsList(long userId, long cursor) throws TwitterException Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET friends/list | Twitter Developers getFriendsList PagableResponseList<User> getFriendsList(long userId, long cursor, int count) throws TwitterException Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/list | Twitter Developers getFriendsList PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor) throws TwitterException Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET friends/list | Twitter Developers getFriendsList PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count) throws TwitterException Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET friends/list | Twitter Developers getFriendsList PagableResponseList<User> getFriendsList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET friends/list | Twitter Developers getFriendsList PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET friends/list | Twitter Developers getFollowersList PagableResponseList<User> getFollowersList(long userId, long cursor) throws TwitterException Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET followers/list | Twitter Developers getFollowersList PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor) throws TwitterException Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET followers/list | Twitter Developers getFollowersList PagableResponseList<User> getFollowersList(long userId, long cursor, int count) throws TwitterException Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.6 See Also: GET followers/list | Twitter Developers getFollowersList PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count) throws TwitterException Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.6 See Also: GET followers/list | Twitter Developers getFollowersList PagableResponseList<User> getFollowersList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET followers/list | Twitter Developers getFollowersList PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET followers/list | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method FriendsFollowersResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="FriendsFollowersResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface FriendsFollowersResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface FriendsFollowersResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void createFriendship(long userId) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void createFriendship(long userId, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void createFriendship(java.lang.String screenName) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void createFriendship(java.lang.String screenName, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. void destroyFriendship(long userId) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. void destroyFriendship(java.lang.String screenName) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. void getFollowersIDs(long cursor) Returns an array of numeric IDs for every user the specified user is followed by. void getFollowersIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. void getFollowersIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. void getFollowersList(long userId, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getFollowersList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getFriendsIDs(long cursor) Returns an array of numeric IDs for every user the authenticating user is following. void getFriendsIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is following. void getFriendsIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is following. void getFriendsList(long userId, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getFriendsList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. void getIncomingFriendships(long cursor) Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. void getOutgoingFriendships(long cursor) Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. void lookupFriendships(long... ids) Returns the relationship of the authenticating user to the specified users. void lookupFriendships(java.lang.String... screenNames) Returns the relationship of the authenticating user to the specified users. void showFriendship(long sourceId, long targetId) Returns detailed information about the relationship between two users. void showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) Returns detailed information about the relationship between two users. void updateFriendship(long userId, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. void updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. Method Detail getFriendsIDs void getFriendsIDs(long cursor) Returns an array of numeric IDs for every user the authenticating user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Parameters: cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. Since: Twitter4J 2.0.10 See Also: GET friends/ids | Twitter Developers getFriendsIDs void getFriendsIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Parameters: userId - Specifies the ID of the user for whom to return the friends list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. Since: Twitter4J 2.0.10 See Also: GET friends/ids | Twitter Developers getFriendsIDs void getFriendsIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Parameters: screenName - Specifies the screen name of the user for whom to return the friends list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. Since: Twitter4J 2.0.10 See Also: GET friends/ids | Twitter Developers getFollowersIDs void getFollowersIDs(long cursor) Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Parameters: cursor - Breaks the results into pages. A single page contains 100 users. This is recommended for users who are followed by many other users. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.0.10 See Also: GET followers/ids | Twitter Developers getFollowersIDs void getFollowersIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Parameters: userId - Specifies the ID of the user for whom to return the followers list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. Since: Twitter4J 2.0.10 See Also: GET followers/ids | Twitter Developers getFollowersIDs void getFollowersIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Parameters: screenName - Specifies the screen name of the user for whom to return the followers list. cursor - Specifies the page number of the results beginning at 1. A single page contains 5000 ids. This is recommended for users with large ID lists. If not provided all ids are returned. Since: Twitter4J 2.0.10 See Also: GET followers/ids | Twitter Developers lookupFriendships void lookupFriendships(long... ids) Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Parameters: ids - array of the ids to lookup Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group lookupFriendships void lookupFriendships(java.lang.String... screenNames) Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Parameters: screenNames - array of the screen names to lookup Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group getIncomingFriendships void getIncomingFriendships(long cursor) Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. This method calls https://api.twitter.com/1.1/friendships/incoming.json Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. Since: Twitter4J 2.1.2 See Also: GET friendships/incoming | Twitter Developers getOutgoingFriendships void getOutgoingFriendships(long cursor) Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. This method calls https://api.twitter.com/1.1/friendships/outgoing.json Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. Since: Twitter4J 2.1.2 See Also: GET friendships/outgoing | Twitter Developers createFriendship void createFriendship(long userId) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Parameters: userId - the ID of the user to be befriended Since: Twitter4J 2.1.0 See Also: POST friendships/create | Twitter Developers createFriendship void createFriendship(java.lang.String screenName) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Parameters: screenName - the screen name of the user to be befriended Since: Twitter4J 2.0.1 See Also: POST friendships/create | Twitter Developers createFriendship void createFriendship(long userId, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Parameters: userId - the ID of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. Since: Twitter4J 2.1.0 See Also: POST friendships/create | Twitter Developers createFriendship void createFriendship(java.lang.String screenName, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create Parameters: screenName - the screen name of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. Since: Twitter4J 2.0.1 See Also: POST friendships/create | Twitter Developers destroyFriendship void destroyFriendship(long userId) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy Parameters: userId - the screen name of the user to be befriended Since: Twitter4J 2.1.0 See Also: POST friendships/destroy | Twitter Developers destroyFriendship void destroyFriendship(java.lang.String screenName) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy Parameters: screenName - the screen name of the user to be befriended Since: Twitter4J 2.0.1 See Also: POST friendships/destroy | Twitter Developers updateFriendship void updateFriendship(long userId, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Parameters: userId - user id to update enableDeviceNotification - set true to enable device notification retweets - set true to enable retweets Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group updateFriendship void updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Parameters: screenName - screen name to update enableDeviceNotification - set true to enable device notification retweets - set true to enable retweets Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group showFriendship void showFriendship(long sourceId, long targetId) Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Parameters: sourceId - the ID of the source user targetId - the ID of the target user Since: Twitter4J 2.1.0 See Also: GET friendships/show | Twitter Developers showFriendship void showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Parameters: sourceScreenName - the screen name of the source user targetScreenName - the screen name of the target user Since: Twitter4J 2.1.0 See Also: GET friendships/show | Twitter Developers getFriendsList void getFriendsList(long userId, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Since: Twitter4J 3.0.2 See Also: GET friends/list | Twitter Developers getFriendsList void getFriendsList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Since: Twitter4J 3.0.2 See Also: GET friends/list | Twitter Developers getFollowersList void getFollowersList(long userId, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Since: Twitter4J 3.0.2 See Also: GET followers/list | Twitter Developers getFollowersList void getFollowersList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Since: Twitter4J 3.0.2 See Also: GET followers/list | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Friendship <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Friendship"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Friendship All Superinterfaces: java.io.Serializable public interface Friendship extends java.io.Serializable Since: Twitter4J 2.1.9 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description long getId()  java.lang.String getName()  java.lang.String getScreenName()  boolean isFollowedBy()  boolean isFollowing()  Method Detail getId long getId() getName java.lang.String getName() getScreenName java.lang.String getScreenName() isFollowing boolean isFollowing() isFollowedBy boolean isFollowedBy() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method GeoLocation <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="GeoLocation"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class GeoLocation java.lang.Object twitter4j.GeoLocation All Implemented Interfaces: java.io.Serializable public class GeoLocation extends java.lang.Object implements java.io.Serializable A data class representing geo location. Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private double latitude  private double longitude  private static long serialVersionUID  Constructor Summary Constructors  Constructor and Description GeoLocation()  GeoLocation(double latitude, double longitude) Creates a GeoLocation instance Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  double getLatitude() returns the latitude of the geo location double getLongitude() returns the longitude of the geo location int hashCode()  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values latitude private double latitude longitude private double longitude Constructor Detail GeoLocation public GeoLocation(double latitude, double longitude) Creates a GeoLocation instance Parameters: latitude - the latitude longitude - the longitude GeoLocation GeoLocation() Method Detail getLatitude public double getLatitude() returns the latitude of the geo location Returns: the latitude getLongitude public double getLongitude() returns the longitude of the geo location Returns: the longitude equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method GeoQuery <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="GeoQuery"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class GeoQuery java.lang.Object twitter4j.GeoQuery All Implemented Interfaces: java.io.Serializable public final class GeoQuery extends java.lang.Object implements java.io.Serializable Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private java.lang.String accuracy  private java.lang.String granularity  private java.lang.String ip  private GeoLocation location  private int maxResults  private java.lang.String query  private static long serialVersionUID  Constructor Summary Constructors  Constructor and Description GeoQuery(GeoLocation location) Creates a GeoQuery with the specified location GeoQuery(java.lang.String ip) Creates a GeoQuery with the specified IP address Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description GeoQuery accuracy(java.lang.String accuracy)  private void appendParameter(java.lang.String name, double value, java.util.List<HttpParameter> params)  private void appendParameter(java.lang.String name, int value, java.util.List<HttpParameter> params)  private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params)  (package private) HttpParameter[] asHttpParameterArray()  boolean equals(java.lang.Object o)  java.lang.String getAccuracy()  java.lang.String getGranularity()  java.lang.String getIp()  GeoLocation getLocation()  int getMaxResults()  java.lang.String getQuery() Gets the query to filter Place results from geo/search GeoQuery granularity(java.lang.String granularity)  int hashCode()  GeoQuery maxResults(int maxResults)  void setAccuracy(java.lang.String accuracy) Sets a hint on the "region" in which to search. void setGranularity(java.lang.String granularity) Sets the minimal granularity of data to return. void setMaxResults(int maxResults) Sets a hint as to the number of results to return. void setQuery(java.lang.String query)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values location private GeoLocation location query private java.lang.String query ip private java.lang.String ip accuracy private java.lang.String accuracy granularity private java.lang.String granularity maxResults private int maxResults Constructor Detail GeoQuery public GeoQuery(GeoLocation location) Creates a GeoQuery with the specified location Parameters: location - geo location GeoQuery public GeoQuery(java.lang.String ip) Creates a GeoQuery with the specified IP address Parameters: ip - IP address Method Detail getLocation public GeoLocation getLocation() getQuery public java.lang.String getQuery() Gets the query to filter Place results from geo/search Returns: the query setQuery public void setQuery(java.lang.String query) getIp public java.lang.String getIp() getAccuracy public java.lang.String getAccuracy() setAccuracy public void setAccuracy(java.lang.String accuracy) Sets a hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.). Parameters: accuracy - a hint on the "region" in which to search. accuracy public GeoQuery accuracy(java.lang.String accuracy) getGranularity public java.lang.String getGranularity() setGranularity public void setGranularity(java.lang.String granularity) Sets the minimal granularity of data to return. If this is not passed in, then neighborhood is assumed. city can also be passed. Parameters: granularity - the minimal granularity of data to return granularity public GeoQuery granularity(java.lang.String granularity) getMaxResults public int getMaxResults() setMaxResults public void setMaxResults(int maxResults) Sets a hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many "nearby" results to return. Ideally, only pass in the number of places you intend to display to the user here. Parameters: maxResults - A hint as to the number of results to return. maxResults public GeoQuery maxResults(int maxResults) asHttpParameterArray HttpParameter[] asHttpParameterArray() appendParameter private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params) appendParameter private void appendParameter(java.lang.String name, int value, java.util.List<HttpParameter> params) appendParameter private void appendParameter(java.lang.String name, double value, java.util.List<HttpParameter> params) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method HashtagEntity <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="HashtagEntity"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface HashtagEntity All Superinterfaces: java.io.Serializable, TweetEntity public interface HashtagEntity extends TweetEntity, java.io.Serializable A data interface representing one single Hashtag entity. Since: Twitter4J 2.1.9 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getEnd() Returns the index of the end character of the hashtag. int getStart() Returns the index of the start character of the hashtag. java.lang.String getText() Returns the text of the hashtag without #. Method Detail getText java.lang.String getText() Returns the text of the hashtag without #. Specified by: getText in interface TweetEntity Returns: the text of the hashtag getStart int getStart() Returns the index of the start character of the hashtag. Specified by: getStart in interface TweetEntity Returns: the index of the start character of the hashtag getEnd int getEnd() Returns the index of the end character of the hashtag. Specified by: getEnd in interface TweetEntity Returns: the index of the end character of the hashtag Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method HelpResources.Language <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="HelpResources.Language"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface HelpResources.Language Enclosing interface: HelpResources public static interface HelpResources.Language Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getCode()  java.lang.String getName()  java.lang.String getStatus()  Method Detail getName java.lang.String getName() getCode java.lang.String getCode() getStatus java.lang.String getStatus() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method HelpResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="HelpResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface HelpResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface HelpResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Nested Class Summary Nested Classes  Modifier and Type Interface and Description static interface  HelpResources.Language  Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description TwitterAPIConfiguration getAPIConfiguration() Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. ResponseList<HelpResources.Language> getLanguages() Returns the list of languages supported by Twitter along with their ISO 639-1 code. java.lang.String getPrivacyPolicy() Returns Twitter's Privacy Policy. java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus() Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus(java.lang.String... resources) Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. java.lang.String getTermsOfService() Returns Twitter's' Terms of Service. Method Detail getAPIConfiguration TwitterAPIConfiguration getAPIConfiguration() throws TwitterException Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. Returns: configuration Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: GET help/configuration | Twitter Developers getLanguages ResponseList<HelpResources.Language> getLanguages() throws TwitterException Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests. Returns: list of languages supported by Twitter Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: GET help/languages | Twitter Developers getPrivacyPolicy java.lang.String getPrivacyPolicy() throws TwitterException Returns Twitter's Privacy Policy. This method calls https://api.twitter.com/1.1/help/privacy.json Returns: privacy policy Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.7 See Also: GET help/privacy | Twitter Developers getTermsOfService java.lang.String getTermsOfService() throws TwitterException Returns Twitter's' Terms of Service. This method calls https://api.twitter.com/1.1/help/tos.json Returns: Terms of Service Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.7 See Also: GET help/tos | Twitter Developers getRateLimitStatus java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus() throws TwitterException Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Returns: the rate limit statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET application/rate_limit_status getRateLimitStatus java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus(java.lang.String... resources) throws TwitterException Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. As of Nov 4th 2012, supported resource names are as follows: "trends","application","users","saved_searches","geo","direct_messages","blocks","favorites","statuses","followers","help","friends","search","friendships","account","lists" This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Parameters: resources - resources Returns: the rate limit statuses Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET application/rate_limit_status Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method HelpResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="HelpResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface HelpResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface HelpResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void getAPIConfiguration() Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. void getLanguages() Returns the list of languages supported by Twitter along with their ISO 639-1 code. void getPrivacyPolicy() Returns Twitter's Privacy Policy. void getRateLimitStatus() Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. void getRateLimitStatus(java.lang.String... resources) Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. void getTermsOfService() Returns Twitter's' Terms of Service. Method Detail getAPIConfiguration void getAPIConfiguration() Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. Since: Twitter4J 2.2.3 See Also: GET help/configuration | Twitter Developers getLanguages void getLanguages() Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests. Since: Twitter4J 2.2.3 See Also: GET help/languages | Twitter Developers getPrivacyPolicy void getPrivacyPolicy() Returns Twitter's Privacy Policy. This method calls https://api.twitter.com/1.1/help/privacy.json Since: Twitter4J 2.1.7 See Also: GET help/privacy | Twitter Developers getTermsOfService void getTermsOfService() Returns Twitter's' Terms of Service. This method calls https://api.twitter.com/1.1/help/tos.json Since: Twitter4J 2.1.7 See Also: GET help/tos | Twitter Developers getRateLimitStatus void getRateLimitStatus() Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Since: Twitter4J 3.0.0 See Also: GET application/rate_limit_status getRateLimitStatus void getRateLimitStatus(java.lang.String... resources) Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. As of Nov 4th 2012, supported resource names are as follows: "trends","application","users","saved_searches","geo","direct_messages","blocks","favorites","statuses","followers","help","friends","search","friendships","account","lists" This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Parameters: resources - resources Since: Twitter4J 3.0.0 See Also: GET application/rate_limit_status Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method IDs <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="IDs"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface IDs All Superinterfaces: CursorSupport, java.io.Serializable, TwitterResponse public interface IDs extends TwitterResponse, CursorSupport, java.io.Serializable A data interface representing array of numeric IDs. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Fields inherited from interface twitter4j.CursorSupport START Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description long[] getIDs()  long getNextCursor()  long getPreviousCursor()  boolean hasNext()  boolean hasPrevious()  Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getIDs long[] getIDs() hasPrevious boolean hasPrevious() Specified by: hasPrevious in interface CursorSupport Returns: has previous page getPreviousCursor long getPreviousCursor() Specified by: getPreviousCursor in interface CursorSupport Returns: previous cursor hasNext boolean hasNext() Specified by: hasNext in interface CursorSupport Returns: has next getNextCursor long getNextCursor() Specified by: getNextCursor in interface CursorSupport Returns: next cursor Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ImageUpload <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ImageUpload"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Interface ImageUpload All Known Implementing Classes: AbstractImageUploadImpl, ImgLyUpload, MobypictureUpload, TwippleUpload, TwitterUpload, YFrogUpload public interface ImageUpload Since: Twitter4J 2.1.8 Author: Rémy Rakic - remy.rakic at gmail.com, Takao Nakaguchi - takao.nakaguchi at gmail.com, withgod - noname at withgod.jp Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String upload(java.io.File image)  java.lang.String upload(java.io.File image, java.lang.String message)  java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody)  java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody, java.lang.String message)  Method Detail upload java.lang.String upload(java.io.File image, java.lang.String message) throws TwitterException Throws: TwitterException upload java.lang.String upload(java.io.File image) throws TwitterException Throws: TwitterException upload java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody) throws TwitterException Throws: TwitterException upload java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody, java.lang.String message) throws TwitterException Throws: TwitterException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ImageUploadFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ImageUploadFactory"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Class ImageUploadFactory java.lang.Object twitter4j.media.ImageUploadFactory public class ImageUploadFactory extends java.lang.Object Since: Twitter4J 2.1.12 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private java.lang.String apiKey  private Configuration conf  private MediaProvider defaultMediaProvider  Constructor Summary Constructors  Constructor and Description ImageUploadFactory() Creates an ImageUploadFactory with default configuration ImageUploadFactory(Configuration conf) Creates an ImageUploadFactory with the specified configuration Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description ImageUpload getInstance() Returns an ImageUpload instance associated with the default media provider ImageUpload getInstance(Authorization authorization) Returns an ImageUpload instance associated with the default media provider ImageUpload getInstance(MediaProvider mediaProvider) Returns an ImageUploader instance associated with the specified media provider ImageUpload getInstance(MediaProvider mediaProvider, Authorization authorization) Returns an ImageUpload instance associated with the specified media provider Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail conf private final Configuration conf defaultMediaProvider private final MediaProvider defaultMediaProvider apiKey private final java.lang.String apiKey Constructor Detail ImageUploadFactory public ImageUploadFactory() Creates an ImageUploadFactory with default configuration ImageUploadFactory public ImageUploadFactory(Configuration conf) Creates an ImageUploadFactory with the specified configuration Parameters: conf - configuration to be associated Method Detail getInstance public ImageUpload getInstance() Returns an ImageUpload instance associated with the default media provider Returns: ImageUpload getInstance public ImageUpload getInstance(Authorization authorization) Returns an ImageUpload instance associated with the default media provider Parameters: authorization - authorization Returns: ImageUpload Since: Twitter4J 2.1.11 getInstance public ImageUpload getInstance(MediaProvider mediaProvider) Returns an ImageUploader instance associated with the specified media provider Parameters: mediaProvider - media provider Returns: ImageUploader getInstance public ImageUpload getInstance(MediaProvider mediaProvider, Authorization authorization) Returns an ImageUpload instance associated with the specified media provider Parameters: mediaProvider - media provider authorization - authorization Returns: ImageUpload Since: Twitter4J 2.1.11 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ImgLyUpload <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ImgLyUpload"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Class ImgLyUpload java.lang.Object twitter4j.media.AbstractImageUploadImpl twitter4j.media.ImgLyUpload All Implemented Interfaces: ImageUpload class ImgLyUpload extends AbstractImageUploadImpl Since: Twitter4J 2.1.8 Author: Takao Nakaguchi - takao.nakaguchi at gmail.com, withgod - noname at withgod.jp Field Summary Fields inherited from class twitter4j.media.AbstractImageUploadImpl apiKey, headers, httpResponse, image, message, oauth, postParameter, TWITTER_VERIFY_CREDENTIALS_JSON_V1_1, uploadUrl Constructor Summary Constructors  Constructor and Description ImgLyUpload(Configuration conf, OAuthAuthorization oauth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description protected java.lang.String postUpload()  protected void preUpload()  Methods inherited from class twitter4j.media.AbstractImageUploadImpl appendHttpParameters, equals, generateVerifyCredentialsAuthorizationHeader, generateVerifyCredentialsAuthorizationURL, hashCode, toString, upload, upload, upload, upload Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Constructor Detail ImgLyUpload public ImgLyUpload(Configuration conf, OAuthAuthorization oauth) Method Detail postUpload protected java.lang.String postUpload() throws TwitterException Specified by: postUpload in class AbstractImageUploadImpl Throws: TwitterException preUpload protected void preUpload() throws TwitterException Specified by: preUpload in class AbstractImageUploadImpl Throws: TwitterException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method JSONObjectType.Type <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="JSONObjectType.Type"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method twitter4j Enum JSONObjectType.Type java.lang.Object java.lang.Enum<JSONObjectType.Type> twitter4j.JSONObjectType.Type All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<JSONObjectType.Type> Enclosing class: JSONObjectType public static enum JSONObjectType.Type extends java.lang.Enum<JSONObjectType.Type> Enum Constant Summary Enum Constants  Enum Constant and Description BLOCK  DELETE  DIRECT_MESSAGE  DISCONNECTION  FAVORITE  FAVORITED_RETWEET  FOLLOW  FRIENDS  LIMIT  QUOTED_TWEET  RETWEETED_RETWEET  SCRUB_GEO  SENDER  STALL_WARNING  STATUS  UNBLOCK  UNFAVORITE  UNFOLLOW  UNKNOWN  USER_DELETE  USER_LIST_CREATED  USER_LIST_DESTROYED  USER_LIST_MEMBER_ADDED  USER_LIST_MEMBER_DELETED  USER_LIST_SUBSCRIBED  USER_LIST_UNSUBSCRIBED  USER_LIST_UPDATED  USER_SUSPEND  USER_UPDATE  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static JSONObjectType.Type valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. static JSONObjectType.Type[] values() Returns an array containing the constants of this enum type, in the order they are declared. Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait Enum Constant Detail SENDER public static final JSONObjectType.Type SENDER STATUS public static final JSONObjectType.Type STATUS DIRECT_MESSAGE public static final JSONObjectType.Type DIRECT_MESSAGE DELETE public static final JSONObjectType.Type DELETE LIMIT public static final JSONObjectType.Type LIMIT STALL_WARNING public static final JSONObjectType.Type STALL_WARNING SCRUB_GEO public static final JSONObjectType.Type SCRUB_GEO FRIENDS public static final JSONObjectType.Type FRIENDS FAVORITE public static final JSONObjectType.Type FAVORITE UNFAVORITE public static final JSONObjectType.Type UNFAVORITE FOLLOW public static final JSONObjectType.Type FOLLOW UNFOLLOW public static final JSONObjectType.Type UNFOLLOW USER_LIST_MEMBER_ADDED public static final JSONObjectType.Type USER_LIST_MEMBER_ADDED USER_LIST_MEMBER_DELETED public static final JSONObjectType.Type USER_LIST_MEMBER_DELETED USER_LIST_SUBSCRIBED public static final JSONObjectType.Type USER_LIST_SUBSCRIBED USER_LIST_UNSUBSCRIBED public static final JSONObjectType.Type USER_LIST_UNSUBSCRIBED USER_LIST_CREATED public static final JSONObjectType.Type USER_LIST_CREATED USER_LIST_UPDATED public static final JSONObjectType.Type USER_LIST_UPDATED USER_LIST_DESTROYED public static final JSONObjectType.Type USER_LIST_DESTROYED USER_UPDATE public static final JSONObjectType.Type USER_UPDATE USER_DELETE public static final JSONObjectType.Type USER_DELETE USER_SUSPEND public static final JSONObjectType.Type USER_SUSPEND BLOCK public static final JSONObjectType.Type BLOCK UNBLOCK public static final JSONObjectType.Type UNBLOCK DISCONNECTION public static final JSONObjectType.Type DISCONNECTION RETWEETED_RETWEET public static final JSONObjectType.Type RETWEETED_RETWEET FAVORITED_RETWEET public static final JSONObjectType.Type FAVORITED_RETWEET QUOTED_TWEET public static final JSONObjectType.Type QUOTED_TWEET UNKNOWN public static final JSONObjectType.Type UNKNOWN Method Detail values public static JSONObjectType.Type[] values() Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (JSONObjectType.Type c : JSONObjectType.Type.values())   System.out.println(c); Returns: an array containing the constants of this enum type, in the order they are declared valueOf public static JSONObjectType.Type valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: java.lang.IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method JSONObjectType <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="JSONObjectType"; } } catch(err) { } //--> var methods = {"i0":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class JSONObjectType java.lang.Object twitter4j.JSONObjectType public final class JSONObjectType extends java.lang.Object Since: Twitter4J 2.1.9 Author: Dan Checkoway - dcheckoway at gmail.com Nested Class Summary Nested Classes  Modifier and Type Class and Description static class  JSONObjectType.Type  Field Summary Fields  Modifier and Type Field and Description private static Logger logger  Constructor Summary Constructors  Constructor and Description JSONObjectType()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static JSONObjectType.Type determine(JSONObject json) Determine the respective object type for a given JSONObject. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail logger private static final Logger logger Constructor Detail JSONObjectType public JSONObjectType() Method Detail determine public static JSONObjectType.Type determine(JSONObject json) Determine the respective object type for a given JSONObject. This method inspects the object to figure out what type of object it represents. This is useful when processing JSON events of mixed type from a stream, in which case you may need to know what type of object to construct, or how to handle the event properly. Parameters: json - the JSONObject whose type should be determined Returns: the determined JSONObjectType, or null if not recognized Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ListsResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ListsResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6,"i35":6,"i36":6,"i37":6,"i38":6,"i39":6,"i40":6,"i41":6,"i42":6,"i43":6,"i44":6,"i45":6,"i46":6,"i47":6,"i48":6,"i49":6,"i50":6,"i51":6,"i52":6,"i53":6,"i54":6,"i55":6,"i56":6,"i57":6,"i58":6,"i59":6,"i60":6,"i61":6,"i62":6,"i63":6,"i64":6,"i65":6,"i66":6,"i67":6,"i68":6,"i69":6,"i70":6,"i71":6,"i72":6,"i73":6,"i74":6,"i75":6,"i76":6,"i77":6,"i78":6,"i79":6,"i80":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface ListsResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface ListsResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description UserList createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) Creates a new list for the authenticated user. UserList createUserListMember(long listId, long userId) Adds a member to a list. UserList createUserListMember(long ownerId, java.lang.String slug, long userId) Adds a member to a list. UserList createUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) Adds a member to a list. UserList createUserListMembers(long listId, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(long listId, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(long ownerId, java.lang.String slug, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListSubscription(long listId) Make the authenticated user follow the specified list. UserList createUserListSubscription(long ownerId, java.lang.String slug) Make the authenticated user follow the specified list. UserList createUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) Make the authenticated user follow the specified list. UserList destroyUserList(long listId) Deletes the specified list. UserList destroyUserList(long ownerId, java.lang.String slug) Deletes the specified list. UserList destroyUserList(java.lang.String ownerScreenName, java.lang.String slug) Deletes the specified list. UserList destroyUserListMember(long listId, long userId) Removes the specified member from the list. UserList destroyUserListMember(long listId, java.lang.String screenName) Removes the specified members from the list. UserList destroyUserListMember(long ownerId, java.lang.String slug, long userId) Removes the specified member from the list. UserList destroyUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) Removes the specified member from the list. UserList destroyUserListMembers(long listId, long[] userIds) Removes the specified members from the list. UserList destroyUserListMembers(long listId, java.lang.String[] screenNames) Removes the specified members from the list. UserList destroyUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String[] screenNames) Removes the specified members from the list. UserList destroyUserListSubscription(long listId) Unsubscribes the authenticated user form the specified list. UserList destroyUserListSubscription(long ownerId, java.lang.String slug) Unsubscribes the authenticated user form the specified list. UserList destroyUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) Unsubscribes the authenticated user form the specified list. PagableResponseList<User> getUserListMembers(long listId, int count, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long listId, int count, long cursor, boolean skipStatus) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long listId, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) Returns the members of the specified list. PagableResponseList<UserList> getUserListMemberships(int count, long cursor) List the lists the authenticating user has been added to. PagableResponseList<UserList> getUserListMemberships(long cursor) List the lists the authenticating user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. ResponseList<UserList> getUserLists(long listOwnerUserId) List the lists of the specified user. ResponseList<UserList> getUserLists(long listOwnerUserId, boolean reverse) List the lists of the specified user. ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName) List the lists of the specified user. ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName, boolean reverse) List the lists of the specified user. PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, int count, long cursor) Returns the lists owned by the specified Twitter user. PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, long cursor) Returns the lists owned by the specified Twitter user. PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, int count, long cursor) Returns the lists owned by the specified Twitter user. PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, long cursor) Returns the lists owned by the specified Twitter user. ResponseList<Status> getUserListStatuses(long listId, Paging paging) Show tweet timeline for members of the specified list. ResponseList<Status> getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) Show tweet timeline for members of the specified list. ResponseList<Status> getUserListStatuses(java.lang.String ownerScreenName, java.lang.String slug, Paging paging) Show tweet timeline for members of the specified list. PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor, boolean skipStatus) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long listId, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) Returns the subscribers of the specified list. PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, int count, long cursor) List the lists the specified user follows. PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, long cursor) List the lists the specified user follows. PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, int count, long cursor) List the lists the specified user follows. PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, long cursor) List the lists the specified user follows. UserList showUserList(long listId) Show the specified list. UserList showUserList(long ownerId, java.lang.String slug) Show the specified list. UserList showUserList(java.lang.String ownerScreenName, java.lang.String slug) Show the specified list. User showUserListMembership(long listId, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json User showUserListMembership(long ownerId, java.lang.String slug, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json User showUserListMembership(java.lang.String ownerScreenName, java.lang.String slug, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json User showUserListSubscription(long listId, long userId) Check if the specified user is a subscriber of the specified list. User showUserListSubscription(long ownerId, java.lang.String slug, long userId) Check if the specified user is a subscriber of the specified list. User showUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug, long userId) Check if the specified user is a subscriber of the specified list. UserList updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. UserList updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. UserList updateUserList(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. Method Detail getUserLists ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName) throws TwitterException List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Parameters: listOwnerScreenName - The screen name of the list owner as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET lists/list | Twitter Developers getUserLists ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName, boolean reverse) throws TwitterException List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Parameters: listOwnerScreenName - The screen name of the list owner as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. reverse - Set this to true if you would like owned lists to be returned first Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/list | Twitter Developers getUserLists ResponseList<UserList> getUserLists(long listOwnerUserId) throws TwitterException List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Parameters: listOwnerUserId - The id of the list owner Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: GET lists/list | Twitter Developers getUserLists ResponseList<UserList> getUserLists(long listOwnerUserId, boolean reverse) throws TwitterException List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Parameters: listOwnerUserId - The id of the list owner reverse - Set this to true if you would like owned lists to be returned first Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/list | Twitter Developers getUserListStatuses ResponseList<Status> getUserListStatuses(long listId, Paging paging) throws TwitterException Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Parameters: listId - The id of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of statuses for members of the specified list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: GET lists/statuses | Twitter Developers getUserListStatuses ResponseList<Status> getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) throws TwitterException Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of statuses for members of the specified list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET lists/statuses | Twitter Developers getUserListStatuses ResponseList<Status> getUserListStatuses(java.lang.String ownerScreenName, java.lang.String slug, Paging paging) throws TwitterException Show tweet timeline for members of the specified list. https://api.twitter.com/1.1/lists/statuses.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of statuses for members of the specified list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET lists/statuses | Twitter Developers destroyUserListMember UserList destroyUserListMember(long listId, long userId) throws TwitterException Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Parameters: listId - The id of the list. userId - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST lists/members/destroy | Twitter Developers destroyUserListMember UserList destroyUserListMember(long listId, java.lang.String screenName) throws TwitterException Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Parameters: listId - The id of the list. screenName - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.6 See Also: POST lists/members/destroy | Twitter Developers destroyUserListMembers UserList destroyUserListMembers(long listId, java.lang.String[] screenNames) throws TwitterException Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy_all.json Parameters: listId - The id of the list. screenNames - The screen names of the members you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.6 See Also: POST lists/members/destroy_all | Twitter Developers destroyUserListMembers UserList destroyUserListMembers(long listId, long[] userIds) throws TwitterException Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy_all.json Parameters: listId - The id of the list. userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.6 See Also: POST lists/members/destroy_all | Twitter Developers destroyUserListMembers UserList destroyUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String[] screenNames) throws TwitterException Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy_all.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The screen names of the members you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.6 See Also: POST lists/members/destroy_all | Twitter Developers destroyUserListMember UserList destroyUserListMember(long ownerId, java.lang.String slug, long userId) throws TwitterException Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/members/destroy | Twitter Developers destroyUserListMember UserList destroyUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userId - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/members/destroy | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(long cursor) throws TwitterException List the lists the authenticating user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - when authorization is not enabled Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(int count, long cursor) throws TwitterException List the lists the authenticating user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - when authorization is not enabled Since: Twitter4J 4.0.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberId - The id of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberScreenName - The screen name of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - when filerToOwnedLists is true but authorization is not enabled Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor, boolean filterToOwnedLists) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberScreenName - The screen name of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - when filerToOwnedLists is true but authorization is not enabled Since: Twitter4J 4.0.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberId is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - when filerToOwnedLists is true but authorization is not enabled Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor, boolean filterToOwnedLists) throws TwitterException List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberId - The id of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberId is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - when filerToOwnedLists is true but authorization is not enabled Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(long listId, long cursor) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor, boolean skipStatus) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscribers | Twitter Developers createUserListSubscription UserList createUserListSubscription(long listId) throws TwitterException Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Parameters: listId - The id of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: POST lists/subscribers/create | Twitter Developers createUserListSubscription UserList createUserListSubscription(long ownerId, java.lang.String slug) throws TwitterException Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/subscribers/create | Twitter Developers createUserListSubscription UserList createUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/subscribers/create | Twitter Developers showUserListSubscription User showUserListSubscription(long listId, long userId) throws TwitterException Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 2.2.3 See Also: GET lists/subscribers/show | Twitter Developers showUserListSubscription User showUserListSubscription(long ownerId, java.lang.String slug, long userId) throws TwitterException Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 3.0.0 See Also: GET lists/subscribers/show | Twitter Developers showUserListSubscription User showUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 3.0.2 See Also: GET lists/subscribers/show | Twitter Developers destroyUserListSubscription UserList destroyUserListSubscription(long listId) throws TwitterException Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Parameters: listId - The id of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: POST lists/subscribers/destroy | Twitter Developers destroyUserListSubscription UserList destroyUserListSubscription(long ownerId, java.lang.String slug) throws TwitterException Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/subscribers/destroy | Twitter Developers destroyUserListSubscription UserList destroyUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/subscribers/destroy | Twitter Developers createUserListMembers UserList createUserListMembers(long listId, long... userIds) throws TwitterException Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: listId - The id of the list. userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers UserList createUserListMembers(long ownerId, java.lang.String slug, long... userIds) throws TwitterException Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long... userIds) throws TwitterException Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers UserList createUserListMembers(long listId, java.lang.String... screenNames) throws TwitterException Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: listId - The id of the list. screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.7 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers UserList createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) throws TwitterException Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String... screenNames) throws TwitterException Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/members/create_all | Twitter Developers showUserListMembership User showUserListMembership(long listId, long userId) throws TwitterException Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 2.2.3 See Also: GET lists/members/show | Twitter Developers showUserListMembership User showUserListMembership(long ownerId, java.lang.String slug, long userId) throws TwitterException Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 3.0.0 See Also: GET lists/members/show | Twitter Developers showUserListMembership User showUserListMembership(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Parameters: ownerScreenName - Id The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 3.0.2 See Also: GET lists/members/show | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(long listId, long cursor) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(long listId, int count, long cursor) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(long listId, int count, long cursor, boolean skipStatus) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, long cursor) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/members | Twitter Developers getUserListMembers PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/members | Twitter Developers createUserListMember UserList createUserListMember(long listId, long userId) throws TwitterException Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Parameters: listId - The id of the list. userId - The id of the user to add as a member of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST lists/members/create | Twitter Developers createUserListMember UserList createUserListMember(long ownerId, java.lang.String slug, long userId) throws TwitterException Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user to add as a member of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/members/create | Twitter Developers createUserListMember UserList createUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user to add as a member of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/members/create | Twitter Developers destroyUserList UserList destroyUserList(long listId) throws TwitterException Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Parameters: listId - The id of the list to delete Returns: the deleted list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST lists/destroy | Twitter Developers destroyUserList UserList destroyUserList(long ownerId, java.lang.String slug) throws TwitterException Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the deleted list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/destroy | Twitter Developers destroyUserList UserList destroyUserList(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the deleted list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/destroy | Twitter Developers updateUserList UserList updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) throws TwitterException Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Parameters: listId - The id of the list to update. newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST lists/update | Twitter Developers updateUserList UserList updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) throws TwitterException Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST lists/update | Twitter Developers updateUserList UserList updateUserList(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) throws TwitterException Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: POST lists/update | Twitter Developers createUserList UserList createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) throws TwitterException Creates a new list for the authenticated user. Accounts are limited to 20 lists. This method calls https://api.twitter.com/1.1/lists/create.json Parameters: listName - The name of the list you are creating. Required. isPublicList - set true if you wish to make a public list description - The description of the list you are creating. Optional. Returns: the list that was created Throws: TwitterException - when Twitter service or network is unavailable, or the authenticated user already has 20 lists(TwitterException.getStatusCode() == 403). Since: Twitter4J 2.1.0 See Also: POST lists/create | Twitter Developers showUserList UserList showUserList(long listId) throws TwitterException Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Parameters: listId - The id of the list to show Returns: the specified list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.3 See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers showUserList UserList showUserList(long ownerId, java.lang.String slug) throws TwitterException Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the specified list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers showUserList UserList showUserList(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the specified list Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers getUserListSubscriptions PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, long cursor) throws TwitterException List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Parameters: listSubscriberScreenName - The screen name of the list subscriber cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET lists/subscriptions | Twitter Developers getUserListSubscriptions PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, int count, long cursor) throws TwitterException List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Parameters: listSubscriberScreenName - The screen name of the list subscriber count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscriptions | Twitter Developers getUserListSubscriptions PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, long cursor) throws TwitterException List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Parameters: listSubscriberId - The ID of the list subscriber cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscriptions | Twitter Developers getUserListSubscriptions PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, int count, long cursor) throws TwitterException List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Parameters: listSubscriberId - The ID of the list subscriber count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 See Also: GET lists/subscriptions | Twitter Developers getUserListsOwnerships PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, long cursor) throws TwitterException Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Parameters: listOwnerScreenName - The screen name of the list owner cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 getUserListsOwnerships PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, int count, long cursor) throws TwitterException Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Parameters: listOwnerScreenName - The screen name of the list owner count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.1 getUserListsOwnerships PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, long cursor) throws TwitterException Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Parameters: listOwnerId - The id of the list owner cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.4 getUserListsOwnerships PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, int count, long cursor) throws TwitterException Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Parameters: listOwnerId - The id of the list owner count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.1 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ListsResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ListsResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6,"i35":6,"i36":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface ListsResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface ListsResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) Creates a new list for the authenticated user. void createUserListMember(long listId, long userId) Adds a member to a list. void createUserListMember(long ownerId, java.lang.String slug, long userId) Adds a member to a list. void createUserListMembers(long listId, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListMembers(long listId, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListMembers(long ownerId, java.lang.String slug, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. void createUserListSubscription(long listId) Make the authenticated user follow the specified list. void createUserListSubscription(long ownerId, java.lang.String slug) Make the authenticated user follow the specified list. void destroyUserList(long listId) Deletes the specified list. void destroyUserList(long ownerId, java.lang.String slug) Deletes the specified list. void destroyUserListMember(long listId, long userId) Removes the specified member from the list. void destroyUserListMember(long ownerId, java.lang.String slug, long userId) Removes the specified member from the list. void destroyUserListSubscription(long listId) Unsubscribes the authenticated user form the specified list. void destroyUserListSubscription(long ownerId, java.lang.String slug) Unsubscribes the authenticated user form the specified list. void getUserListMembers(long listId, long cursor) Returns the members of the specified list. void getUserListMembers(long ownerId, java.lang.String slug, long cursor) Returns the members of the specified list. void getUserListMemberships(long cursor) List the lists the authenticating user has been added to. void getUserListMemberships(long listMemberId, long cursor) List the lists the specified user has been added to. void getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. void getUserListMemberships(java.lang.String listMemberScreenName, long cursor) List the lists the specified user has been added to. void getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. void getUserLists(long listOwnerUserId) List the lists of the specified user. void getUserLists(java.lang.String listOwnerScreenName) List the lists of the specified user. void getUserListStatuses(long listId, Paging paging) Show tweet timeline for members of the specified list. void getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) Show tweet timeline for members of the specified list. void getUserListSubscribers(long listId, long cursor) Returns the subscribers of the specified list. void getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) Returns the subscribers of the specified list. void getUserListSubscriptions(java.lang.String listOwnerScreenName, long cursor) List the lists the specified user follows. void showUserList(long listId) Show the specified list. void showUserList(long ownerId, java.lang.String slug) Show the specified list. void showUserListMembership(long listId, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json void showUserListMembership(long ownerId, java.lang.String slug, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json void showUserListSubscription(long listId, long userId) Check if the specified user is a subscriber of the specified list. void showUserListSubscription(long ownerId, java.lang.String slug, long userId) Check if the specified user is a subscriber of the specified list. void updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. void updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. Method Detail getUserLists void getUserLists(java.lang.String listOwnerScreenName) List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Parameters: listOwnerScreenName - The screen name of the list owner as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.1.1 See Also: GET lists | Twitter Developers getUserLists void getUserLists(long listOwnerUserId) List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Parameters: listOwnerUserId - The id of the list owner returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.2.3 See Also: GET lists | Twitter Developers getUserListStatuses void getUserListStatuses(long listId, Paging paging) Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Parameters: listId - The id of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Since: Twitter4J 2.2.3 See Also: GET lists/statuses | Twitter Developers getUserListStatuses void getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Since: Twitter4J 3.0.0 See Also: GET lists/statuses | Twitter Developers destroyUserListMember void destroyUserListMember(long listId, long userId) Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Parameters: listId - The id of the list. userId - The screen name of the member you wish to remove from the list. Since: Twitter4J 2.1.0 See Also: POST lists/members/destroy | Twitter Developers destroyUserListMember void destroyUserListMember(long ownerId, java.lang.String slug, long userId) Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The screen name of the member you wish to remove from the list. Since: Twitter4J 3.0.0 See Also: POST lists/members/destroy | Twitter Developers getUserListMemberships void getUserListMemberships(long cursor) List the lists the authenticating user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships void getUserListMemberships(long listMemberId, long cursor) List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships void getUserListMemberships(java.lang.String listMemberScreenName, long cursor) List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.1.1 See Also: GET lists/memberships | Twitter Developers getUserListMemberships void getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListMemberships void getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. Since: Twitter4J 2.2.4 See Also: GET lists/memberships | Twitter Developers getUserListSubscribers void getUserListSubscribers(long listId, long cursor) Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.1.1 See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers void getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 3.0.0 See Also: GET lists/subscribers | Twitter Developers createUserListSubscription void createUserListSubscription(long listId) Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Parameters: listId - The id of the list. Since: Twitter4J 2.2.3 See Also: POST lists/subscribers/create | Twitter Developers createUserListSubscription void createUserListSubscription(long ownerId, java.lang.String slug) Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Since: Twitter4J 3.0.0 See Also: POST lists/subscribers/create | Twitter Developers showUserListSubscription void showUserListSubscription(long listId, long userId) Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 2.2.3 See Also: GET lists/subscribers/show | Twitter Developers showUserListSubscription void showUserListSubscription(long ownerId, java.lang.String slug, long userId) Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) Since: Twitter4J 3.0.0 See Also: GET lists/subscribers/show | Twitter Developers destroyUserListSubscription void destroyUserListSubscription(long listId) Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Parameters: listId - The id of the list. Since: Twitter4J 2.2.3 See Also: POST lists/subscribers/destroy | Twitter Developers destroyUserListSubscription void destroyUserListSubscription(long ownerId, java.lang.String slug) Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Since: Twitter4J 3.0.0 See Also: POST lists/subscribers/destroy | Twitter Developers createUserListMembers void createUserListMembers(long listId, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: listId - The id of the list. userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Since: Twitter4J 2.1.7 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers void createUserListMembers(long ownerId, java.lang.String slug, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Since: Twitter4J 3.0.0 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers void createUserListMembers(long listId, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: listId - The id of the list. screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Since: Twitter4J 2.1.7 See Also: POST lists/members/create_all | Twitter Developers createUserListMembers void createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Since: Twitter4J 3.0.0 See Also: POST lists/members/create_all | Twitter Developers showUserListMembership void showUserListMembership(long listId, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. Since: Twitter4J 2.2.3 See Also: GET lists/members/show | Twitter Developers showUserListMembership void showUserListMembership(long ownerId, java.lang.String slug, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. .getStatusCode() returns 404 in that case.) Since: Twitter4J 3.0.0 See Also: GET lists/members/show | Twitter Developers getUserListMembers void getUserListMembers(long listId, long cursor) Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.2.3 See Also: GET lists/members | Twitter Developers getUserListMembers void getUserListMembers(long ownerId, java.lang.String slug, long cursor) Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 3.0.0 See Also: GET lists/members | Twitter Developers createUserListMember void createUserListMember(long listId, long userId) Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Parameters: listId - The id of the list. userId - The id of the user to add as a member of the list. Since: Twitter4J 2.1.1 See Also: POST lists/members/create | Twitter Developers createUserListMember void createUserListMember(long ownerId, java.lang.String slug, long userId) Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 500 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user to add as a member of the list. Since: Twitter4J 3.0.0 See Also: POST lists/members/create | Twitter Developers destroyUserList void destroyUserList(long listId) Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Parameters: listId - The id of the list to delete Since: Twitter4J 2.1.1 See Also: POST lists/destroy | Twitter Developers destroyUserList void destroyUserList(long ownerId, java.lang.String slug) Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Since: Twitter4J 3.0.0 See Also: POST lists/destroy | Twitter Developers updateUserList void updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Parameters: listId - The id of the list to update. newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Since: Twitter4J 2.1.1 See Also: POST lists/update | Twitter Developers updateUserList void updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Since: Twitter4J 3.0.0 See Also: POST lists/update | Twitter Developers createUserList void createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) Creates a new list for the authenticated user. Accounts are limited to 20 lists. This method calls https://api.twitter.com/1.1/lists/create.json Parameters: listName - The name of the list you are creating. Required. isPublicList - set true if you wish to make a public list description - The description of the list you are creating. Optional. Since: Twitter4J 2.1.1 See Also: POST lists/create | Twitter Developers showUserList void showUserList(long listId) Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Parameters: listId - The id of the list to show Since: Twitter4J 2.2.3 See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers showUserList void showUserList(long ownerId, java.lang.String slug) Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Since: Twitter4J 3.0.0 See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers getUserListSubscriptions void getUserListSubscriptions(java.lang.String listOwnerScreenName, long cursor) List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Parameters: listOwnerScreenName - The screen name of the list owner cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Since: Twitter4J 2.1.1 See Also: GET lists/subscriptions | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Location <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Location"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Location All Superinterfaces: java.io.Serializable public interface Location extends java.io.Serializable Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getCountryCode()  java.lang.String getCountryName()  java.lang.String getName()  int getPlaceCode()  java.lang.String getPlaceName()  java.lang.String getURL()  int getWoeid()  Method Detail getWoeid int getWoeid() getCountryName java.lang.String getCountryName() getCountryCode java.lang.String getCountryCode() getPlaceName java.lang.String getPlaceName() getPlaceCode int getPlaceCode() getName java.lang.String getName() getURL java.lang.String getURL() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method MediaEntity.Size <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="MediaEntity.Size"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface MediaEntity.Size All Superinterfaces: java.io.Serializable Enclosing interface: MediaEntity public static interface MediaEntity.Size extends java.io.Serializable Field Summary Fields  Modifier and Type Field and Description static int CROP  static int FIT  static java.lang.Integer LARGE  static java.lang.Integer MEDIUM  static java.lang.Integer SMALL  static java.lang.Integer THUMB  Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getHeight()  int getResize()  int getWidth()  Field Detail THUMB static final java.lang.Integer THUMB SMALL static final java.lang.Integer SMALL MEDIUM static final java.lang.Integer MEDIUM LARGE static final java.lang.Integer LARGE FIT static final int FIT See Also: Constant Field Values CROP static final int CROP See Also: Constant Field Values Method Detail getWidth int getWidth() getHeight int getHeight() getResize int getResize() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method MediaEntity <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="MediaEntity"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface MediaEntity All Superinterfaces: java.io.Serializable, TweetEntity, URLEntity All Known Subinterfaces: ExtendedMediaEntity public interface MediaEntity extends URLEntity Since: Twitter4J 2.2.3 Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested Classes  Modifier and Type Interface and Description static interface  MediaEntity.Size  Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description long getId() Returns the id of the media. java.lang.String getMediaURL() Returns the media URL. java.lang.String getMediaURLHttps() Returns the media secure URL. java.util.Map<java.lang.Integer,MediaEntity.Size> getSizes() Returns size variations of the media. java.lang.String getType() Returns the media type ("photo", "video", "animated_gif"). Methods inherited from interface twitter4j.URLEntity getDisplayURL, getEnd, getExpandedURL, getStart, getText, getURL Method Detail getId long getId() Returns the id of the media. Returns: the id of the media getMediaURL java.lang.String getMediaURL() Returns the media URL. Returns: the media URL getMediaURLHttps java.lang.String getMediaURLHttps() Returns the media secure URL. Returns: the media secure URL getSizes java.util.Map<java.lang.Integer,MediaEntity.Size> getSizes() Returns size variations of the media. Returns: size variations of the media getType java.lang.String getType() Returns the media type ("photo", "video", "animated_gif"). Returns: the media type ("photo", "video", "animated_gif"). Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method MediaProvider <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="MediaProvider"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method twitter4j.media Enum MediaProvider java.lang.Object java.lang.Enum<MediaProvider> twitter4j.media.MediaProvider All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<MediaProvider> public enum MediaProvider extends java.lang.Enum<MediaProvider> Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Enum Constant Summary Enum Constants  Enum Constant and Description IMG_LY  MOBYPICTURE  TWIPPLE  TWITTER  YFROG  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static MediaProvider valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. static MediaProvider[] values() Returns an array containing the constants of this enum type, in the order they are declared. Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait Enum Constant Detail TWITTER public static final MediaProvider TWITTER IMG_LY public static final MediaProvider IMG_LY TWIPPLE public static final MediaProvider TWIPPLE YFROG public static final MediaProvider YFROG MOBYPICTURE public static final MediaProvider MOBYPICTURE Method Detail values public static MediaProvider[] values() Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (MediaProvider c : MediaProvider.values())   System.out.println(c); Returns: an array containing the constants of this enum type, in the order they are declared valueOf public static MediaProvider valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: java.lang.IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method MobypictureUpload <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="MobypictureUpload"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Class MobypictureUpload java.lang.Object twitter4j.media.AbstractImageUploadImpl twitter4j.media.MobypictureUpload All Implemented Interfaces: ImageUpload class MobypictureUpload extends AbstractImageUploadImpl Since: Twitter4J 2.1.12 Author: withgod - noname at withgod.jp See Also: mobyapi documentation Field Summary Fields inherited from class twitter4j.media.AbstractImageUploadImpl apiKey, headers, httpResponse, image, message, oauth, postParameter, TWITTER_VERIFY_CREDENTIALS_JSON_V1_1, uploadUrl Constructor Summary Constructors  Constructor and Description MobypictureUpload(Configuration conf, java.lang.String apiKey, OAuthAuthorization oauth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description protected java.lang.String postUpload()  protected void preUpload()  Methods inherited from class twitter4j.media.AbstractImageUploadImpl appendHttpParameters, equals, generateVerifyCredentialsAuthorizationHeader, generateVerifyCredentialsAuthorizationURL, hashCode, toString, upload, upload, upload, upload Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Constructor Detail MobypictureUpload public MobypictureUpload(Configuration conf, java.lang.String apiKey, OAuthAuthorization oauth) Method Detail postUpload protected java.lang.String postUpload() throws TwitterException Specified by: postUpload in class AbstractImageUploadImpl Throws: TwitterException preUpload protected void preUpload() throws TwitterException Specified by: preUpload in class AbstractImageUploadImpl Throws: TwitterException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method NullAuthorization <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="NullAuthorization"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":9,"i3":10,"i4":10,"i5":10}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class NullAuthorization java.lang.Object twitter4j.auth.NullAuthorization All Implemented Interfaces: java.io.Serializable, Authorization public class NullAuthorization extends java.lang.Object implements Authorization, java.io.Serializable An interface represents credentials. Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private static long serialVersionUID  private static NullAuthorization SINGLETON  Constructor Summary Constructors  Modifier Constructor and Description private NullAuthorization()  Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  java.lang.String getAuthorizationHeader(HttpRequest req)  static NullAuthorization getInstance()  boolean isEnabled() Returns true if authorization credentials are set. private java.lang.Object readResolve()  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values SINGLETON private static final NullAuthorization SINGLETON Constructor Detail NullAuthorization private NullAuthorization() Method Detail getInstance public static NullAuthorization getInstance() getAuthorizationHeader public java.lang.String getAuthorizationHeader(HttpRequest req) Specified by: getAuthorizationHeader in interface Authorization isEnabled public boolean isEnabled() Description copied from interface: Authorization Returns true if authorization credentials are set. Specified by: isEnabled in interface Authorization Returns: true if authorization credentials are set equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object readResolve private java.lang.Object readResolve() throws java.io.ObjectStreamException Throws: java.io.ObjectStreamException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OAuth2Authorization <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OAuth2Authorization"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class OAuth2Authorization java.lang.Object twitter4j.auth.OAuth2Authorization All Implemented Interfaces: java.io.Serializable, Authorization, OAuth2Support public class OAuth2Authorization extends java.lang.Object implements Authorization, java.io.Serializable, OAuth2Support Author: KOMIYA Atsushi - komiya.atsushi at gmail.com See Also: Application-only authentication, Serialized Form Field Summary Fields  Modifier and Type Field and Description private Configuration conf  private java.lang.String consumerKey  private java.lang.String consumerSecret  private HttpClient http  private static long serialVersionUID  private OAuth2Token token  Constructor Summary Constructors  Constructor and Description OAuth2Authorization(Configuration conf)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object obj)  java.lang.String getAuthorizationHeader(HttpRequest req)  OAuth2Token getOAuth2Token() Obtains an OAuth 2 Bearer token. int hashCode()  void invalidateOAuth2Token() Revokes an issued OAuth 2 Bearer Token. boolean isEnabled() Returns true if authorization credentials are set. void setOAuth2Token(OAuth2Token oauth2Token) Sets the OAuth 2 Bearer token. void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) Sets the OAuth consumer key and consumer secret. java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values conf private final Configuration conf http private final HttpClient http consumerKey private java.lang.String consumerKey consumerSecret private java.lang.String consumerSecret token private OAuth2Token token Constructor Detail OAuth2Authorization public OAuth2Authorization(Configuration conf) Method Detail setOAuthConsumer public void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) Description copied from interface: OAuth2Support Sets the OAuth consumer key and consumer secret. Specified by: setOAuthConsumer in interface OAuth2Support Parameters: consumerKey - OAuth consumer key consumerSecret - OAuth consumer secret getOAuth2Token public OAuth2Token getOAuth2Token() throws TwitterException Description copied from interface: OAuth2Support Obtains an OAuth 2 Bearer token. Specified by: getOAuth2Token in interface OAuth2Support Returns: OAuth 2 Bearer token Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. See Also: POST oauth2/token | Twitter Developers setOAuth2Token public void setOAuth2Token(OAuth2Token oauth2Token) Description copied from interface: OAuth2Support Sets the OAuth 2 Bearer token. Specified by: setOAuth2Token in interface OAuth2Support Parameters: oauth2Token - OAuth 2 Bearer token invalidateOAuth2Token public void invalidateOAuth2Token() throws TwitterException Description copied from interface: OAuth2Support Revokes an issued OAuth 2 Bearer Token. Specified by: invalidateOAuth2Token in interface OAuth2Support Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. getAuthorizationHeader public java.lang.String getAuthorizationHeader(HttpRequest req) Specified by: getAuthorizationHeader in interface Authorization isEnabled public boolean isEnabled() Description copied from interface: Authorization Returns true if authorization credentials are set. Specified by: isEnabled in interface Authorization Returns: true if authorization credentials are set equals public boolean equals(java.lang.Object obj) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OAuth2Support <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OAuth2Support"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Interface OAuth2Support All Known Subinterfaces: AsyncTwitter, Twitter All Known Implementing Classes: AsyncTwitterImpl, OAuth2Authorization, TwitterBaseImpl, TwitterImpl, TwitterStreamImpl public interface OAuth2Support Author: KOMIYA Atsushi - komiya.atsushi at gmail.com See Also: Application-only authentication | Twitter Developers Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description OAuth2Token getOAuth2Token() Obtains an OAuth 2 Bearer token. void invalidateOAuth2Token() Revokes an issued OAuth 2 Bearer Token. void setOAuth2Token(OAuth2Token oauth2Token) Sets the OAuth 2 Bearer token. void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) Sets the OAuth consumer key and consumer secret. Method Detail setOAuthConsumer void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) Sets the OAuth consumer key and consumer secret. Parameters: consumerKey - OAuth consumer key consumerSecret - OAuth consumer secret Throws: java.lang.IllegalStateException - when OAuth consumer has already been set, or the instance is using basic authorization. getOAuth2Token OAuth2Token getOAuth2Token() throws TwitterException Obtains an OAuth 2 Bearer token. Returns: OAuth 2 Bearer token Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. java.lang.IllegalStateException - when Bearer token is already available, or OAuth consumer is not available. See Also: POST oauth2/token | Twitter Developers setOAuth2Token void setOAuth2Token(OAuth2Token oauth2Token) Sets the OAuth 2 Bearer token. Parameters: oauth2Token - OAuth 2 Bearer token invalidateOAuth2Token void invalidateOAuth2Token() throws TwitterException Revokes an issued OAuth 2 Bearer Token. Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. java.lang.IllegalStateException - when Bearer token is not available. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OAuth2Token <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OAuth2Token"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":9,"i4":10,"i5":10,"i6":10}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class OAuth2Token java.lang.Object twitter4j.auth.OAuth2Token All Implemented Interfaces: java.io.Serializable public class OAuth2Token extends java.lang.Object implements java.io.Serializable See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private java.lang.String accessToken  private static long serialVersionUID  private java.lang.String tokenType  Constructor Summary Constructors  Constructor and Description OAuth2Token(HttpResponse res)  OAuth2Token(java.lang.String tokenType, java.lang.String accessToken)  Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object obj)  (package private) java.lang.String generateAuthorizationHeader()  java.lang.String getAccessToken()  private static java.lang.String getRawString(java.lang.String name, JSONObject json)  java.lang.String getTokenType()  int hashCode()  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values tokenType private java.lang.String tokenType accessToken private java.lang.String accessToken Constructor Detail OAuth2Token OAuth2Token(HttpResponse res) throws TwitterException Throws: TwitterException OAuth2Token public OAuth2Token(java.lang.String tokenType, java.lang.String accessToken) Method Detail getTokenType public java.lang.String getTokenType() getAccessToken public java.lang.String getAccessToken() generateAuthorizationHeader java.lang.String generateAuthorizationHeader() equals public boolean equals(java.lang.Object obj) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object getRawString private static java.lang.String getRawString(java.lang.String name, JSONObject json) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OAuthAuthorization <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OAuthAuthorization"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9,"i2":9,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":9,"i23":9,"i24":10,"i25":10,"i26":10,"i27":10,"i28":9,"i29":10}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class OAuthAuthorization java.lang.Object twitter4j.auth.OAuthAuthorization All Implemented Interfaces: java.io.Serializable, Authorization, OAuthSupport public class OAuthAuthorization extends java.lang.Object implements Authorization, java.io.Serializable, OAuthSupport Author: Yusuke Yamamoto - yusuke at mac.com See Also: OAuth Core 1.0a, Serialized Form Field Summary Fields  Modifier and Type Field and Description private Configuration conf  private java.lang.String consumerKey  private java.lang.String consumerSecret  private static java.lang.String HMAC_SHA1  private static HttpClient http  private static Logger logger  private static HttpParameter OAUTH_SIGNATURE_METHOD  private OAuthToken oauthToken  private static java.util.Random RAND  private java.lang.String realm  private static long serialVersionUID  Constructor Summary Constructors  Constructor and Description OAuthAuthorization(Configuration conf)  Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description (package private) static java.lang.String constructRequestURL(java.lang.String url) The Signature Base String includes the request absolute URL, tying the signature to a specific endpoint. static java.lang.String encodeParameters(java.util.List<HttpParameter> httpParams)  static java.lang.String encodeParameters(java.util.List<HttpParameter> httpParams, java.lang.String splitter, boolean quot)  private void ensureTokenIsAvailable()  boolean equals(java.lang.Object o)  (package private) java.lang.String generateAuthorizationHeader(java.lang.String method, java.lang.String url, HttpParameter[] params, OAuthToken token)  (package private) java.lang.String generateAuthorizationHeader(java.lang.String method, java.lang.String url, HttpParameter[] params, java.lang.String nonce, java.lang.String timestamp, OAuthToken otoken)  java.util.List<HttpParameter> generateOAuthSignatureHttpParams(java.lang.String method, java.lang.String url)  (package private) java.lang.String generateSignature(java.lang.String data)  (package private) java.lang.String generateSignature(java.lang.String data, OAuthToken token) Computes RFC 2104-compliant HMAC signature. java.lang.String getAuthorizationHeader(HttpRequest req)  AccessToken getOAuthAccessToken() Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. AccessToken getOAuthAccessToken(RequestToken requestToken) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) Retrieves an access token. AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. RequestToken getOAuthRequestToken() Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackURL) Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType) Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) Retrieves a request token int hashCode()  boolean isEnabled() Returns true if authorization credentials are set. (package private) static java.lang.String normalizeRequestParameters(HttpParameter[] params) The request parameters are collected, sorted and concatenated into a normalized string: • Parameters in the OAuth HTTP Authorization header excluding the realm parameter. • Parameters in the HTTP POST request body (with a content-type of application/x-www-form-urlencoded). • HTTP GET parameters added to the URLs in the query part (as defined by [RFC3986] section 3). The oauth_signature parameter MUST be excluded. The parameters are normalized into a single string as follows: 1. private static java.lang.String normalizeRequestParameters(java.util.List<HttpParameter> params)  private void parseGetParameters(java.lang.String url, java.util.List<HttpParameter> signatureBaseParams)  void setOAuthAccessToken(AccessToken accessToken) Sets the access token void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) sets the OAuth consumer key and consumer secret void setOAuthRealm(java.lang.String realm) Sets the OAuth realm private static java.util.List<HttpParameter> toParamList(HttpParameter[] params)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values conf private final Configuration conf http private static transient HttpClient http HMAC_SHA1 private static final java.lang.String HMAC_SHA1 See Also: Constant Field Values OAUTH_SIGNATURE_METHOD private static final HttpParameter OAUTH_SIGNATURE_METHOD logger private static final Logger logger consumerKey private java.lang.String consumerKey consumerSecret private java.lang.String consumerSecret realm private java.lang.String realm oauthToken private OAuthToken oauthToken RAND private static final java.util.Random RAND Constructor Detail OAuthAuthorization public OAuthAuthorization(Configuration conf) Parameters: conf - configuration Method Detail getAuthorizationHeader public java.lang.String getAuthorizationHeader(HttpRequest req) Specified by: getAuthorizationHeader in interface Authorization ensureTokenIsAvailable private void ensureTokenIsAvailable() isEnabled public boolean isEnabled() Returns true if authorization credentials are set. Specified by: isEnabled in interface Authorization Returns: true if authorization credentials are set getOAuthRequestToken public RequestToken getOAuthRequestToken() throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Returns: generated request token. Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken public RequestToken getOAuthRequestToken(java.lang.String callbackURL) throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Parameters: callbackURL - callback URL Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken public RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType) throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken public RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. xAuthMode - Set to reverse_auth to obtain a special request token to be used in the reverse auth process. Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken() throws TwitterException Description copied from interface: OAuthSupport Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. Specified by: getOAuthAccessToken in interface OAuthSupport Returns: access token Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: oauthVerifier - OAuth verifier. AKA pin. Returns: access token Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(RequestToken requestToken) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: requestToken - the request token Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: requestToken - the request token oauthVerifier - OAuth verifier. AKA pin. Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: screenName - the screen name password - the password Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, xAuth | Twitter Developers, POST oauth/access_token | Twitter Developers setOAuthAccessToken public void setOAuthAccessToken(AccessToken accessToken) Description copied from interface: OAuthSupport Sets the access token Specified by: setOAuthAccessToken in interface OAuthSupport Parameters: accessToken - accessToken setOAuthRealm public void setOAuthRealm(java.lang.String realm) Sets the OAuth realm Parameters: realm - OAuth realm Since: Twitter 2.1.4 generateAuthorizationHeader java.lang.String generateAuthorizationHeader(java.lang.String method, java.lang.String url, HttpParameter[] params, java.lang.String nonce, java.lang.String timestamp, OAuthToken otoken) parseGetParameters private void parseGetParameters(java.lang.String url, java.util.List<HttpParameter> signatureBaseParams) generateAuthorizationHeader java.lang.String generateAuthorizationHeader(java.lang.String method, java.lang.String url, HttpParameter[] params, OAuthToken token) Returns: generated authorization header See Also: OAuth Core - 5.4.1. Authorization Header generateOAuthSignatureHttpParams public java.util.List<HttpParameter> generateOAuthSignatureHttpParams(java.lang.String method, java.lang.String url) generateSignature java.lang.String generateSignature(java.lang.String data, OAuthToken token) Computes RFC 2104-compliant HMAC signature. Parameters: data - the data to be signed token - the token Returns: signature See Also: OAuth Core - 9.2.1. Generating Signature generateSignature java.lang.String generateSignature(java.lang.String data) normalizeRequestParameters static java.lang.String normalizeRequestParameters(HttpParameter[] params) The request parameters are collected, sorted and concatenated into a normalized string: • Parameters in the OAuth HTTP Authorization header excluding the realm parameter. • Parameters in the HTTP POST request body (with a content-type of application/x-www-form-urlencoded). • HTTP GET parameters added to the URLs in the query part (as defined by [RFC3986] section 3). The oauth_signature parameter MUST be excluded. The parameters are normalized into a single string as follows: 1. Parameters are sorted by name, using lexicographical byte value ordering. If two or more parameters share the same name, they are sorted by their value. For example: 2. a=1, c=hi%20there, f=25, f=50, f=a, z=p, z=t 3. 4. Parameters are concatenated in their sorted order into a single string. For each parameter, the name is separated from the corresponding value by an ‘=’ character (ASCII code 61), even if the value is empty. Each name-value pair is separated by an ‘&’ character (ASCII code 38). For example: 5. a=1&c=hi%20there&f=25&f=50&f=a&z=p&z=t 6. Parameters: params - parameters to be normalized and concatenated Returns: normalized and concatenated parameters See Also: OAuth Core - 9.1.1. Normalize Request Parameters normalizeRequestParameters private static java.lang.String normalizeRequestParameters(java.util.List<HttpParameter> params) toParamList private static java.util.List<HttpParameter> toParamList(HttpParameter[] params) encodeParameters public static java.lang.String encodeParameters(java.util.List<HttpParameter> httpParams) Parameters: httpParams - parameters to be encoded and concatenated Returns: encoded string See Also: OAuth / TestCases, Space encoding - OAuth | Google Groups encodeParameters public static java.lang.String encodeParameters(java.util.List<HttpParameter> httpParams, java.lang.String splitter, boolean quot) constructRequestURL static java.lang.String constructRequestURL(java.lang.String url) The Signature Base String includes the request absolute URL, tying the signature to a specific endpoint. The URL used in the Signature Base String MUST include the scheme, authority, and path, and MUST exclude the query and fragment as defined by [RFC3986] section 3. If the absolute request URL is not available to the Service Provider (it is always available to the Consumer), it can be constructed by combining the scheme being used, the HTTP Host header, and the relative HTTP request URL. If the Host header is not available, the Service Provider SHOULD use the host name communicated to the Consumer in the documentation or other means. The Service Provider SHOULD document the form of URL used in the Signature Base String to avoid ambiguity due to URL normalization. Unless specified, URL scheme and authority MUST be lowercase and include the port number; http default port 80 and https default port 443 MUST be excluded. For example, the request: HTTP://Example.com:80/resource?id=123 Is included in the Signature Base String as: http://example.com/resource Parameters: url - the url to be normalized Returns: the Signature Base String See Also: OAuth Core - 9.1.2. Construct Request URL setOAuthConsumer public void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) Description copied from interface: OAuthSupport sets the OAuth consumer key and consumer secret Specified by: setOAuthConsumer in interface OAuthSupport Parameters: consumerKey - OAuth consumer key consumerSecret - OAuth consumer secret equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OAuthSupport <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OAuthSupport"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Interface OAuthSupport All Known Subinterfaces: AsyncTwitter, Twitter, TwitterStream All Known Implementing Classes: AsyncTwitterImpl, OAuthAuthorization, TwitterBaseImpl, TwitterImpl, TwitterStreamImpl public interface OAuthSupport Since: Twitter4J 2.1.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description AccessToken getOAuthAccessToken() Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. AccessToken getOAuthAccessToken(RequestToken requestToken) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) Retrieves an access token. AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. RequestToken getOAuthRequestToken() Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackURL) Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType) Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) Retrieves a request token void setOAuthAccessToken(AccessToken accessToken) Sets the access token void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) sets the OAuth consumer key and consumer secret Method Detail setOAuthConsumer void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) sets the OAuth consumer key and consumer secret Parameters: consumerKey - OAuth consumer key consumerSecret - OAuth consumer secret Throws: java.lang.IllegalStateException - when OAuth consumer has already been set, or the instance is using basic authorization Since: Twitter 2.0.0 getOAuthRequestToken RequestToken getOAuthRequestToken() throws TwitterException Retrieves a request token Returns: generated request token. Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - access token is already available Since: Twitter4J 2.0.0 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken RequestToken getOAuthRequestToken(java.lang.String callbackURL) throws TwitterException Retrieves a request token Parameters: callbackURL - callback URL Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - access token is already available Since: Twitter4J 2.0.0 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType) throws TwitterException Retrieves a request token Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - access token is already available Since: Twitter4J 2.2.3 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken RequestToken getOAuthRequestToken(java.lang.String callbackURL, java.lang.String xAuthAccessType, java.lang.String xAuthMode) throws TwitterException Retrieves a request token Parameters: callbackURL - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. xAuthMode - Set to reverse_auth to obtain a special request token to be used in the reverse auth process. Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable java.lang.IllegalStateException - access token is already available Since: Twitter4J 2.2.3 See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthAccessToken AccessToken getOAuthAccessToken() throws TwitterException Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. Returns: access token Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized java.lang.IllegalStateException - when RequestToken has never been acquired Since: Twitter4J 2.0.0 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) throws TwitterException Retrieves an access token. Parameters: oauthVerifier - OAuth verifier. AKA pin. Returns: access token Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized Since: Twitter4J 2.0.0 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken AccessToken getOAuthAccessToken(RequestToken requestToken) throws TwitterException Retrieves an access token associated with the supplied request token and sets userId. Parameters: requestToken - the request token Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized Since: Twitter4J 2.0.0 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) throws TwitterException Retrieves an access token associated with the supplied request token and sets userId. Parameters: requestToken - the request token oauthVerifier - OAuth verifier. AKA pin. Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized Since: Twitter 2.1.1 See Also: OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) throws TwitterException Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Parameters: screenName - the screen name password - the password Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized Since: Twitter 2.1.1 See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, xAuth | Twitter Developers, POST oauth/access_token | Twitter Developers setOAuthAccessToken void setOAuthAccessToken(AccessToken accessToken) Sets the access token Parameters: accessToken - accessToken Since: Twitter4J 2.0.0 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OAuthToken <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OAuthToken"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class OAuthToken java.lang.Object twitter4j.auth.OAuthToken All Implemented Interfaces: java.io.Serializable Direct Known Subclasses: AccessToken, RequestToken abstract class OAuthToken extends java.lang.Object implements java.io.Serializable Field Summary Fields  Modifier and Type Field and Description private java.lang.String[] responseStr  private javax.crypto.spec.SecretKeySpec secretKeySpec  private static long serialVersionUID  private java.lang.String token  private java.lang.String tokenSecret  Constructor Summary Constructors  Constructor and Description OAuthToken(HttpResponse response)  OAuthToken(java.lang.String token, java.lang.String tokenSecret)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  java.lang.String getParameter(java.lang.String parameter)  (package private) javax.crypto.spec.SecretKeySpec getSecretKeySpec()  java.lang.String getToken()  java.lang.String getTokenSecret()  int hashCode()  (package private) void setSecretKeySpec(javax.crypto.spec.SecretKeySpec secretKeySpec)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values token private final java.lang.String token tokenSecret private final java.lang.String tokenSecret secretKeySpec private transient javax.crypto.spec.SecretKeySpec secretKeySpec responseStr private java.lang.String[] responseStr Constructor Detail OAuthToken public OAuthToken(java.lang.String token, java.lang.String tokenSecret) OAuthToken OAuthToken(HttpResponse response) throws TwitterException Throws: TwitterException Method Detail getToken public java.lang.String getToken() getTokenSecret public java.lang.String getTokenSecret() setSecretKeySpec void setSecretKeySpec(javax.crypto.spec.SecretKeySpec secretKeySpec) getSecretKeySpec javax.crypto.spec.SecretKeySpec getSecretKeySpec() getParameter public java.lang.String getParameter(java.lang.String parameter) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OEmbed <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OEmbed"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface OEmbed All Superinterfaces: java.io.Serializable, TwitterResponse public interface OEmbed extends TwitterResponse, java.io.Serializable Since: Twitter4J 3.0.2 Author: Yusuke Yamamoto - yusuke at mac.com See Also: oEmded Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getAuthorName() The name of the author/owner of the resource. java.lang.String getAuthorURL() A URL for the author/owner of the resource. long getCacheAge() The suggested cache lifetime for this resource, in seconds. java.lang.String getHtml() The HTML required to display the resource. java.lang.String getURL() The url of the resource provider. The source URL of the image. java.lang.String getVersion() The oEmbed version number. int getWidth() The width in pixels of the image specified in the url parameter. Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getHtml java.lang.String getHtml() The HTML required to display the resource. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities. The markup should be valid XHTML 1.0 Basic. Returns: The HTML required to display the resource. getAuthorName java.lang.String getAuthorName() The name of the author/owner of the resource. Returns: The name of the author/owner of the resource. getURL java.lang.String getURL() The url of the resource provider. The source URL of the image. Consumers should be able to insert this URL into an <img> element. Only HTTP and HTTPS URLs are valid. Returns: The url of the resource provider. getVersion java.lang.String getVersion() The oEmbed version number. Returns: The oEmbed version number. getCacheAge long getCacheAge() The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not. Returns: The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not. getAuthorURL java.lang.String getAuthorURL() A URL for the author/owner of the resource. Returns: A URL for the author/owner of the resource. getWidth int getWidth() The width in pixels of the image specified in the url parameter. Returns: The width in pixels of the image specified in the url parameter. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method OEmbedRequest.Align <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OEmbedRequest.Align"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method twitter4j Enum OEmbedRequest.Align java.lang.Object java.lang.Enum<OEmbedRequest.Align> twitter4j.OEmbedRequest.Align All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<OEmbedRequest.Align> Enclosing class: OEmbedRequest public static enum OEmbedRequest.Align extends java.lang.Enum<OEmbedRequest.Align> Enum Constant Summary Enum Constants  Enum Constant and Description CENTER  LEFT  NONE  RIGHT  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static OEmbedRequest.Align valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. static OEmbedRequest.Align[] values() Returns an array containing the constants of this enum type, in the order they are declared. Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait Enum Constant Detail LEFT public static final OEmbedRequest.Align LEFT CENTER public static final OEmbedRequest.Align CENTER RIGHT public static final OEmbedRequest.Align RIGHT NONE public static final OEmbedRequest.Align NONE Method Detail values public static OEmbedRequest.Align[] values() Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (OEmbedRequest.Align c : OEmbedRequest.Align.values())   System.out.println(c); Returns: an array containing the constants of this enum type, in the order they are declared valueOf public static OEmbedRequest.Align valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: java.lang.IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method OEmbedRequest <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="OEmbedRequest"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class OEmbedRequest java.lang.Object twitter4j.OEmbedRequest All Implemented Interfaces: java.io.Serializable public final class OEmbedRequest extends java.lang.Object implements java.io.Serializable Since: Twitter4J 3.0.2 Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Nested Class Summary Nested Classes  Modifier and Type Class and Description static class  OEmbedRequest.Align  Field Summary Fields  Modifier and Type Field and Description private OEmbedRequest.Align align  private boolean hideMedia  private boolean hideThread  private java.lang.String lang  private int maxWidth  private boolean omitScript  private java.lang.String[] related  private static long serialVersionUID  private long statusId  private java.lang.String url  Constructor Summary Constructors  Constructor and Description OEmbedRequest(long statusId, java.lang.String url)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description OEmbedRequest align(OEmbedRequest.Align align)  private void appendParameter(java.lang.String name, long value, java.util.List<HttpParameter> params)  private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params)  (package private) HttpParameter[] asHttpParameterArray()  boolean equals(java.lang.Object o)  int hashCode()  OEmbedRequest HideMedia(boolean hideMedia)  OEmbedRequest HideThread(boolean hideThread)  OEmbedRequest lang(java.lang.String lang)  OEmbedRequest MaxWidth(int maxWidth)  OEmbedRequest omitScript(boolean omitScript)  OEmbedRequest related(java.lang.String[] related)  void setAlign(OEmbedRequest.Align align)  void setHideMedia(boolean hideMedia)  void setHideThread(boolean hideThread)  void setLang(java.lang.String lang)  void setMaxWidth(int maxWidth)  void setOmitScript(boolean omitScript)  void setRelated(java.lang.String[] related)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values statusId private final long statusId url private final java.lang.String url maxWidth private int maxWidth hideMedia private boolean hideMedia hideThread private boolean hideThread omitScript private boolean omitScript align private OEmbedRequest.Align align related private java.lang.String[] related lang private java.lang.String lang Constructor Detail OEmbedRequest public OEmbedRequest(long statusId, java.lang.String url) Method Detail setMaxWidth public void setMaxWidth(int maxWidth) MaxWidth public OEmbedRequest MaxWidth(int maxWidth) setHideMedia public void setHideMedia(boolean hideMedia) HideMedia public OEmbedRequest HideMedia(boolean hideMedia) setHideThread public void setHideThread(boolean hideThread) HideThread public OEmbedRequest HideThread(boolean hideThread) setOmitScript public void setOmitScript(boolean omitScript) omitScript public OEmbedRequest omitScript(boolean omitScript) setAlign public void setAlign(OEmbedRequest.Align align) align public OEmbedRequest align(OEmbedRequest.Align align) setRelated public void setRelated(java.lang.String[] related) related public OEmbedRequest related(java.lang.String[] related) setLang public void setLang(java.lang.String lang) lang public OEmbedRequest lang(java.lang.String lang) asHttpParameterArray HttpParameter[] asHttpParameterArray() appendParameter private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params) appendParameter private void appendParameter(java.lang.String name, long value, java.util.List<HttpParameter> params) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method PagableResponseList <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="PagableResponseList"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface PagableResponseList<T extends TwitterResponse> All Superinterfaces: java.util.Collection<T>, CursorSupport, java.lang.Iterable<T>, java.util.List<T>, ResponseList<T>, java.io.Serializable, TwitterResponse public interface PagableResponseList<T extends TwitterResponse> extends ResponseList<T>, CursorSupport ResponseList with cursor support. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Fields inherited from interface twitter4j.CursorSupport START Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description long getNextCursor()  long getPreviousCursor()  boolean hasNext()  boolean hasPrevious()  Methods inherited from interface twitter4j.ResponseList getRateLimitStatus Methods inherited from interface twitter4j.TwitterResponse getAccessLevel Methods inherited from interface java.util.List add, add, addAll, addAll, clear, contains, containsAll, equals, get, hashCode, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray Methods inherited from interface java.util.Collection parallelStream, removeIf, stream Methods inherited from interface java.lang.Iterable forEach Method Detail hasPrevious boolean hasPrevious() Specified by: hasPrevious in interface CursorSupport Returns: has previous page getPreviousCursor long getPreviousCursor() Specified by: getPreviousCursor in interface CursorSupport Returns: previous cursor hasNext boolean hasNext() Specified by: hasNext in interface CursorSupport Returns: has next getNextCursor long getNextCursor() Specified by: getNextCursor in interface CursorSupport Returns: next cursor Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Paging <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Paging"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class Paging java.lang.Object twitter4j.Paging All Implemented Interfaces: java.io.Serializable public final class Paging extends java.lang.Object implements java.io.Serializable Controls pagination. It is possible to use the same Paging instance in a multi-threaded context only if the instance is treated immutably. But basically instance of this class is NOT thread safe. A client should instantiate Paging class per thread. Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private int count  (package private) static java.lang.String COUNT  private long maxId  private static HttpParameter[] NULL_PARAMETER_ARRAY  private static java.util.List<HttpParameter> NULL_PARAMETER_LIST  private int page  (package private) static java.lang.String PER_PAGE  (package private) static char[] S  private static long serialVersionUID  private long sinceId  (package private) static char[] SMCP  Constructor Summary Constructors  Constructor and Description Paging()  Paging(int page)  Paging(int page, int count)  Paging(int page, int count, long sinceId)  Paging(int page, int count, long sinceId, long maxId)  Paging(int page, long sinceId)  Paging(long sinceId)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description private void addPostParameter(char[] supportedParams, char paramKey, java.util.List<HttpParameter> pagingParams, java.lang.String paramName, long paramValue)  (package private) HttpParameter[] asPostParameterArray()  (package private) HttpParameter[] asPostParameterArray(char[] supportedParams, java.lang.String perPageParamName) Converts the pagination parameters into a List of PostParameter. This method also Validates the preset parameters, and throws IllegalStateException if any unsupported parameter is set. (package private) java.util.List<HttpParameter> asPostParameterList()  (package private) java.util.List<HttpParameter> asPostParameterList(char[] supportedParams)  (package private) java.util.List<HttpParameter> asPostParameterList(char[] supportedParams, java.lang.String perPageParamName) Converts the pagination parameters into a List of PostParameter. This method also Validates the preset parameters, and throws IllegalStateException if any unsupported parameter is set. Paging count(int count)  boolean equals(java.lang.Object o)  int getCount()  long getMaxId()  int getPage()  long getSinceId()  int hashCode()  Paging maxId(long maxId)  void setCount(int count)  void setMaxId(long maxId)  void setPage(int page)  void setSinceId(long sinceId)  Paging sinceId(long sinceId)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values page private int page count private int count sinceId private long sinceId maxId private long maxId S static final char[] S SMCP static final char[] SMCP COUNT static final java.lang.String COUNT See Also: Constant Field Values PER_PAGE static final java.lang.String PER_PAGE See Also: Constant Field Values NULL_PARAMETER_ARRAY private static final HttpParameter[] NULL_PARAMETER_ARRAY NULL_PARAMETER_LIST private static final java.util.List<HttpParameter> NULL_PARAMETER_LIST Constructor Detail Paging public Paging() Paging public Paging(int page) Paging public Paging(long sinceId) Paging public Paging(int page, int count) Paging public Paging(int page, long sinceId) Paging public Paging(int page, int count, long sinceId) Paging public Paging(int page, int count, long sinceId, long maxId) Method Detail asPostParameterList java.util.List<HttpParameter> asPostParameterList() asPostParameterArray HttpParameter[] asPostParameterArray() asPostParameterList java.util.List<HttpParameter> asPostParameterList(char[] supportedParams) asPostParameterList java.util.List<HttpParameter> asPostParameterList(char[] supportedParams, java.lang.String perPageParamName) Converts the pagination parameters into a List of PostParameter. This method also Validates the preset parameters, and throws IllegalStateException if any unsupported parameter is set. Parameters: supportedParams - char array representation of supported parameters perPageParamName - name used for per-page parameter. getUserListStatuses() requires "per_page" instead of "count". Returns: list of PostParameter asPostParameterArray HttpParameter[] asPostParameterArray(char[] supportedParams, java.lang.String perPageParamName) Converts the pagination parameters into a List of PostParameter. This method also Validates the preset parameters, and throws IllegalStateException if any unsupported parameter is set. Parameters: supportedParams - char array representation of supported parameters perPageParamName - name used for per-page parameter. getUserListStatuses() requires "per_page" instead of "count". Returns: list of PostParameter addPostParameter private void addPostParameter(char[] supportedParams, char paramKey, java.util.List<HttpParameter> pagingParams, java.lang.String paramName, long paramValue) getPage public int getPage() setPage public void setPage(int page) getCount public int getCount() setCount public void setCount(int count) count public Paging count(int count) getSinceId public long getSinceId() setSinceId public void setSinceId(long sinceId) sinceId public Paging sinceId(long sinceId) getMaxId public long getMaxId() setMaxId public void setMaxId(long maxId) maxId public Paging maxId(long maxId) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Place <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Place"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Place All Superinterfaces: java.lang.Comparable<Place>, java.io.Serializable, TwitterResponse public interface Place extends TwitterResponse, java.lang.Comparable<Place>, java.io.Serializable Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description GeoLocation[][] getBoundingBoxCoordinates()  java.lang.String getBoundingBoxType()  Place[] getContainedWithIn()  java.lang.String getCountry()  java.lang.String getCountryCode()  java.lang.String getFullName()  GeoLocation[][] getGeometryCoordinates()  java.lang.String getGeometryType()  java.lang.String getId()  java.lang.String getName()  java.lang.String getPlaceType()  java.lang.String getStreetAddress()  java.lang.String getURL()  Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Methods inherited from interface java.lang.Comparable compareTo Method Detail getName java.lang.String getName() getStreetAddress java.lang.String getStreetAddress() getCountryCode java.lang.String getCountryCode() getId java.lang.String getId() getCountry java.lang.String getCountry() getPlaceType java.lang.String getPlaceType() getURL java.lang.String getURL() getFullName java.lang.String getFullName() getBoundingBoxType java.lang.String getBoundingBoxType() getBoundingBoxCoordinates GeoLocation[][] getBoundingBoxCoordinates() getGeometryType java.lang.String getGeometryType() getGeometryCoordinates GeoLocation[][] getGeometryCoordinates() getContainedWithIn Place[] getContainedWithIn() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method PlacesGeoResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="PlacesGeoResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface PlacesGeoResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface PlacesGeoResources Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description Place getGeoDetails(java.lang.String placeId) Find out more details of a place that was returned from the reverseGeoCode(twitter4j.GeoQuery) method. ResponseList<Place> getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) Locates places near the given coordinates which are similar in name. ResponseList<Place> reverseGeoCode(GeoQuery query) Search for places (cities and neighborhoods) that can be attached to a statuses/update. ResponseList<Place> searchPlaces(GeoQuery query) Search for places that can be attached to a statuses/update. Method Detail getGeoDetails Place getGeoDetails(java.lang.String placeId) throws TwitterException Find out more details of a place that was returned from the reverseGeoCode(twitter4j.GeoQuery) method. This method calls https://api.twitter.com/1.1/geo/id/:id.json Parameters: placeId - The ID of the location to query about. Returns: details of the specified place Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: GET geo/id/:place_id | Twitter Developers reverseGeoCode ResponseList<Place> reverseGeoCode(GeoQuery query) throws TwitterException Search for places (cities and neighborhoods) that can be attached to a statuses/update. Given a latitude and a longitude, return a list of all the valid places that can be used as a place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location up with a call to statuses/update. There are multiple granularities of places that can be returned -- "neighborhoods", "cities", etc. At this time, only United States data is available through this method. This API call is meant to be an informative call and will deliver generalized results about geography. This method calls https://api.twitter.com/1.1/geo/reverse_geocode.json Parameters: query - search query Returns: places (cities and neighborhoods) that can be attached to a statuses/update Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: GET geo/reverse_geocode | Twitter Developers searchPlaces ResponseList<Place> searchPlaces(GeoQuery query) throws TwitterException Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to statuses/update. This is the recommended method to use find places that can be attached to statuses/update. Unlike geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user. This method calls https://api.twitter.com/1.1/geo/search.json Parameters: query - search query Returns: places (cities and neighborhoods) that can be attached to a statuses/update Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.7 See Also: GET geo/search | Twitter Developers getSimilarPlaces ResponseList<Place> getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) throws TwitterException Locates places near the given coordinates which are similar in name. Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to post/geo/place to create a new one. The token contained in the response is the token needed to be able to create a new place. This method calls https://api.twitter.com/1.1/geo/similar_places.json Parameters: location - The latitude and longitude to search around. name - The name a place is known as. containedWithin - optional: the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. streetAddress - optional: This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes. Returns: places (cities and neighborhoods) that can be attached to a statuses/update Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.7 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method PlacesGeoResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="PlacesGeoResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface PlacesGeoResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface PlacesGeoResourcesAsync Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void getGeoDetails(java.lang.String id) Find out more details of a place that was returned from the reverseGeoCode(twitter4j.GeoQuery) method. void getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) Locates places near the given coordinates which are similar in name. void reverseGeoCode(GeoQuery query) Search for places (cities and neighborhoods) that can be attached to a statuses/update. void searchPlaces(GeoQuery query) Search for places that can be attached to a statuses/update. Method Detail getGeoDetails void getGeoDetails(java.lang.String id) Find out more details of a place that was returned from the reverseGeoCode(twitter4j.GeoQuery) method. This method calls https://api.twitter.com/1.1/geo/id/:id.json Parameters: id - The ID of the location to query about. Since: Twitter4J 2.1.1 See Also: GET geo/id/:place_id | Twitter Developers getSimilarPlaces void getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) Locates places near the given coordinates which are similar in name. Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to post/geo/place to create a new one. The token contained in the response is the token needed to be able to create a new place. This method calls https://api.twitter.com/1.1/geo/similar_places.json Parameters: location - The latitude and longitude to search around. name - The name a place is known as. containedWithin - optional: the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. streetAddress - optional: This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes. Since: Twitter4J 2.1.7 reverseGeoCode void reverseGeoCode(GeoQuery query) Search for places (cities and neighborhoods) that can be attached to a statuses/update. Given a latitude and a longitude, return a list of all the valid places that can be used as a place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location up with a call to statuses/update. There are multiple granularities of places that can be returned -- "neighborhoods", "cities", etc. At this time, only United States data is available through this method. This API call is meant to be an informative call and will deliver generalized results about geography. This method calls https://api.twitter.com/1.1/geo/reverse_geocode.json Parameters: query - search query Since: Twitter4J 2.1.1 See Also: GET geo/reverse_geocode | Twitter Developers searchPlaces void searchPlaces(GeoQuery query) Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to statuses/update. This is the recommended method to use find places that can be attached to statuses/update. Unlike geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user. This method calls https://api.twitter.com/1.1/geo/search.json Parameters: query - search query Since: Twitter4J 2.1.7 See Also: GET geo/search | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method PropertyConfiguration <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="PropertyConfiguration"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.conf Class PropertyConfiguration java.lang.Object twitter4j.conf.ConfigurationBase twitter4j.conf.PropertyConfiguration All Implemented Interfaces: java.io.Serializable, AuthorizationConfiguration, Configuration public final class PropertyConfiguration extends ConfigurationBase implements java.io.Serializable Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Nested Class Summary Nested classes/interfaces inherited from class twitter4j.conf.ConfigurationBase ConfigurationBase.MyHttpClientConfiguration Field Summary Fields  Modifier and Type Field and Description private static java.lang.String APPLICATION_ONLY_AUTH_ENABLED  private static java.lang.String ASYNC_DAEMON_ENABLED  private static java.lang.String ASYNC_DISPATCHER_IMPL  private static java.lang.String ASYNC_NUM_THREADS  private static java.lang.String CONTRIBUTING_TO  private static java.lang.String DEBUG  private static java.lang.String HTTP_CONNECTION_TIMEOUT  private static java.lang.String HTTP_GZIP  private static java.lang.String HTTP_PRETTY_DEBUG  private static java.lang.String HTTP_PROXY_HOST  private static java.lang.String HTTP_PROXY_HOST_FALLBACK  private static java.lang.String HTTP_PROXY_PASSWORD  private static java.lang.String HTTP_PROXY_PORT  private static java.lang.String HTTP_PROXY_PORT_FALLBACK  private static java.lang.String HTTP_PROXY_USER  private static java.lang.String HTTP_READ_TIMEOUT  private static java.lang.String HTTP_RETRY_COUNT  private static java.lang.String HTTP_RETRY_INTERVAL_SECS  private static java.lang.String HTTP_STREAMING_READ_TIMEOUT  private static java.lang.String INCLUDE_ENTITIES  private static java.lang.String INCLUDE_MY_RETWEET  private static java.lang.String JSON_STORE_ENABLED  private static java.lang.String LOGGER_FACTORY  private static java.lang.String MBEAN_ENABLED  private static java.lang.String MEDIA_PROVIDER  private static java.lang.String MEDIA_PROVIDER_API_KEY  private static java.lang.String MEDIA_PROVIDER_PARAMETERS  private static java.lang.String OAUTH_ACCESS_TOKEN  private static java.lang.String OAUTH_ACCESS_TOKEN_SECRET  private static java.lang.String OAUTH_ACCESS_TOKEN_URL  private static java.lang.String OAUTH_AUTHENTICATION_URL  private static java.lang.String OAUTH_AUTHORIZATION_URL  private static java.lang.String OAUTH_CONSUMER_KEY  private static java.lang.String OAUTH_CONSUMER_SECRET  private static java.lang.String OAUTH_REQUEST_TOKEN_URL  private static java.lang.String OAUTH2_ACCESS_TOKEN  private static java.lang.String OAUTH2_INVALIDATE_TOKEN_URL  private static java.lang.String OAUTH2_SCOPE  private static java.lang.String OAUTH2_TOKEN_TYPE  private static java.lang.String OAUTH2_TOKEN_URL  private java.lang.String OAuth2Scope  private static java.lang.String PASSWORD  private static java.lang.String REST_BASE_URL  private static long serialVersionUID  private static java.lang.String SITE_STREAM_BASE_URL  private static java.lang.String STREAM_BASE_URL  private static java.lang.String STREAM_STALL_WARNINGS_ENABLED  private static java.lang.String STREAM_USER_REPLIES_ALL  private static java.lang.String STREAM_USER_WITH_FOLLOWINGS  private static java.lang.String USER  private static java.lang.String USER_STREAM_BASE_URL  Constructor Summary Constructors  Constructor and Description PropertyConfiguration() Creates a root PropertyConfiguration. PropertyConfiguration(java.io.InputStream is)  PropertyConfiguration(java.util.Properties props)  PropertyConfiguration(java.util.Properties props, java.lang.String treePath)  PropertyConfiguration(java.lang.String treePath)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description (package private) boolean getBoolean(java.util.Properties props, java.lang.String prefix, java.lang.String name)  (package private) int getIntProperty(java.util.Properties props, java.lang.String prefix, java.lang.String name)  (package private) long getLongProperty(java.util.Properties props, java.lang.String prefix, java.lang.String name)  (package private) java.lang.String getString(java.util.Properties props, java.lang.String prefix, java.lang.String name)  private boolean loadProperties(java.util.Properties props, java.io.InputStream is)  private boolean loadProperties(java.util.Properties props, java.lang.String path)  private void normalize(java.util.Properties props)  private boolean notNull(java.util.Properties props, java.lang.String prefix, java.lang.String name)  protected java.lang.Object readResolve()  private void setFieldsWithPrefix(java.util.Properties props, java.lang.String prefix)  private void setFieldsWithTreePath(java.util.Properties props, java.lang.String treePath) passing "/foo/bar" as treePath will result: 1. Methods inherited from class twitter4j.conf.ConfigurationBase cacheInstance, dumpConfiguration, equals, fixURL, getAsyncNumThreads, getContributingTo, getDispatcherImpl, getHttpClientConfiguration, getHttpStreamingReadTimeout, getLoggerFactory, getMediaProvider, getMediaProviderAPIKey, getMediaProviderParameters, getOAuth2AccessToken, getOAuth2InvalidateTokenURL, getOAuth2Scope, getOAuth2TokenType, getOAuth2TokenURL, getOAuthAccessToken, getOAuthAccessTokenSecret, getOAuthAccessTokenURL, getOAuthAuthenticationURL, getOAuthAuthorizationURL, getOAuthConsumerKey, getOAuthConsumerSecret, getOAuthRequestTokenURL, getPassword, getRestBaseURL, getSiteStreamBaseURL, getStreamBaseURL, getUploadBaseURL, getUser, getUserStreamBaseURL, hashCode, isApplicationOnlyAuthEnabled, isDaemonEnabled, isDebugEnabled, isIncludeEntitiesEnabled, isIncludeMyRetweetEnabled, isJSONStoreEnabled, isMBeanEnabled, isStallWarningsEnabled, isTrimUserEnabled, isUserStreamRepliesAllEnabled, isUserStreamWithFollowingsEnabled, setApplicationOnlyAuthEnabled, setAsyncNumThreads, setContributingTo, setDaemonEnabled, setDebug, setDispatcherImpl, setGZIPEnabled, setHttpConnectionTimeout, setHttpProxyHost, setHttpProxyPassword, setHttpProxyPort, setHttpProxyUser, setHttpReadTimeout, setHttpRetryCount, setHttpRetryIntervalSeconds, setHttpStreamingReadTimeout, setIncludeEntitiesEnabled, setIncludeMyRetweetEnabled, setJSONStoreEnabled, setLoggerFactory, setMBeanEnabled, setMediaProvider, setMediaProviderAPIKey, setMediaProviderParameters, setOAuth2AccessToken, setOAuth2InvalidateTokenURL, setOAuth2Scope, setOAuth2TokenType, setOAuth2TokenURL, setOAuthAccessToken, setOAuthAccessTokenSecret, setOAuthAccessTokenURL, setOAuthAuthenticationURL, setOAuthAuthorizationURL, setOAuthConsumerKey, setOAuthConsumerSecret, setOAuthRequestTokenURL, setPassword, setPrettyDebugEnabled, setRestBaseURL, setSiteStreamBaseURL, setStallWarningsEnabled, setStreamBaseURL, setTrimUserEnabled, setUploadBaseURL, setUser, setUserStreamBaseURL, setUserStreamRepliesAllEnabled, setUserStreamWithFollowingsEnabled, toString Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail DEBUG private static final java.lang.String DEBUG See Also: Constant Field Values USER private static final java.lang.String USER See Also: Constant Field Values PASSWORD private static final java.lang.String PASSWORD See Also: Constant Field Values HTTP_PRETTY_DEBUG private static final java.lang.String HTTP_PRETTY_DEBUG See Also: Constant Field Values HTTP_GZIP private static final java.lang.String HTTP_GZIP See Also: Constant Field Values HTTP_PROXY_HOST private static final java.lang.String HTTP_PROXY_HOST See Also: Constant Field Values HTTP_PROXY_HOST_FALLBACK private static final java.lang.String HTTP_PROXY_HOST_FALLBACK See Also: Constant Field Values HTTP_PROXY_USER private static final java.lang.String HTTP_PROXY_USER See Also: Constant Field Values HTTP_PROXY_PASSWORD private static final java.lang.String HTTP_PROXY_PASSWORD See Also: Constant Field Values HTTP_PROXY_PORT private static final java.lang.String HTTP_PROXY_PORT See Also: Constant Field Values HTTP_PROXY_PORT_FALLBACK private static final java.lang.String HTTP_PROXY_PORT_FALLBACK See Also: Constant Field Values HTTP_CONNECTION_TIMEOUT private static final java.lang.String HTTP_CONNECTION_TIMEOUT See Also: Constant Field Values HTTP_READ_TIMEOUT private static final java.lang.String HTTP_READ_TIMEOUT See Also: Constant Field Values HTTP_STREAMING_READ_TIMEOUT private static final java.lang.String HTTP_STREAMING_READ_TIMEOUT See Also: Constant Field Values HTTP_RETRY_COUNT private static final java.lang.String HTTP_RETRY_COUNT See Also: Constant Field Values HTTP_RETRY_INTERVAL_SECS private static final java.lang.String HTTP_RETRY_INTERVAL_SECS See Also: Constant Field Values OAUTH_CONSUMER_KEY private static final java.lang.String OAUTH_CONSUMER_KEY See Also: Constant Field Values OAUTH_CONSUMER_SECRET private static final java.lang.String OAUTH_CONSUMER_SECRET See Also: Constant Field Values OAUTH_ACCESS_TOKEN private static final java.lang.String OAUTH_ACCESS_TOKEN See Also: Constant Field Values OAUTH_ACCESS_TOKEN_SECRET private static final java.lang.String OAUTH_ACCESS_TOKEN_SECRET See Also: Constant Field Values OAUTH2_TOKEN_TYPE private static final java.lang.String OAUTH2_TOKEN_TYPE See Also: Constant Field Values OAUTH2_ACCESS_TOKEN private static final java.lang.String OAUTH2_ACCESS_TOKEN See Also: Constant Field Values OAUTH2_SCOPE private static final java.lang.String OAUTH2_SCOPE See Also: Constant Field Values OAUTH_REQUEST_TOKEN_URL private static final java.lang.String OAUTH_REQUEST_TOKEN_URL See Also: Constant Field Values OAUTH_AUTHORIZATION_URL private static final java.lang.String OAUTH_AUTHORIZATION_URL See Also: Constant Field Values OAUTH_ACCESS_TOKEN_URL private static final java.lang.String OAUTH_ACCESS_TOKEN_URL See Also: Constant Field Values OAUTH_AUTHENTICATION_URL private static final java.lang.String OAUTH_AUTHENTICATION_URL See Also: Constant Field Values OAUTH2_TOKEN_URL private static final java.lang.String OAUTH2_TOKEN_URL See Also: Constant Field Values OAUTH2_INVALIDATE_TOKEN_URL private static final java.lang.String OAUTH2_INVALIDATE_TOKEN_URL See Also: Constant Field Values REST_BASE_URL private static final java.lang.String REST_BASE_URL See Also: Constant Field Values STREAM_BASE_URL private static final java.lang.String STREAM_BASE_URL See Also: Constant Field Values USER_STREAM_BASE_URL private static final java.lang.String USER_STREAM_BASE_URL See Also: Constant Field Values SITE_STREAM_BASE_URL private static final java.lang.String SITE_STREAM_BASE_URL See Also: Constant Field Values ASYNC_NUM_THREADS private static final java.lang.String ASYNC_NUM_THREADS See Also: Constant Field Values ASYNC_DAEMON_ENABLED private static final java.lang.String ASYNC_DAEMON_ENABLED See Also: Constant Field Values CONTRIBUTING_TO private static final java.lang.String CONTRIBUTING_TO See Also: Constant Field Values ASYNC_DISPATCHER_IMPL private static final java.lang.String ASYNC_DISPATCHER_IMPL See Also: Constant Field Values INCLUDE_MY_RETWEET private static final java.lang.String INCLUDE_MY_RETWEET See Also: Constant Field Values INCLUDE_ENTITIES private static final java.lang.String INCLUDE_ENTITIES See Also: Constant Field Values LOGGER_FACTORY private static final java.lang.String LOGGER_FACTORY See Also: Constant Field Values JSON_STORE_ENABLED private static final java.lang.String JSON_STORE_ENABLED See Also: Constant Field Values MBEAN_ENABLED private static final java.lang.String MBEAN_ENABLED See Also: Constant Field Values STREAM_USER_REPLIES_ALL private static final java.lang.String STREAM_USER_REPLIES_ALL See Also: Constant Field Values STREAM_USER_WITH_FOLLOWINGS private static final java.lang.String STREAM_USER_WITH_FOLLOWINGS See Also: Constant Field Values STREAM_STALL_WARNINGS_ENABLED private static final java.lang.String STREAM_STALL_WARNINGS_ENABLED See Also: Constant Field Values APPLICATION_ONLY_AUTH_ENABLED private static final java.lang.String APPLICATION_ONLY_AUTH_ENABLED See Also: Constant Field Values MEDIA_PROVIDER private static final java.lang.String MEDIA_PROVIDER See Also: Constant Field Values MEDIA_PROVIDER_API_KEY private static final java.lang.String MEDIA_PROVIDER_API_KEY See Also: Constant Field Values MEDIA_PROVIDER_PARAMETERS private static final java.lang.String MEDIA_PROVIDER_PARAMETERS See Also: Constant Field Values serialVersionUID private static final long serialVersionUID See Also: Constant Field Values OAuth2Scope private java.lang.String OAuth2Scope Constructor Detail PropertyConfiguration public PropertyConfiguration(java.io.InputStream is) PropertyConfiguration public PropertyConfiguration(java.util.Properties props) PropertyConfiguration public PropertyConfiguration(java.util.Properties props, java.lang.String treePath) PropertyConfiguration PropertyConfiguration(java.lang.String treePath) PropertyConfiguration PropertyConfiguration() Creates a root PropertyConfiguration. This constructor is equivalent to new PropertyConfiguration("/"). Method Detail notNull private boolean notNull(java.util.Properties props, java.lang.String prefix, java.lang.String name) loadProperties private boolean loadProperties(java.util.Properties props, java.lang.String path) loadProperties private boolean loadProperties(java.util.Properties props, java.io.InputStream is) normalize private void normalize(java.util.Properties props) setFieldsWithTreePath private void setFieldsWithTreePath(java.util.Properties props, java.lang.String treePath) passing "/foo/bar" as treePath will result: 1. load [twitter4j.]restBaseURL 2. override the value with foo.[twitter4j.]restBaseURL 3. override the value with foo.bar.[twitter4j.]restBaseURL Parameters: props - properties to be loaded treePath - the path setFieldsWithPrefix private void setFieldsWithPrefix(java.util.Properties props, java.lang.String prefix) getBoolean boolean getBoolean(java.util.Properties props, java.lang.String prefix, java.lang.String name) getIntProperty int getIntProperty(java.util.Properties props, java.lang.String prefix, java.lang.String name) getLongProperty long getLongProperty(java.util.Properties props, java.lang.String prefix, java.lang.String name) getString java.lang.String getString(java.util.Properties props, java.lang.String prefix, java.lang.String name) readResolve protected java.lang.Object readResolve() throws java.io.ObjectStreamException Overrides: readResolve in class ConfigurationBase Throws: java.io.ObjectStreamException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method PropertyConfigurationFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="PropertyConfigurationFactory"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.conf Class PropertyConfigurationFactory java.lang.Object twitter4j.conf.PropertyConfigurationFactory All Implemented Interfaces: ConfigurationFactory class PropertyConfigurationFactory extends java.lang.Object implements ConfigurationFactory ConfigurationFactory implementation for PropertyConfiguration. Currently getInstance calls concrete constructor each time. No caching at all. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private static PropertyConfiguration ROOT_CONFIGURATION  Constructor Summary Constructors  Constructor and Description PropertyConfigurationFactory()  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void dispose() clean up resources acquired by this factory. Configuration getInstance() returns the root configuration Configuration getInstance(java.lang.String configTreePath) returns the configuration specified by the path Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail ROOT_CONFIGURATION private static final PropertyConfiguration ROOT_CONFIGURATION Constructor Detail PropertyConfigurationFactory PropertyConfigurationFactory() Method Detail getInstance public Configuration getInstance() Description copied from interface: ConfigurationFactory returns the root configuration Specified by: getInstance in interface ConfigurationFactory Returns: root configuration getInstance public Configuration getInstance(java.lang.String configTreePath) Description copied from interface: ConfigurationFactory returns the configuration specified by the path Specified by: getInstance in interface ConfigurationFactory Parameters: configTreePath - the path Returns: the configuratoin dispose public void dispose() Description copied from interface: ConfigurationFactory clean up resources acquired by this factory. Specified by: dispose in interface ConfigurationFactory Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Query.ResultType <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Query.ResultType"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method twitter4j Enum Query.ResultType java.lang.Object java.lang.Enum<Query.ResultType> twitter4j.Query.ResultType All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<Query.ResultType> Enclosing class: Query public static enum Query.ResultType extends java.lang.Enum<Query.ResultType> Enum Constant Summary Enum Constants  Enum Constant and Description mixed  popular  recent  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static Query.ResultType valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. static Query.ResultType[] values() Returns an array containing the constants of this enum type, in the order they are declared. Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait Enum Constant Detail popular public static final Query.ResultType popular mixed public static final Query.ResultType mixed recent public static final Query.ResultType recent Method Detail values public static Query.ResultType[] values() Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (Query.ResultType c : Query.ResultType.values())   System.out.println(c); Returns: an array containing the constants of this enum type, in the order they are declared valueOf public static Query.ResultType valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: java.lang.IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method Query.Unit <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Query.Unit"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method twitter4j Enum Query.Unit java.lang.Object java.lang.Enum<Query.Unit> twitter4j.Query.Unit All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<Query.Unit> Enclosing class: Query public static enum Query.Unit extends java.lang.Enum<Query.Unit> Enum Constant Summary Enum Constants  Enum Constant and Description km  mi  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static Query.Unit valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. static Query.Unit[] values() Returns an array containing the constants of this enum type, in the order they are declared. Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait Enum Constant Detail mi public static final Query.Unit mi km public static final Query.Unit km Method Detail values public static Query.Unit[] values() Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (Query.Unit c : Query.Unit.values())   System.out.println(c); Returns: an array containing the constants of this enum type, in the order they are declared valueOf public static Query.Unit valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: java.lang.IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method Query <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Query"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":9,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":42,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"],32:["t6","Deprecated Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class Query java.lang.Object twitter4j.Query All Implemented Interfaces: java.io.Serializable public final class Query extends java.lang.Object implements java.io.Serializable A data class represents search query. An instance of this class is NOT thread safe. Instances can be shared across threads, but should not be mutated while a search is ongoing. Author: Yusuke Yamamoto - yusuke at mac.com See Also: GET search | Twitter Developers, Twitter API / Search Operators, Serialized Form Nested Class Summary Nested Classes  Modifier and Type Class and Description static class  Query.ResultType  static class  Query.Unit  Field Summary Fields  Modifier and Type Field and Description private int count  private java.lang.String geocode  static Query.Unit KILOMETERS  private java.lang.String lang  private java.lang.String locale  private long maxId  static Query.Unit MILES  static Query.ResultType MIXED mixed: Include both popular and real time results in the response. private java.lang.String nextPageQuery  static Query.ResultType POPULAR popular: return only the most popular results in the response. private java.lang.String query  static Query.ResultType RECENT recent: return only the most recent results in the response private Query.ResultType resultType  private static long serialVersionUID  private java.lang.String since  private long sinceId  private java.lang.String until  private static HttpParameter WITH_TWITTER_USER_ID  Constructor Summary Constructors  Constructor and Description Query()  Query(java.lang.String query)  Method Summary All Methods Static Methods Instance Methods Concrete Methods Deprecated Methods  Modifier and Type Method and Description private void appendParameter(java.lang.String name, long value, java.util.List<HttpParameter> params)  private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params)  (package private) HttpParameter[] asHttpParameterArray()  Query count(int count) sets the number of tweets to return per page, up to a max of 100 (package private) static Query createWithNextPageQuery(java.lang.String nextPageQuery)  boolean equals(java.lang.Object o)  Query geoCode(GeoLocation location, double radius, java.lang.String unit) returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile int getCount() Returns the number of tweets to return per page, up to a max of 100 java.lang.String getGeocode() Returns the specified geocode java.lang.String getLang() Returns the lang java.lang.String getLocale() Returns the language of the query you are sending (only ja is currently effective). long getMaxId() Returns tweets with status ids less than the given id. java.lang.String getQuery() Returns the specified query Query.ResultType getResultType() Returns resultType java.lang.String getSince() Returns tweets with since the given date. long getSinceId() returns sinceId java.lang.String getUntil() Returns until int hashCode()  Query lang(java.lang.String lang) restricts tweets to the given language, given by an ISO 639-1 code Query locale(java.lang.String locale) Specify the language of the query you are sending (only ja is currently effective). Query maxId(long maxId) If specified, returns tweets with status ids less than the given id. (package private) java.lang.String nextPage()  Query query(java.lang.String query) Sets the query string Query resultType(Query.ResultType resultType) If specified, returns tweets included popular or real time or both in the response void setCount(int count) sets the number of tweets to return per page, up to a max of 100 void setGeoCode(GeoLocation location, double radius, Query.Unit unit) returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile void setGeoCode(GeoLocation location, double radius, java.lang.String unit) Deprecated.  use setGeoCode(GeoLocation, double, twitter4j.Query.Unit) instead void setLang(java.lang.String lang) restricts tweets to the given language, given by an ISO 639-1 code void setLocale(java.lang.String locale) Specify the language of the query you are sending (only ja is currently effective). void setMaxId(long maxId) If specified, returns tweets with status ids less than the given id. void setQuery(java.lang.String query) Sets the query string void setResultType(Query.ResultType resultType) Default value is Query.MIXED if parameter not specified void setSince(java.lang.String since) If specified, returns tweets with since the given date. void setSinceId(long sinceId) returns tweets with status ids greater than the given id. void setUntil(java.lang.String until) If specified, returns tweets with generated before the given date. Query since(java.lang.String since) If specified, returns tweets with since the given date. Query sinceId(long sinceId) returns tweets with status ids greater than the given id. java.lang.String toString()  Query until(java.lang.String until) If specified, returns tweets with generated before the given date. Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values query private java.lang.String query lang private java.lang.String lang locale private java.lang.String locale maxId private long maxId count private int count since private java.lang.String since sinceId private long sinceId geocode private java.lang.String geocode until private java.lang.String until resultType private Query.ResultType resultType nextPageQuery private java.lang.String nextPageQuery MILES public static final Query.Unit MILES KILOMETERS public static final Query.Unit KILOMETERS MIXED public static final Query.ResultType MIXED mixed: Include both popular and real time results in the response. POPULAR public static final Query.ResultType POPULAR popular: return only the most popular results in the response. RECENT public static final Query.ResultType RECENT recent: return only the most recent results in the response WITH_TWITTER_USER_ID private static final HttpParameter WITH_TWITTER_USER_ID Constructor Detail Query public Query() Query public Query(java.lang.String query) Method Detail createWithNextPageQuery static Query createWithNextPageQuery(java.lang.String nextPageQuery) getQuery public java.lang.String getQuery() Returns the specified query Returns: query setQuery public void setQuery(java.lang.String query) Sets the query string Parameters: query - the query string See Also: GET search | Twitter Developers, Twitter API / Search Operators query public Query query(java.lang.String query) Sets the query string Parameters: query - the query string Returns: the instance Since: Twitter4J 2.1.0 See Also: GET search | Twitter Developers, Twitter API / Search Operators getLang public java.lang.String getLang() Returns the lang Returns: lang setLang public void setLang(java.lang.String lang) restricts tweets to the given language, given by an ISO 639-1 code Parameters: lang - an ISO 639-1 code lang public Query lang(java.lang.String lang) restricts tweets to the given language, given by an ISO 639-1 code Parameters: lang - an ISO 639-1 code Returns: the instance Since: Twitter4J 2.1.0 getLocale public java.lang.String getLocale() Returns the language of the query you are sending (only ja is currently effective). This is intended for language-specific clients and the default should work in the majority of cases. Returns: locale Since: Twitter4J 2.1.1 setLocale public void setLocale(java.lang.String locale) Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific clients and the default should work in the majority of cases. Parameters: locale - the locale Since: Twitter4J 2.1.1 locale public Query locale(java.lang.String locale) Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific clients and the default should work in the majority of cases. Parameters: locale - the locale Returns: the instance Since: Twitter4J 2.1.1 getMaxId public long getMaxId() Returns tweets with status ids less than the given id. Returns: maxId Since: Twitter4J 2.1.1 setMaxId public void setMaxId(long maxId) If specified, returns tweets with status ids less than the given id. Parameters: maxId - maxId Since: Twitter4J 2.1.1 maxId public Query maxId(long maxId) If specified, returns tweets with status ids less than the given id. Parameters: maxId - maxId Returns: this instance Since: Twitter4J 2.1.1 getCount public int getCount() Returns the number of tweets to return per page, up to a max of 100 Returns: count setCount public void setCount(int count) sets the number of tweets to return per page, up to a max of 100 Parameters: count - the number of tweets to return per page count public Query count(int count) sets the number of tweets to return per page, up to a max of 100 Parameters: count - the number of tweets to return per page Returns: the instance Since: Twitter4J 2.1.0 getSince public java.lang.String getSince() Returns tweets with since the given date. Date should be formatted as YYYY-MM-DD Returns: since Since: Twitter4J 2.1.1 setSince public void setSince(java.lang.String since) If specified, returns tweets with since the given date. Date should be formatted as YYYY-MM-DD Parameters: since - since Since: Twitter4J 2.1.1 since public Query since(java.lang.String since) If specified, returns tweets with since the given date. Date should be formatted as YYYY-MM-DD Parameters: since - since Returns: since Since: Twitter4J 2.1.1 getSinceId public long getSinceId() returns sinceId Returns: sinceId setSinceId public void setSinceId(long sinceId) returns tweets with status ids greater than the given id. Parameters: sinceId - returns tweets with status ids greater than the given id sinceId public Query sinceId(long sinceId) returns tweets with status ids greater than the given id. Parameters: sinceId - returns tweets with status ids greater than the given id Returns: the instance Since: Twitter4J 2.1.0 getGeocode public java.lang.String getGeocode() Returns the specified geocode Returns: geocode setGeoCode public void setGeoCode(GeoLocation location, double radius, Query.Unit unit) returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile Parameters: location - geo location radius - radius unit - Query.MILES or Query.KILOMETERS Since: Twitter4J 4.0.1 setGeoCode public void setGeoCode(GeoLocation location, double radius, java.lang.String unit) Deprecated. use setGeoCode(GeoLocation, double, twitter4j.Query.Unit) instead returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile Parameters: location - geo location radius - radius unit - Query.MILES or Query.KILOMETERS geoCode public Query geoCode(GeoLocation location, double radius, java.lang.String unit) returns tweets by users located within a given radius of the given latitude/longitude, where the user's location is taken from their Twitter profile Parameters: location - geo location radius - radius unit - Query.MILES or Query.KILOMETERS Returns: the instance Since: Twitter4J 2.1.0 getUntil public java.lang.String getUntil() Returns until Returns: until Since: Twitter4J 2.1.1 setUntil public void setUntil(java.lang.String until) If specified, returns tweets with generated before the given date. Date should be formatted as YYYY-MM-DD Parameters: until - until Since: Twitter4J 2.1.1 until public Query until(java.lang.String until) If specified, returns tweets with generated before the given date. Date should be formatted as YYYY-MM-DD Parameters: until - until Returns: the instance Since: Twitter4J 2.1.1 getResultType public Query.ResultType getResultType() Returns resultType Returns: the resultType Since: Twitter4J 2.1.3 setResultType public void setResultType(Query.ResultType resultType) Default value is Query.MIXED if parameter not specified Parameters: resultType - Query.MIXED or Query.POPULAR or Query.RECENT Since: Twitter4J 2.1.3 resultType public Query resultType(Query.ResultType resultType) If specified, returns tweets included popular or real time or both in the response Parameters: resultType - resultType Returns: the instance Since: Twitter4J 2.1.3 asHttpParameterArray HttpParameter[] asHttpParameterArray() appendParameter private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params) appendParameter private void appendParameter(java.lang.String name, long value, java.util.List<HttpParameter> params) nextPage java.lang.String nextPage() equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method QueryResult <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="QueryResult"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface QueryResult All Superinterfaces: java.io.Serializable, TwitterResponse public interface QueryResult extends TwitterResponse, java.io.Serializable A data interface representing search API response Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description double getCompletedIn()  int getCount()  long getMaxId()  java.lang.String getQuery()  java.lang.String getRefreshURL()  long getSinceId()  java.util.List<Status> getTweets()  boolean hasNext() test if there is next page Query nextQuery() Returns a Query instance to fetch next page or null if there is no next page. Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getSinceId long getSinceId() getMaxId long getMaxId() getRefreshURL java.lang.String getRefreshURL() getCount int getCount() getCompletedIn double getCompletedIn() getQuery java.lang.String getQuery() getTweets java.util.List<Status> getTweets() nextQuery Query nextQuery() Returns a Query instance to fetch next page or null if there is no next page. Returns: Query instance to fetch next page Since: Twitter4J 3.0.0 hasNext boolean hasNext() test if there is next page Returns: if there is next page Since: Twitter4J 3.0.0 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method RateLimitStatus <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="RateLimitStatus"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface RateLimitStatus All Superinterfaces: java.io.Serializable public interface RateLimitStatus extends java.io.Serializable A data interface representing Twitter REST API's rate limit status Author: Yusuke Yamamoto - yusuke at mac.com See Also: Rate Limiting | Twitter Developers Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getLimit() Returns the current limit in effect This value is identical to the "X-Rate-Limit-Limit" response header. int getRemaining() Returns the remaining number of API requests available. This value is identical to the "X-Rate-Limit-Remaining" response header. int getResetTimeInSeconds() Returns the seconds the current rate limiting period ends. This should be a same as getResetTime().getTime()/1000. int getSecondsUntilReset() Returns the amount of seconds until the current rate limiting period ends. This is a value provided/calculated only by Twitter4J for handiness and not a part of the twitter API spec. Method Detail getRemaining int getRemaining() Returns the remaining number of API requests available. This value is identical to the "X-Rate-Limit-Remaining" response header. Returns: the remaining number of API requests available Since: Twitter4J 3.0.0 getLimit int getLimit() Returns the current limit in effect This value is identical to the "X-Rate-Limit-Limit" response header. Returns: the current limit in effect getResetTimeInSeconds int getResetTimeInSeconds() Returns the seconds the current rate limiting period ends. This should be a same as getResetTime().getTime()/1000. Returns: the seconds the current rate limiting period ends Since: Twitter4J 2.0.9 getSecondsUntilReset int getSecondsUntilReset() Returns the amount of seconds until the current rate limiting period ends. This is a value provided/calculated only by Twitter4J for handiness and not a part of the twitter API spec. Returns: the amount of seconds until next rate limiting period Since: Twitter4J 2.1.0 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method RateLimitStatusEvent <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="RateLimitStatusEvent"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class RateLimitStatusEvent java.lang.Object java.util.EventObject twitter4j.RateLimitStatusEvent All Implemented Interfaces: java.io.Serializable public final class RateLimitStatusEvent extends java.util.EventObject A data interface representing Twitter REST API's rate limit status Author: Yusuke Yamamoto - yusuke at mac.com See Also: Rate Limiting | Twitter Developers, Serialized Form Field Summary Fields  Modifier and Type Field and Description private boolean isAccountRateLimitStatus  private RateLimitStatus rateLimitStatus  private static long serialVersionUID  Fields inherited from class java.util.EventObject source Constructor Summary Constructors  Constructor and Description RateLimitStatusEvent(java.lang.Object source, RateLimitStatus rateLimitStatus, boolean isAccountRateLimitStatus)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description RateLimitStatus getRateLimitStatus()  boolean isAccountRateLimitStatus()  boolean isIPRateLimitStatus()  Methods inherited from class java.util.EventObject getSource, toString Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values rateLimitStatus private final RateLimitStatus rateLimitStatus isAccountRateLimitStatus private final boolean isAccountRateLimitStatus Constructor Detail RateLimitStatusEvent RateLimitStatusEvent(java.lang.Object source, RateLimitStatus rateLimitStatus, boolean isAccountRateLimitStatus) Method Detail getRateLimitStatus public RateLimitStatus getRateLimitStatus() isAccountRateLimitStatus public boolean isAccountRateLimitStatus() isIPRateLimitStatus public boolean isIPRateLimitStatus() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method RateLimitStatusListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="RateLimitStatusListener"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface RateLimitStatusListener public interface RateLimitStatusListener Author: Andrew Hedges - andrew.hedges at gmail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void onRateLimitReached(RateLimitStatusEvent event) Called when the account or IP address is hitting the rate limit. onRateLimitStatus will be also called before this event. void onRateLimitStatus(RateLimitStatusEvent event) Called when the response contains rate limit status. Method Detail onRateLimitStatus void onRateLimitStatus(RateLimitStatusEvent event) Called when the response contains rate limit status. Parameters: event - rate limit status event. onRateLimitReached void onRateLimitReached(RateLimitStatusEvent event) Called when the account or IP address is hitting the rate limit. onRateLimitStatus will be also called before this event. Parameters: event - rate limit status event. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method RawStreamListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="RawStreamListener"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface RawStreamListener All Superinterfaces: StreamListener public interface RawStreamListener extends StreamListener Since: Twitter4J 3.0.2 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void onMessage(java.lang.String rawString)  Methods inherited from interface twitter4j.StreamListener onException Method Detail onMessage void onMessage(java.lang.String rawString) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Relationship <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Relationship"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Relationship All Superinterfaces: java.io.Serializable, TwitterResponse public interface Relationship extends TwitterResponse, java.io.Serializable A data interface that has detailed information about a relationship between two users Since: Twitter4J 2.1.0 Author: Perry Sakkaris - psakkaris at gmail.com See Also: GET friendships/show | Twitter Developers Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description boolean canSourceDm() Checks if source user can send dm to target user long getSourceUserId() Returns the source user id java.lang.String getSourceUserScreenName() Returns the source user screen name long getTargetUserId() Returns the target user id java.lang.String getTargetUserScreenName() Returns the target user screen name boolean isSourceBlockingTarget() Returns if the source user is blocking the target user boolean isSourceFollowedByTarget() Checks if source user is being followed by target user boolean isSourceFollowingTarget() Checks if source user is following target user boolean isSourceMutingTarget() Returns id the source user is muting the target user boolean isSourceNotificationsEnabled() Checks if the source user has enabled notifications for updates of the target user boolean isSourceWantRetweets() Checks if the retweets from the target user enabled boolean isTargetFollowedBySource() Checks if target user is being followed by source user. This method is equivalent to isSourceFollowingTarget(). boolean isTargetFollowingSource() Checks if target user is following source user. This method is equivalent to isSourceFollowedByTarget(). Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getSourceUserId long getSourceUserId() Returns the source user id Returns: the source user id getTargetUserId long getTargetUserId() Returns the target user id Returns: target user id isSourceBlockingTarget boolean isSourceBlockingTarget() Returns if the source user is blocking the target user Returns: if the source is blocking the target isSourceMutingTarget boolean isSourceMutingTarget() Returns id the source user is muting the target user Returns: if the source is muting the target getSourceUserScreenName java.lang.String getSourceUserScreenName() Returns the source user screen name Returns: returns the source user screen name getTargetUserScreenName java.lang.String getTargetUserScreenName() Returns the target user screen name Returns: the target user screen name isSourceFollowingTarget boolean isSourceFollowingTarget() Checks if source user is following target user Returns: true if source user is following target user isTargetFollowingSource boolean isTargetFollowingSource() Checks if target user is following source user. This method is equivalent to isSourceFollowedByTarget(). Returns: true if target user is following source user isSourceFollowedByTarget boolean isSourceFollowedByTarget() Checks if source user is being followed by target user Returns: true if source user is being followed by target user isTargetFollowedBySource boolean isTargetFollowedBySource() Checks if target user is being followed by source user. This method is equivalent to isSourceFollowingTarget(). Returns: true if target user is being followed by source user canSourceDm boolean canSourceDm() Checks if source user can send dm to target user Returns: true if source user can send dm to target user Since: Twitter4J 3.0.5 isSourceNotificationsEnabled boolean isSourceNotificationsEnabled() Checks if the source user has enabled notifications for updates of the target user Returns: true if source user enabled notifications for target user isSourceWantRetweets boolean isSourceWantRetweets() Checks if the retweets from the target user enabled Returns: true if the retweets from the target user enabled Since: Twitter4J 3.0.3 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method RequestToken <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="RequestToken"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.auth Class RequestToken java.lang.Object twitter4j.auth.OAuthToken twitter4j.auth.RequestToken All Implemented Interfaces: java.io.Serializable public final class RequestToken extends OAuthToken implements java.io.Serializable Author: Yusuke Yamamoto - yusuke at mac.com representing unauthorized Request Token which is passed to the service provider when acquiring the authorized Access Token See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private Configuration conf  private OAuthSupport oauth  private static long serialVersionUID  Constructor Summary Constructors  Constructor and Description RequestToken(HttpResponse res, OAuthSupport oauth)  RequestToken(java.lang.String token, java.lang.String tokenSecret)  RequestToken(java.lang.String token, java.lang.String tokenSecret, OAuthSupport oauth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description java.lang.String getAuthenticationURL()  java.lang.String getAuthorizationURL()  Methods inherited from class twitter4j.auth.OAuthToken equals, getParameter, getSecretKeySpec, getToken, getTokenSecret, hashCode, setSecretKeySpec, toString Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values conf private final Configuration conf oauth private OAuthSupport oauth Constructor Detail RequestToken RequestToken(HttpResponse res, OAuthSupport oauth) throws TwitterException Throws: TwitterException RequestToken public RequestToken(java.lang.String token, java.lang.String tokenSecret) RequestToken RequestToken(java.lang.String token, java.lang.String tokenSecret, OAuthSupport oauth) Method Detail getAuthorizationURL public java.lang.String getAuthorizationURL() Returns: authorization URL since Twitter4J 2.0.0 getAuthenticationURL public java.lang.String getAuthenticationURL() Returns: authentication URL since Twitter4J 2.0.10 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method ResponseList <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="ResponseList"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface ResponseList<T> All Superinterfaces: java.util.Collection<T>, java.lang.Iterable<T>, java.util.List<T>, java.io.Serializable, TwitterResponse All Known Subinterfaces: PagableResponseList<T> public interface ResponseList<T> extends TwitterResponse, java.util.List<T> List of TwitterResponse. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description RateLimitStatus getRateLimitStatus() Returns the current rate limit status if available. Methods inherited from interface twitter4j.TwitterResponse getAccessLevel Methods inherited from interface java.util.List add, add, addAll, addAll, clear, contains, containsAll, equals, get, hashCode, indexOf, isEmpty, iterator, lastIndexOf, listIterator, listIterator, remove, remove, removeAll, replaceAll, retainAll, set, size, sort, spliterator, subList, toArray, toArray Methods inherited from interface java.util.Collection parallelStream, removeIf, stream Methods inherited from interface java.lang.Iterable forEach Method Detail getRateLimitStatus RateLimitStatus getRateLimitStatus() Description copied from interface: TwitterResponse Returns the current rate limit status if available. Specified by: getRateLimitStatus in interface TwitterResponse Returns: current rate limit status Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SavedSearch <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SavedSearch"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface SavedSearch All Superinterfaces: java.lang.Comparable<SavedSearch>, java.io.Serializable, TwitterResponse public interface SavedSearch extends java.lang.Comparable<SavedSearch>, TwitterResponse, java.io.Serializable A data interface representing a Saved Search Since: Twitter4J 2.0.8 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.util.Date getCreatedAt()  long getId()  java.lang.String getName()  int getPosition()  java.lang.String getQuery()  Methods inherited from interface java.lang.Comparable compareTo Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getCreatedAt java.util.Date getCreatedAt() getQuery java.lang.String getQuery() getPosition int getPosition() getName java.lang.String getName() getId long getId() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SavedSearchesResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SavedSearchesResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SavedSearchesResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface SavedSearchesResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description SavedSearch createSavedSearch(java.lang.String query) Creates a saved search for the authenticated user. SavedSearch destroySavedSearch(long id) Destroys a saved search for the authenticated user. ResponseList<SavedSearch> getSavedSearches() Returns the authenticated user's saved search queries. SavedSearch showSavedSearch(long id) Retrieve the data for a saved search owned by the authenticating user specified by the given id. Method Detail getSavedSearches ResponseList<SavedSearch> getSavedSearches() throws TwitterException Returns the authenticated user's saved search queries. This method calls https://api.twitter.com/1.1/saved_searches.json Returns: Returns an array of numeric user ids the authenticating user is blocking. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.8 See Also: GET saved_searches | Twitter Developers showSavedSearch SavedSearch showSavedSearch(long id) throws TwitterException Retrieve the data for a saved search owned by the authenticating user specified by the given id. This method calls https://api.twitter.com/1.1/saved_searches/show/:id.json Parameters: id - The id of the saved search to be retrieved. Returns: the data for a saved search Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.8 See Also: GET saved_searches/show/:id | Twitter Developers createSavedSearch SavedSearch createSavedSearch(java.lang.String query) throws TwitterException Creates a saved search for the authenticated user. This method calls https://api.twitter.com/1.1/saved_searches/saved_searches/create.json Parameters: query - the query string Returns: the data for a created saved search Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.8 See Also: POST saved_searches/create | Twitter Developers destroySavedSearch SavedSearch destroySavedSearch(long id) throws TwitterException Destroys a saved search for the authenticated user. The search specified by id must be owned by the authenticating user. This method calls https://api.twitter.com/1.1/saved_searches/destroy/id.json Parameters: id - The id of the saved search to be deleted. Returns: the data for a destroyed saved search Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.8 See Also: POST saved_searches/destroy/:id | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SavedSearchesResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SavedSearchesResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SavedSearchesResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface SavedSearchesResourcesAsync Since: Twitter4J 3.0.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void createSavedSearch(java.lang.String query) Creates a saved search for the authenticated user. void destroySavedSearch(int id) Destroys a saved search for the authenticated user. void getSavedSearches() Returns the authenticated user's saved search queries. void showSavedSearch(int id) Retrieve the data for a saved search owned by the authenticating user specified by the given id. Method Detail getSavedSearches void getSavedSearches() Returns the authenticated user's saved search queries. This method calls https://api.twitter.com/1.1/saved_searches.json blocking. Since: Twitter4J 3.0.0 See Also: GET saved_searches | Twitter Developers showSavedSearch void showSavedSearch(int id) Retrieve the data for a saved search owned by the authenticating user specified by the given id. This method calls https://api.twitter.com/1.1/saved_searches/show/:id.json Parameters: id - The id of the saved search to be retrieved. Since: Twitter4J 3.0.0 See Also: GET saved_searches/show/:id | Twitter Developers createSavedSearch void createSavedSearch(java.lang.String query) Creates a saved search for the authenticated user. This method calls https://api.twitter.com/1.1/saved_searches/saved_searches/create.json Parameters: query - the query string Since: Twitter4J 3.0.0 See Also: POST saved_searches/create | Twitter Developers destroySavedSearch void destroySavedSearch(int id) Destroys a saved search for the authenticated user. The search specified by id must be owned by the authenticating user. This method calls https://api.twitter.com/1.1/saved_searches/destroy/id.json Parameters: id - The id of the saved search to be deleted. Since: Twitter4J 3.0.0 See Also: POST saved_searches/destroy/:id | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Scopes <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Scopes"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Scopes All Superinterfaces: java.io.Serializable public interface Scopes extends java.io.Serializable A data interface representing targeting scopes applied to a status. Since: Twitter4J 3.0.6 Author: Aaron Rankin - aaron at sproutsocial.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String[] getPlaceIds() Returns the place_ids that identify the scope of the status. Method Detail getPlaceIds java.lang.String[] getPlaceIds() Returns the place_ids that identify the scope of the status. Returns: the place_ids that identify the scope of the status. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SearchResource <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SearchResource"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SearchResource All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface SearchResource Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description QueryResult search(Query query) Returns tweets that match a specified query. Method Detail search QueryResult search(Query query) throws TwitterException Returns tweets that match a specified query. This method calls http://search.twitter.com/search.json Parameters: query - - the search condition Returns: the result Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 1.1.7 See Also: GET search | Twitter Developers, Twitter API / Search Operators Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SearchResourceAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SearchResourceAsync"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SearchResourceAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface SearchResourceAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void search(Query query) Returns tweets that match a specified query. Method Detail search void search(Query query) Returns tweets that match a specified query. This method calls http://search.twitter.com/search.json Parameters: query - - the search condition Since: Twitter4J 1.1.7 See Also: GET search | Twitter Developers, Twitter API / Search Operators Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SiteStreamsAdapter <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SiteStreamsAdapter"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class SiteStreamsAdapter java.lang.Object twitter4j.SiteStreamsAdapter All Implemented Interfaces: SiteStreamsListener, StreamListener public class SiteStreamsAdapter extends java.lang.Object implements SiteStreamsListener Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Constructor Summary Constructors  Constructor and Description SiteStreamsAdapter()  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void onBlock(long forUser, User source, User blockedUser)  void onDeletionNotice(long forUser, long directMessageId, long userId)  void onDeletionNotice(long forUser, StatusDeletionNotice statusDeletionNotice)  void onDirectMessage(long forUser, DirectMessage directMessage)  void onDisconnectionNotice(java.lang.String screenName) callback method for StreamController.removeUsers(long[]) void onException(java.lang.Exception ex)  void onFavorite(long forUser, User source, User target, Status favoritedStatus)  void onFavoritedRetweet(User source, User target, Status favoritedStatus)  void onFollow(long forUser, User source, User followedUser)  void onFriendList(long forUser, long[] friendIds)  void onRetweetedRetweet(User source, User target, Status retweetedStatus)  void onStatus(long forUser, Status status)  void onUnblock(long forUser, User source, User unblockedUser)  void onUnfavorite(long forUser, User source, User target, Status unfavoritedStatus)  void onUnfollow(long forUser, User source, User followedUser)  void onUserDeletion(long forUser, long deletedUser)  void onUserListCreation(long forUser, User listOwner, UserList list)  void onUserListDeletion(long forUser, User listOwner, UserList list)  void onUserListMemberAddition(long forUser, User addedUser, User listOwner, UserList list)  void onUserListMemberDeletion(long forUser, User deletedUser, User listOwner, UserList list)  void onUserListSubscription(long forUser, User subscriber, User listOwner, UserList list)  void onUserListUnsubscription(long forUser, User subscriber, User listOwner, UserList list)  void onUserListUpdate(long forUser, User listOwner, UserList list)  void onUserProfileUpdate(long forUser, User updatedUser)  void onUserSuspension(long forUser, long suspendedUser)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail SiteStreamsAdapter public SiteStreamsAdapter() Method Detail onStatus public void onStatus(long forUser, Status status) Specified by: onStatus in interface SiteStreamsListener onDeletionNotice public void onDeletionNotice(long forUser, StatusDeletionNotice statusDeletionNotice) Specified by: onDeletionNotice in interface SiteStreamsListener onFriendList public void onFriendList(long forUser, long[] friendIds) Specified by: onFriendList in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event friendIds - friend ids onFavorite public void onFavorite(long forUser, User source, User target, Status favoritedStatus) Specified by: onFavorite in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event source - source user of the event target - target user of the event favoritedStatus - the status favorited onUnfavorite public void onUnfavorite(long forUser, User source, User target, Status unfavoritedStatus) Specified by: onUnfavorite in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event source - source user of the event target - target user of the event unfavoritedStatus - the status unfavorited onFollow public void onFollow(long forUser, User source, User followedUser) Specified by: onFollow in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event source - source user of the event followedUser - user followed onUnfollow public void onUnfollow(long forUser, User source, User followedUser) Specified by: onUnfollow in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event source - source user of the event followedUser - user unfollowed onDirectMessage public void onDirectMessage(long forUser, DirectMessage directMessage) Specified by: onDirectMessage in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event directMessage - direct message received onDeletionNotice public void onDeletionNotice(long forUser, long directMessageId, long userId) Specified by: onDeletionNotice in interface SiteStreamsListener onUserListMemberAddition public void onUserListMemberAddition(long forUser, User addedUser, User listOwner, UserList list) Specified by: onUserListMemberAddition in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event addedUser - member added listOwner - owner of the list list - the list onUserListMemberDeletion public void onUserListMemberDeletion(long forUser, User deletedUser, User listOwner, UserList list) Specified by: onUserListMemberDeletion in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event deletedUser - member deleted listOwner - owner of the list list - the list onUserListSubscription public void onUserListSubscription(long forUser, User subscriber, User listOwner, UserList list) Specified by: onUserListSubscription in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event subscriber - member subscribed listOwner - owner of the list list - the list onUserListUnsubscription public void onUserListUnsubscription(long forUser, User subscriber, User listOwner, UserList list) Specified by: onUserListUnsubscription in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event subscriber - user subscribed listOwner - owner of the list list - the list onUserListCreation public void onUserListCreation(long forUser, User listOwner, UserList list) Specified by: onUserListCreation in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event listOwner - owner of the list list - the list onUserListUpdate public void onUserListUpdate(long forUser, User listOwner, UserList list) Specified by: onUserListUpdate in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event listOwner - owner of the list list - the list onUserListDeletion public void onUserListDeletion(long forUser, User listOwner, UserList list) Specified by: onUserListDeletion in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event listOwner - owner of the list list - the list onUserProfileUpdate public void onUserProfileUpdate(long forUser, User updatedUser) Specified by: onUserProfileUpdate in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event updatedUser - updated user onUserSuspension public void onUserSuspension(long forUser, long suspendedUser) Specified by: onUserSuspension in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event suspendedUser - suspended user id onUserDeletion public void onUserDeletion(long forUser, long deletedUser) Specified by: onUserDeletion in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event deletedUser - deleted user id onBlock public void onBlock(long forUser, User source, User blockedUser) Specified by: onBlock in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event source - the user user blocked blockedUser - the user got blocked onUnblock public void onUnblock(long forUser, User source, User unblockedUser) Specified by: onUnblock in interface SiteStreamsListener Parameters: forUser - the user id to whom sent the event source - the user unblocked unblockedUser - the user got unblocked onRetweetedRetweet public void onRetweetedRetweet(User source, User target, Status retweetedStatus) Specified by: onRetweetedRetweet in interface SiteStreamsListener Parameters: source - source user of the event target - target user of the event retweetedStatus - status retweeted retweet onFavoritedRetweet public void onFavoritedRetweet(User source, User target, Status favoritedStatus) Specified by: onFavoritedRetweet in interface SiteStreamsListener Parameters: source - source user of the event target - target user of the event favoritedStatus - status favorited retweet onDisconnectionNotice public void onDisconnectionNotice(java.lang.String screenName) Description copied from interface: SiteStreamsListener callback method for StreamController.removeUsers(long[]) Specified by: onDisconnectionNotice in interface SiteStreamsListener Parameters: screenName - notice onException public void onException(java.lang.Exception ex) Specified by: onException in interface SiteStreamsListener Specified by: onException in interface StreamListener Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SiteStreamsImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SiteStreamsImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class SiteStreamsImpl java.lang.Object twitter4j.StatusStreamBase twitter4j.SiteStreamsImpl All Implemented Interfaces: StatusStream final class SiteStreamsImpl extends StatusStreamBase Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested classes/interfaces inherited from class twitter4j.StatusStreamBase StatusStreamBase.StreamEvent Field Summary Fields  Modifier and Type Field and Description private StreamController cs  protected static RawStreamListener[] EMPTY  private static java.lang.ThreadLocal<java.lang.Long> forUser  Fields inherited from class twitter4j.StatusStreamBase CONF, logger Constructor Summary Constructors  Constructor and Description SiteStreamsImpl(Dispatcher dispatcher, HttpResponse response, Configuration conf, StreamController cs)  SiteStreamsImpl(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf, StreamController cs)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void next(StatusListener listener) Reads next status from this stream. void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners)  protected void onBlock(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onClose()  protected void onDelete(JSONObject json, StreamListener[] listeners)  protected void onDirectMessage(JSONObject json, StreamListener[] listeners)  void onDisconnectionNotice(java.lang.String line, StreamListener[] listeners)  void onException(java.lang.Exception ex, StreamListener[] listeners)  protected void onFavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onFavoritedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  protected void onFollow(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onFriends(JSONObject json, StreamListener[] listeners)  protected void onMessage(java.lang.String rawString, RawStreamListener[] listeners)  (package private) void onRetweetedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  protected void onStatus(JSONObject json, StreamListener[] listeners)  protected void onUnblock(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onUnfavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  protected void onUnfollow(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onUserDeletion(long target, StreamListener[] listeners)  protected void onUserListCreation(JSONObject source, JSONObject userList, StreamListener[] listeners)  protected void onUserListDestroyed(JSONObject source, JSONObject userList, StreamListener[] listeners)  protected void onUserListMemberAddition(JSONObject addedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners)  protected void onUserListMemberDeletion(JSONObject deletedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners)  protected void onUserListSubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners)  protected void onUserListUnsubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners)  protected void onUserListUpdated(JSONObject source, JSONObject userList, StreamListener[] listeners)  protected void onUserSuspension(long target, StreamListener[] listeners)  protected void onUserUpdate(JSONObject source, JSONObject target, StreamListener[] listeners)  protected java.lang.String parseLine(java.lang.String line)  Methods inherited from class twitter4j.StatusStreamBase asDirectMessage, asFriendList, asStatus, asUser, asUserList, close, handleNextElement, onException, onLimit, onQuotedTweet, onScrubGeo, onSender, onStallWarning Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail cs private final StreamController cs forUser private static final java.lang.ThreadLocal<java.lang.Long> forUser EMPTY protected static final RawStreamListener[] EMPTY Constructor Detail SiteStreamsImpl SiteStreamsImpl(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf, StreamController cs) throws java.io.IOException Throws: java.io.IOException SiteStreamsImpl SiteStreamsImpl(Dispatcher dispatcher, HttpResponse response, Configuration conf, StreamController cs) throws java.io.IOException Throws: java.io.IOException Method Detail parseLine protected java.lang.String parseLine(java.lang.String line) Overrides: parseLine in class StatusStreamBase onClose protected void onClose() Specified by: onClose in class StatusStreamBase onMessage protected void onMessage(java.lang.String rawString, RawStreamListener[] listeners) throws TwitterException Overrides: onMessage in class StatusStreamBase Throws: TwitterException onStatus protected void onStatus(JSONObject json, StreamListener[] listeners) throws TwitterException Overrides: onStatus in class StatusStreamBase Throws: TwitterException onDelete protected void onDelete(JSONObject json, StreamListener[] listeners) throws JSONException Overrides: onDelete in class StatusStreamBase Throws: JSONException onDirectMessage protected void onDirectMessage(JSONObject json, StreamListener[] listeners) throws TwitterException Overrides: onDirectMessage in class StatusStreamBase Throws: TwitterException onFriends protected void onFriends(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onFriends in class StatusStreamBase Throws: TwitterException JSONException onFavorite protected void onFavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onFavorite in class StatusStreamBase Throws: TwitterException onUnfavorite protected void onUnfavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onUnfavorite in class StatusStreamBase Throws: TwitterException onFollow protected void onFollow(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onFollow in class StatusStreamBase Throws: TwitterException onUnfollow protected void onUnfollow(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onUnfollow in class StatusStreamBase Throws: TwitterException onUserListMemberAddition protected void onUserListMemberAddition(JSONObject addedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListMemberAddition in class StatusStreamBase Throws: TwitterException JSONException onUserListMemberDeletion protected void onUserListMemberDeletion(JSONObject deletedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListMemberDeletion in class StatusStreamBase Throws: TwitterException JSONException onUserListSubscription protected void onUserListSubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListSubscription in class StatusStreamBase Throws: TwitterException JSONException onUserListUnsubscription protected void onUserListUnsubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListUnsubscription in class StatusStreamBase Throws: TwitterException JSONException onUserListCreation protected void onUserListCreation(JSONObject source, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListCreation in class StatusStreamBase Throws: TwitterException JSONException onUserListUpdated protected void onUserListUpdated(JSONObject source, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListUpdated in class StatusStreamBase Throws: TwitterException JSONException onUserListDestroyed protected void onUserListDestroyed(JSONObject source, JSONObject userList, StreamListener[] listeners) throws TwitterException Overrides: onUserListDestroyed in class StatusStreamBase Throws: TwitterException onUserUpdate protected void onUserUpdate(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onUserUpdate in class StatusStreamBase Throws: TwitterException onUserSuspension protected void onUserSuspension(long target, StreamListener[] listeners) throws TwitterException Overrides: onUserSuspension in class StatusStreamBase Throws: TwitterException onUserDeletion protected void onUserDeletion(long target, StreamListener[] listeners) throws TwitterException Overrides: onUserDeletion in class StatusStreamBase Throws: TwitterException onBlock protected void onBlock(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onBlock in class StatusStreamBase Throws: TwitterException onUnblock protected void onUnblock(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onUnblock in class StatusStreamBase Throws: TwitterException onRetweetedRetweet void onRetweetedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onRetweetedRetweet in class StatusStreamBase Throws: TwitterException onFavoritedRetweet void onFavoritedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onFavoritedRetweet in class StatusStreamBase Throws: TwitterException onException public void onException(java.lang.Exception ex, StreamListener[] listeners) Overrides: onException in class StatusStreamBase next public void next(StatusListener listener) throws TwitterException Description copied from interface: StatusStream Reads next status from this stream. Specified by: next in interface StatusStream Specified by: next in class StatusStreamBase Parameters: listener - a StatusListener implementation Throws: TwitterException - when the end of the stream has been reached. next public void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners) throws TwitterException Specified by: next in class StatusStreamBase Throws: TwitterException onDisconnectionNotice public void onDisconnectionNotice(java.lang.String line, StreamListener[] listeners) Overrides: onDisconnectionNotice in class StatusStreamBase Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SiteStreamsListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SiteStreamsListener"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface SiteStreamsListener All Superinterfaces: StreamListener All Known Implementing Classes: SiteStreamsAdapter public interface SiteStreamsListener extends StreamListener Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void onBlock(long forUser, User source, User blockedUser)  void onDeletionNotice(long forUser, long directMessageId, long userId)  void onDeletionNotice(long forUser, StatusDeletionNotice statusDeletionNotice)  void onDirectMessage(long forUser, DirectMessage directMessage)  void onDisconnectionNotice(java.lang.String line) callback method for StreamController.removeUsers(long[]) void onException(java.lang.Exception ex)  void onFavorite(long forUser, User source, User target, Status favoritedStatus)  void onFavoritedRetweet(User source, User target, Status favoritedStatus)  void onFollow(long forUser, User source, User followedUser)  void onFriendList(long forUser, long[] friendIds)  void onRetweetedRetweet(User source, User target, Status retweetedStatus)  void onStatus(long forUser, Status status)  void onUnblock(long forUser, User source, User unblockedUser)  void onUnfavorite(long forUser, User source, User target, Status unfavoritedStatus)  void onUnfollow(long forUser, User source, User unfollowedUser)  void onUserDeletion(long forUser, long deletedUser)  void onUserListCreation(long forUser, User listOwner, UserList list)  void onUserListDeletion(long forUser, User listOwner, UserList list)  void onUserListMemberAddition(long forUser, User addedMember, User listOwner, UserList list)  void onUserListMemberDeletion(long forUser, User deletedMember, User listOwner, UserList list)  void onUserListSubscription(long forUser, User subscriber, User listOwner, UserList list)  void onUserListUnsubscription(long forUser, User subscriber, User listOwner, UserList list)  void onUserListUpdate(long forUser, User listOwner, UserList list)  void onUserProfileUpdate(long forUser, User updatedUser)  void onUserSuspension(long forUser, long suspendedUser)  Method Detail onStatus void onStatus(long forUser, Status status) onDeletionNotice void onDeletionNotice(long forUser, StatusDeletionNotice statusDeletionNotice) onFriendList void onFriendList(long forUser, long[] friendIds) Parameters: forUser - the user id to whom sent the event friendIds - friend ids onFavorite void onFavorite(long forUser, User source, User target, Status favoritedStatus) Parameters: forUser - the user id to whom sent the event source - source user of the event target - target user of the event favoritedStatus - the status favorited onUnfavorite void onUnfavorite(long forUser, User source, User target, Status unfavoritedStatus) Parameters: forUser - the user id to whom sent the event source - source user of the event target - target user of the event unfavoritedStatus - the status unfavorited onFollow void onFollow(long forUser, User source, User followedUser) Parameters: forUser - the user id to whom sent the event source - source user of the event followedUser - user followed onUnfollow void onUnfollow(long forUser, User source, User unfollowedUser) Parameters: forUser - the user id to whom sent the event source - source user of the event unfollowedUser - user unfollowed Since: Twitter4J 2.1.11 onDirectMessage void onDirectMessage(long forUser, DirectMessage directMessage) Parameters: forUser - the user id to whom sent the event directMessage - direct message received onDeletionNotice void onDeletionNotice(long forUser, long directMessageId, long userId) onUserListMemberAddition void onUserListMemberAddition(long forUser, User addedMember, User listOwner, UserList list) Parameters: forUser - the user id to whom sent the event addedMember - member added listOwner - owner of the list list - the list onUserListMemberDeletion void onUserListMemberDeletion(long forUser, User deletedMember, User listOwner, UserList list) Parameters: forUser - the user id to whom sent the event deletedMember - member deleted listOwner - owner of the list list - the list onUserListSubscription void onUserListSubscription(long forUser, User subscriber, User listOwner, UserList list) Parameters: forUser - the user id to whom sent the event subscriber - member subscribed listOwner - owner of the list list - the list onUserListUnsubscription void onUserListUnsubscription(long forUser, User subscriber, User listOwner, UserList list) Parameters: forUser - the user id to whom sent the event subscriber - user subscribed listOwner - owner of the list list - the list onUserListCreation void onUserListCreation(long forUser, User listOwner, UserList list) Parameters: forUser - the user id to whom sent the event listOwner - owner of the list list - the list onUserListUpdate void onUserListUpdate(long forUser, User listOwner, UserList list) Parameters: forUser - the user id to whom sent the event listOwner - owner of the list list - the list onUserListDeletion void onUserListDeletion(long forUser, User listOwner, UserList list) Parameters: forUser - the user id to whom sent the event listOwner - owner of the list list - the list onUserProfileUpdate void onUserProfileUpdate(long forUser, User updatedUser) Parameters: forUser - the user id to whom sent the event updatedUser - updated user Since: Twitter4J 2.1.9 onUserSuspension void onUserSuspension(long forUser, long suspendedUser) Parameters: forUser - the user id to whom sent the event suspendedUser - suspended user id Since: Twitter4J 4.0.3 onUserDeletion void onUserDeletion(long forUser, long deletedUser) Parameters: forUser - the user id to whom sent the event deletedUser - deleted user id Since: Twitter4J 4.0.3 onBlock void onBlock(long forUser, User source, User blockedUser) Parameters: forUser - the user id to whom sent the event source - the user user blocked blockedUser - the user got blocked onUnblock void onUnblock(long forUser, User source, User unblockedUser) Parameters: forUser - the user id to whom sent the event source - the user unblocked unblockedUser - the user got unblocked onRetweetedRetweet void onRetweetedRetweet(User source, User target, Status retweetedStatus) Parameters: source - source user of the event target - target user of the event retweetedStatus - status retweeted retweet Since: Twitter4J 4.0.x onFavoritedRetweet void onFavoritedRetweet(User source, User target, Status favoritedStatus) Parameters: source - source user of the event target - target user of the event favoritedStatus - status favorited retweet Since: Twitter4J 4.0.x onDisconnectionNotice void onDisconnectionNotice(java.lang.String line) callback method for StreamController.removeUsers(long[]) Parameters: line - notice onException void onException(java.lang.Exception ex) Specified by: onException in interface StreamListener Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SpamReportingResource <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SpamReportingResource"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SpamReportingResource All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface SpamReportingResource Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description User reportSpam(long userId) The user specified in the id is blocked by the authenticated user and reported as a spammer. User reportSpam(java.lang.String screenName) The user specified in the id is blocked by the authenticated user and reported as a spammer. Method Detail reportSpam User reportSpam(long userId) throws TwitterException The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Parameters: userId - The ID of the user you want to report as a spammer. Returns: The User reported as a spammer. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST report_spam | Twitter Developers reportSpam User reportSpam(java.lang.String screenName) throws TwitterException The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Parameters: screenName - The screen name of the user you want to report as a spammer. Returns: The User reported as a spammer. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST report_spam | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SpamReportingResourceAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SpamReportingResourceAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SpamReportingResourceAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface SpamReportingResourceAsync Not yet supported. http://yusuke.homeip.net/jira/browse/TFJ-223 Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void reportSpam(long userId) The user specified in the id is blocked by the authenticated user and reported as a spammer. void reportSpam(java.lang.String screenName) The user specified in the id is blocked by the authenticated user and reported as a spammer. Method Detail reportSpam void reportSpam(long userId) The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Parameters: userId - The ID of the user you want to report as a spammer. Since: Twitter4J 2.1.0 See Also: POST report_spam | Twitter Developers reportSpam void reportSpam(java.lang.String screenName) The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Parameters: screenName - The screen name of the user you want to report as a spammer. Since: Twitter4J 2.1.0 See Also: POST report_spam | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StallWarning <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StallWarning"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StallWarning java.lang.Object twitter4j.StallWarning All Implemented Interfaces: java.io.Serializable public final class StallWarning extends java.lang.Object implements java.io.Serializable Since: Twitter4J 3.0.0 Author: Yusuke Yamamoto - yusuke at twitter.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private java.lang.String code  private java.lang.String message  private int percentFull  private static long serialVersionUID  Constructor Summary Constructors  Constructor and Description StallWarning(JSONObject json)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  java.lang.String getCode()  java.lang.String getMessage()  int getPercentFull()  int hashCode()  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values code private final java.lang.String code message private final java.lang.String message percentFull private final int percentFull Constructor Detail StallWarning StallWarning(JSONObject json) throws JSONException Throws: JSONException Method Detail getCode public java.lang.String getCode() getMessage public java.lang.String getMessage() getPercentFull public int getPercentFull() equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Status <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Status"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Status All Superinterfaces: java.lang.Comparable<Status>, EntitySupport, java.io.Serializable, TwitterResponse public interface Status extends java.lang.Comparable<Status>, TwitterResponse, EntitySupport, java.io.Serializable A data interface representing one single status of a user. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description long[] getContributors() Returns an array of contributors, or null if no contributor is associated with this status. java.util.Date getCreatedAt() Return the created_at long getCurrentUserRetweetId() Returns the authenticating user's retweet's id of this tweet, or -1L when the tweet was created before this feature was enabled. int getFavoriteCount() Indicates approximately how many times this Tweet has been "favorited" by Twitter users. GeoLocation getGeoLocation() Returns The location that this tweet refers to if available. long getId() Returns the id of the status java.lang.String getInReplyToScreenName() Returns the in_reply_to_screen_name long getInReplyToStatusId() Returns the in_reply_tostatus_id long getInReplyToUserId() Returns the in_reply_user_id java.lang.String getLang() Returns the lang of the status text if available. Place getPlace() Returns the place attached to this status Status getQuotedStatus() Returns the Tweet object of the original Tweet that was quoted. long getQuotedStatusId() Returns the Tweet ID of the quoted Tweet int getRetweetCount() Returns the number of times this tweet has been retweeted, or -1 when the tweet was created before this feature was enabled. Status getRetweetedStatus()  Scopes getScopes() Returns the targeting scopes applied to a status. java.lang.String getSource() Returns the source java.lang.String getText() Returns the text of the status User getUser() Return the user associated with the status. This can be null if the instance is from User.getStatus(). java.lang.String[] getWithheldInCountries() Returns the list of country codes where the tweet is withheld boolean isFavorited() Test if the status is favorited boolean isPossiblySensitive() Returns true if the status contains a link that is identified as sensitive. boolean isRetweet()  boolean isRetweeted() Test if the status is retweeted boolean isRetweetedByMe() Returns true if the authenticating user has retweeted this tweet, or false when the tweet was created before this feature was enabled. boolean isTruncated() Test if the status is truncated Methods inherited from interface java.lang.Comparable compareTo Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Methods inherited from interface twitter4j.EntitySupport getExtendedMediaEntities, getHashtagEntities, getMediaEntities, getSymbolEntities, getURLEntities, getUserMentionEntities Method Detail getCreatedAt java.util.Date getCreatedAt() Return the created_at Returns: created_at Since: Twitter4J 1.1.0 getId long getId() Returns the id of the status Returns: the id getText java.lang.String getText() Returns the text of the status Returns: the text getSource java.lang.String getSource() Returns the source Returns: the source Since: Twitter4J 1.0.4 isTruncated boolean isTruncated() Test if the status is truncated Returns: true if truncated Since: Twitter4J 1.0.4 getInReplyToStatusId long getInReplyToStatusId() Returns the in_reply_tostatus_id Returns: the in_reply_tostatus_id Since: Twitter4J 1.0.4 getInReplyToUserId long getInReplyToUserId() Returns the in_reply_user_id Returns: the in_reply_tostatus_id Since: Twitter4J 1.0.4 getInReplyToScreenName java.lang.String getInReplyToScreenName() Returns the in_reply_to_screen_name Returns: the in_in_reply_to_screen_name Since: Twitter4J 2.0.4 getGeoLocation GeoLocation getGeoLocation() Returns The location that this tweet refers to if available. Returns: returns The location that this tweet refers to if available (can be null) Since: Twitter4J 2.1.0 getPlace Place getPlace() Returns the place attached to this status Returns: The place attached to this status Since: Twitter4J 2.1.1 isFavorited boolean isFavorited() Test if the status is favorited Returns: true if favorited Since: Twitter4J 1.0.4 isRetweeted boolean isRetweeted() Test if the status is retweeted Returns: true if retweeted Since: Twitter4J 3.0.4 getFavoriteCount int getFavoriteCount() Indicates approximately how many times this Tweet has been "favorited" by Twitter users. Returns: the favorite count Since: Twitter4J 3.0.4 getUser User getUser() Return the user associated with the status. This can be null if the instance is from User.getStatus(). Returns: the user isRetweet boolean isRetweet() Returns: if the status is retweet or not Since: Twitter4J 2.0.10 getRetweetedStatus Status getRetweetedStatus() Returns: retweeted status Since: Twitter4J 2.1.0 getContributors long[] getContributors() Returns an array of contributors, or null if no contributor is associated with this status. Returns: contributors Since: Twitter4J 2.2.3 getRetweetCount int getRetweetCount() Returns the number of times this tweet has been retweeted, or -1 when the tweet was created before this feature was enabled. Returns: the retweet count. isRetweetedByMe boolean isRetweetedByMe() Returns true if the authenticating user has retweeted this tweet, or false when the tweet was created before this feature was enabled. Returns: whether the authenticating user has retweeted this tweet. Since: Twitter4J 2.1.4 getCurrentUserRetweetId long getCurrentUserRetweetId() Returns the authenticating user's retweet's id of this tweet, or -1L when the tweet was created before this feature was enabled. Returns: the authenticating user's retweet's id of this tweet Since: Twitter4J 3.0.1 isPossiblySensitive boolean isPossiblySensitive() Returns true if the status contains a link that is identified as sensitive. Returns: whether the status contains sensitive links Since: Twitter4J 3.0.0 getLang java.lang.String getLang() Returns the lang of the status text if available. Returns: two-letter iso language code Since: Twitter4J 3.0.6 getScopes Scopes getScopes() Returns the targeting scopes applied to a status. Returns: the targeting scopes applied to a status. Since: Twitter4J 3.0.6 getWithheldInCountries java.lang.String[] getWithheldInCountries() Returns the list of country codes where the tweet is withheld Returns: list of country codes where the tweet is withheld - null if not withheld Since: Twitter4j 4.0.3 getQuotedStatusId long getQuotedStatusId() Returns the Tweet ID of the quoted Tweet Returns: the Tweet ID of the quoted Tweet Since: Twitter4J 4.0.4 getQuotedStatus Status getQuotedStatus() Returns the Tweet object of the original Tweet that was quoted. Returns: the quoted Tweet object Since: Twitter4J 4.0.4 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusAdapter <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusAdapter"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StatusAdapter java.lang.Object twitter4j.StatusAdapter All Implemented Interfaces: StatusListener, StreamListener Direct Known Subclasses: UserStreamAdapter public class StatusAdapter extends java.lang.Object implements StatusListener Since: Twitter4J 2.1.3 Author: yusuke at mac.com Constructor Summary Constructors  Constructor and Description StatusAdapter()  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) Called upon deletionNotice notices. void onException(java.lang.Exception ex)  void onScrubGeo(long userId, long upToStatusId) Called upon location deletion messages. void onStallWarning(StallWarning warning) Called when receiving stall warnings. void onStatus(Status status)  void onTrackLimitationNotice(int numberOfLimitedStatuses) This notice will be sent each time a limited stream becomes unlimited. If this number is high and or rapidly increasing, it is an indication that your predicate is too broad, and you should consider a predicate with higher selectivity. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail StatusAdapter public StatusAdapter() Method Detail onStatus public void onStatus(Status status) Specified by: onStatus in interface StatusListener onDeletionNotice public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) Description copied from interface: StatusListener Called upon deletionNotice notices. Clients are urged to honor deletionNotice requests and discard deleted statuses immediately. At times, status deletionNotice messages may arrive before the status. Even in this case, the late arriving status should be deleted from your backing store. Specified by: onDeletionNotice in interface StatusListener Parameters: statusDeletionNotice - the deletionNotice notice See Also: Streaming API Concepts | Twitter Developers onTrackLimitationNotice public void onTrackLimitationNotice(int numberOfLimitedStatuses) Description copied from interface: StatusListener This notice will be sent each time a limited stream becomes unlimited. If this number is high and or rapidly increasing, it is an indication that your predicate is too broad, and you should consider a predicate with higher selectivity. Specified by: onTrackLimitationNotice in interface StatusListener Parameters: numberOfLimitedStatuses - an enumeration of statuses that matched the track predicate but were administratively limited. See Also: Streaming API Concepts - Filter Limiting | Twitter Developers, Streaming API Concepts - Parsing Responses | Twitter Developers, Twitter Development Talk - Track API Limit message meaning onScrubGeo public void onScrubGeo(long userId, long upToStatusId) Description copied from interface: StatusListener Called upon location deletion messages. Clients are urged to honor deletion requests and remove appropriate geolocation information from both the display and your backing store immediately. Note that in some cases the location deletion message may arrive before a tweet that lies within the deletion range arrives. You should still strip the location data. Specified by: onScrubGeo in interface StatusListener Parameters: userId - user id upToStatusId - up to status id onException public void onException(java.lang.Exception ex) Specified by: onException in interface StreamListener onStallWarning public void onStallWarning(StallWarning warning) Description copied from interface: StatusListener Called when receiving stall warnings. Specified by: onStallWarning in interface StatusListener Parameters: warning - StallWaning See Also: Streaming API request parameters - stall_warnings Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusDeletionNotice <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusDeletionNotice"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface StatusDeletionNotice All Superinterfaces: java.lang.Comparable<StatusDeletionNotice>, java.io.Serializable All Known Implementing Classes: StatusDeletionNoticeImpl public interface StatusDeletionNotice extends java.lang.Comparable<StatusDeletionNotice>, java.io.Serializable A data class representing Status deletionNotice Clients are urged to honor deletionNotice requests and discard deleted statuses immediately. At times, status deletionNotice messages may arrive before the status. Even in this case, the late arriving status should be deleted from your backing store. Since: Twitter4J 2.1.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description long getStatusId()  long getUserId()  Methods inherited from interface java.lang.Comparable compareTo Method Detail getStatusId long getStatusId() getUserId long getUserId() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusDeletionNoticeImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusDeletionNoticeImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StatusDeletionNoticeImpl java.lang.Object twitter4j.StatusDeletionNoticeImpl All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<StatusDeletionNotice>, StatusDeletionNotice class StatusDeletionNoticeImpl extends java.lang.Object implements StatusDeletionNotice, java.io.Serializable StatusDeletionNotice implementation. This class is NOT intended to be extended but left non-final for the ease of mock testing. Since: Twitter4J 2.1.2 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private static long serialVersionUID  private long statusId  private long userId  Constructor Summary Constructors  Constructor and Description StatusDeletionNoticeImpl(JSONObject status)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description int compareTo(StatusDeletionNotice that)  boolean equals(java.lang.Object o)  long getStatusId()  long getUserId()  int hashCode()  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values statusId private final long statusId userId private final long userId Constructor Detail StatusDeletionNoticeImpl StatusDeletionNoticeImpl(JSONObject status) Method Detail getStatusId public long getStatusId() Specified by: getStatusId in interface StatusDeletionNotice getUserId public long getUserId() Specified by: getUserId in interface StatusDeletionNotice compareTo public int compareTo(StatusDeletionNotice that) Specified by: compareTo in interface java.lang.Comparable<StatusDeletionNotice> equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusListener"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface StatusListener All Superinterfaces: StreamListener All Known Subinterfaces: UserStreamListener All Known Implementing Classes: StatusAdapter, UserStreamAdapter public interface StatusListener extends StreamListener Since: Twitter4J 2.0.4 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) Called upon deletionNotice notices. void onScrubGeo(long userId, long upToStatusId) Called upon location deletion messages. void onStallWarning(StallWarning warning) Called when receiving stall warnings. void onStatus(Status status)  void onTrackLimitationNotice(int numberOfLimitedStatuses) This notice will be sent each time a limited stream becomes unlimited. If this number is high and or rapidly increasing, it is an indication that your predicate is too broad, and you should consider a predicate with higher selectivity. Methods inherited from interface twitter4j.StreamListener onException Method Detail onStatus void onStatus(Status status) onDeletionNotice void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) Called upon deletionNotice notices. Clients are urged to honor deletionNotice requests and discard deleted statuses immediately. At times, status deletionNotice messages may arrive before the status. Even in this case, the late arriving status should be deleted from your backing store. Parameters: statusDeletionNotice - the deletionNotice notice Since: Twitter4J 2.1.0 See Also: Streaming API Concepts | Twitter Developers onTrackLimitationNotice void onTrackLimitationNotice(int numberOfLimitedStatuses) This notice will be sent each time a limited stream becomes unlimited. If this number is high and or rapidly increasing, it is an indication that your predicate is too broad, and you should consider a predicate with higher selectivity. Parameters: numberOfLimitedStatuses - an enumeration of statuses that matched the track predicate but were administratively limited. Since: Twitter4J 2.1.0 See Also: Streaming API Concepts - Filter Limiting | Twitter Developers, Streaming API Concepts - Parsing Responses | Twitter Developers, Twitter Development Talk - Track API Limit message meaning onScrubGeo void onScrubGeo(long userId, long upToStatusId) Called upon location deletion messages. Clients are urged to honor deletion requests and remove appropriate geolocation information from both the display and your backing store immediately. Note that in some cases the location deletion message may arrive before a tweet that lies within the deletion range arrives. You should still strip the location data. Parameters: userId - user id upToStatusId - up to status id Since: Twitter4J 2.1.9 onStallWarning void onStallWarning(StallWarning warning) Called when receiving stall warnings. Parameters: warning - StallWaning Since: Twitter4J 3.0.0 See Also: Streaming API request parameters - stall_warnings Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusStream <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusStream"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface StatusStream All Known Subinterfaces: UserStream All Known Implementing Classes: SiteStreamsImpl, StatusStreamBase, StatusStreamImpl, UserStreamImpl interface StatusStream Since: Twitter4J 2.0.4 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void close()  void next(StatusListener listener) Reads next status from this stream. Method Detail next void next(StatusListener listener) throws TwitterException Reads next status from this stream. Parameters: listener - a StatusListener implementation Throws: TwitterException - when the end of the stream has been reached. java.lang.IllegalStateException - when the end of the stream had been reached. close void close() throws java.io.IOException Throws: java.io.IOException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusStreamBase <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusStreamBase"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":6,"i8":6,"i9":10,"i10":6,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StatusStreamBase java.lang.Object twitter4j.StatusStreamBase All Implemented Interfaces: StatusStream Direct Known Subclasses: SiteStreamsImpl, StatusStreamImpl abstract class StatusStreamBase extends java.lang.Object implements StatusStream Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested Classes  Modifier and Type Class and Description (package private) class  StatusStreamBase.StreamEvent  Field Summary Fields  Modifier and Type Field and Description private java.io.BufferedReader br  (package private) Configuration CONF  private Dispatcher dispatcher  private ObjectFactory factory  private java.io.InputStream is  (package private) static Logger logger  private HttpResponse response  private boolean streamAlive  Constructor Summary Constructors  Constructor and Description StatusStreamBase(Dispatcher dispatcher, HttpResponse response, Configuration conf)  StatusStreamBase(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf)  Method Summary All Methods Instance Methods Abstract Methods Concrete Methods  Modifier and Type Method and Description (package private) DirectMessage asDirectMessage(JSONObject json)  (package private) long[] asFriendList(JSONObject json)  (package private) Status asStatus(JSONObject json)  (package private) User asUser(JSONObject json)  (package private) UserList asUserList(JSONObject json)  void close()  (package private) void handleNextElement(StreamListener[] listeners, RawStreamListener[] rawStreamListeners)  abstract void next(StatusListener listener) Reads next status from this stream. abstract void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners)  (package private) void onBlock(JSONObject source, JSONObject target, StreamListener[] listeners)  protected abstract void onClose()  (package private) void onDelete(JSONObject json, StreamListener[] listeners)  (package private) void onDirectMessage(JSONObject json, StreamListener[] listeners)  (package private) void onDisconnectionNotice(java.lang.String line, StreamListener[] listeners)  (package private) void onException(java.lang.Exception e, StreamListener[] listeners)  void onException(java.lang.Exception e, StreamListener[] listeners, RawStreamListener[] rawStreamListeners)  (package private) void onFavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onFavoritedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onFollow(JSONObject source, JSONObject target, StreamListener[] listeners)  (package private) void onFriends(JSONObject json, StreamListener[] listeners)  (package private) void onLimit(JSONObject json, StreamListener[] listeners)  (package private) void onMessage(java.lang.String rawString, RawStreamListener[] listeners)  (package private) void onQuotedTweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onRetweetedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onScrubGeo(JSONObject json, StreamListener[] listeners)  (package private) void onSender(JSONObject json, StreamListener[] listeners)  (package private) void onStallWarning(JSONObject json, StreamListener[] listeners)  (package private) void onStatus(JSONObject json, StreamListener[] listeners)  (package private) void onUnblock(JSONObject source, JSONObject target, StreamListener[] listeners)  (package private) void onUnfavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onUnfollow(JSONObject source, JSONObject target, StreamListener[] listeners)  (package private) void onUserDeletion(long target, StreamListener[] listeners)  (package private) void onUserListCreation(JSONObject source, JSONObject userList, StreamListener[] listeners)  (package private) void onUserListDestroyed(JSONObject source, JSONObject userList, StreamListener[] listeners)  (package private) void onUserListMemberAddition(JSONObject addedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners)  (package private) void onUserListMemberDeletion(JSONObject deletedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners)  (package private) void onUserListSubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners)  (package private) void onUserListUnsubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners)  (package private) void onUserListUpdated(JSONObject source, JSONObject userList, StreamListener[] listeners)  (package private) void onUserSuspension(long target, StreamListener[] listeners)  (package private) void onUserUpdate(JSONObject source, JSONObject target, StreamListener[] listeners)  (package private) java.lang.String parseLine(java.lang.String line)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail logger static final Logger logger streamAlive private boolean streamAlive br private java.io.BufferedReader br is private java.io.InputStream is response private HttpResponse response dispatcher private final Dispatcher dispatcher CONF final Configuration CONF factory private ObjectFactory factory Constructor Detail StatusStreamBase StatusStreamBase(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf) throws java.io.IOException Throws: java.io.IOException StatusStreamBase StatusStreamBase(Dispatcher dispatcher, HttpResponse response, Configuration conf) throws java.io.IOException Throws: java.io.IOException Method Detail parseLine java.lang.String parseLine(java.lang.String line) handleNextElement void handleNextElement(StreamListener[] listeners, RawStreamListener[] rawStreamListeners) throws TwitterException Throws: TwitterException onMessage void onMessage(java.lang.String rawString, RawStreamListener[] listeners) throws TwitterException Throws: TwitterException onSender void onSender(JSONObject json, StreamListener[] listeners) throws TwitterException Throws: TwitterException onStatus void onStatus(JSONObject json, StreamListener[] listeners) throws TwitterException Throws: TwitterException onDirectMessage void onDirectMessage(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onDelete void onDelete(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onLimit void onLimit(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onStallWarning void onStallWarning(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onScrubGeo void onScrubGeo(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onFriends void onFriends(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onFavorite void onFavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Throws: TwitterException onUnfavorite void onUnfavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Throws: TwitterException onFollow void onFollow(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Throws: TwitterException onUnfollow void onUnfollow(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Throws: TwitterException onUserListMemberAddition void onUserListMemberAddition(JSONObject addedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onUserListMemberDeletion void onUserListMemberDeletion(JSONObject deletedMember, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onUserListSubscription void onUserListSubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onUserListUnsubscription void onUserListUnsubscription(JSONObject source, JSONObject owner, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onUserListCreation void onUserListCreation(JSONObject source, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onUserListUpdated void onUserListUpdated(JSONObject source, JSONObject userList, StreamListener[] listeners) throws TwitterException, JSONException Throws: TwitterException JSONException onUserListDestroyed void onUserListDestroyed(JSONObject source, JSONObject userList, StreamListener[] listeners) throws TwitterException Throws: TwitterException onUserUpdate void onUserUpdate(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Throws: TwitterException onUserDeletion void onUserDeletion(long target, StreamListener[] listeners) throws TwitterException Throws: TwitterException onUserSuspension void onUserSuspension(long target, StreamListener[] listeners) throws TwitterException Throws: TwitterException onBlock void onBlock(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Throws: TwitterException onUnblock void onUnblock(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Throws: TwitterException onRetweetedRetweet void onRetweetedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Throws: TwitterException onFavoritedRetweet void onFavoritedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Throws: TwitterException onQuotedTweet void onQuotedTweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Throws: TwitterException onDisconnectionNotice void onDisconnectionNotice(java.lang.String line, StreamListener[] listeners) onException void onException(java.lang.Exception e, StreamListener[] listeners) onClose protected abstract void onClose() close public void close() throws java.io.IOException Specified by: close in interface StatusStream Throws: java.io.IOException asStatus Status asStatus(JSONObject json) throws TwitterException Throws: TwitterException asDirectMessage DirectMessage asDirectMessage(JSONObject json) throws TwitterException Throws: TwitterException asFriendList long[] asFriendList(JSONObject json) throws TwitterException Throws: TwitterException asUser User asUser(JSONObject json) throws TwitterException Throws: TwitterException asUserList UserList asUserList(JSONObject json) throws TwitterException Throws: TwitterException next public abstract void next(StatusListener listener) throws TwitterException Description copied from interface: StatusStream Reads next status from this stream. Specified by: next in interface StatusStream Parameters: listener - a StatusListener implementation Throws: TwitterException - when the end of the stream has been reached. next public abstract void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners) throws TwitterException Throws: TwitterException onException public void onException(java.lang.Exception e, StreamListener[] listeners, RawStreamListener[] rawStreamListeners) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusStreamImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusStreamImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StatusStreamImpl java.lang.Object twitter4j.StatusStreamBase twitter4j.StatusStreamImpl All Implemented Interfaces: StatusStream Direct Known Subclasses: UserStreamImpl class StatusStreamImpl extends StatusStreamBase StatusStream implementation. This class is NOT intended to be extended but left non-final for the ease of mock testing. Since: Twitter4J 2.1.2 Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested classes/interfaces inherited from class twitter4j.StatusStreamBase StatusStreamBase.StreamEvent Field Summary Fields  Modifier and Type Field and Description (package private) static RawStreamListener[] EMPTY  (package private) java.lang.String line  Fields inherited from class twitter4j.StatusStreamBase CONF, logger Constructor Summary Constructors  Constructor and Description StatusStreamImpl(Dispatcher dispatcher, HttpResponse response, Configuration conf)  StatusStreamImpl(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void next(StatusListener listener) Reads next status from this stream. void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners)  protected void onClose()  protected void onDelete(JSONObject json, StreamListener[] listeners)  void onException(java.lang.Exception e, StreamListener[] listeners)  protected void onLimit(JSONObject json, StreamListener[] listeners)  protected void onMessage(java.lang.String rawString, RawStreamListener[] listeners)  protected void onScrubGeo(JSONObject json, StreamListener[] listeners)  protected void onStallWarning(JSONObject json, StreamListener[] listeners)  protected void onStatus(JSONObject json, StreamListener[] listeners)  protected java.lang.String parseLine(java.lang.String line)  Methods inherited from class twitter4j.StatusStreamBase asDirectMessage, asFriendList, asStatus, asUser, asUserList, close, handleNextElement, onBlock, onDirectMessage, onDisconnectionNotice, onException, onFavorite, onFavoritedRetweet, onFollow, onFriends, onQuotedTweet, onRetweetedRetweet, onSender, onUnblock, onUnfavorite, onUnfollow, onUserDeletion, onUserListCreation, onUserListDestroyed, onUserListMemberAddition, onUserListMemberDeletion, onUserListSubscription, onUserListUnsubscription, onUserListUpdated, onUserSuspension, onUserUpdate Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail line java.lang.String line EMPTY static final RawStreamListener[] EMPTY Constructor Detail StatusStreamImpl StatusStreamImpl(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf) throws java.io.IOException Throws: java.io.IOException StatusStreamImpl StatusStreamImpl(Dispatcher dispatcher, HttpResponse response, Configuration conf) throws java.io.IOException Throws: java.io.IOException Method Detail onClose protected void onClose() Specified by: onClose in class StatusStreamBase next public void next(StatusListener listener) throws TwitterException Description copied from interface: StatusStream Reads next status from this stream. Specified by: next in interface StatusStream Specified by: next in class StatusStreamBase Parameters: listener - a StatusListener implementation Throws: TwitterException - when the end of the stream has been reached. next public void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners) throws TwitterException Specified by: next in class StatusStreamBase Throws: TwitterException parseLine protected java.lang.String parseLine(java.lang.String line) Overrides: parseLine in class StatusStreamBase onMessage protected void onMessage(java.lang.String rawString, RawStreamListener[] listeners) throws TwitterException Overrides: onMessage in class StatusStreamBase Throws: TwitterException onStatus protected void onStatus(JSONObject json, StreamListener[] listeners) throws TwitterException Overrides: onStatus in class StatusStreamBase Throws: TwitterException onDelete protected void onDelete(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onDelete in class StatusStreamBase Throws: TwitterException JSONException onLimit protected void onLimit(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onLimit in class StatusStreamBase Throws: TwitterException JSONException onStallWarning protected void onStallWarning(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onStallWarning in class StatusStreamBase Throws: TwitterException JSONException onScrubGeo protected void onScrubGeo(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onScrubGeo in class StatusStreamBase Throws: TwitterException JSONException onException public void onException(java.lang.Exception e, StreamListener[] listeners) Overrides: onException in class StatusStreamBase Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StatusUpdate <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StatusUpdate"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StatusUpdate java.lang.Object twitter4j.StatusUpdate All Implemented Interfaces: java.io.Serializable public final class StatusUpdate extends java.lang.Object implements java.io.Serializable Since: Twitter4J 2.1.1 Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private boolean displayCoordinates  private long inReplyToStatusId  private GeoLocation location  private java.io.InputStream mediaBody  private java.io.File mediaFile  private long[] mediaIds  private java.lang.String mediaName  private java.lang.String placeId  private boolean possiblySensitive  private static long serialVersionUID  private java.lang.String status  Constructor Summary Constructors  Constructor and Description StatusUpdate(java.lang.String status)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description private void appendParameter(java.lang.String name, double value, java.util.List<HttpParameter> params)  private void appendParameter(java.lang.String name, long value, java.util.List<HttpParameter> params)  private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params)  (package private) HttpParameter[] asHttpParameterArray()  StatusUpdate displayCoordinates(boolean displayCoordinates)  boolean equals(java.lang.Object o)  long getInReplyToStatusId()  GeoLocation getLocation()  java.lang.String getPlaceId()  java.lang.String getStatus()  int hashCode()  StatusUpdate inReplyToStatusId(long inReplyToStatusId)  boolean isDisplayCoordinates()  (package private) boolean isForUpdateWithMedia()  boolean isPossiblySensitive()  StatusUpdate location(GeoLocation location)  StatusUpdate media(java.io.File file)  StatusUpdate media(java.lang.String name, java.io.InputStream body)  StatusUpdate placeId(java.lang.String placeId)  StatusUpdate possiblySensitive(boolean possiblySensitive)  void setDisplayCoordinates(boolean displayCoordinates)  void setInReplyToStatusId(long inReplyToStatusId)  void setLocation(GeoLocation location)  void setMedia(java.io.File file)  void setMedia(java.lang.String name, java.io.InputStream body)  void setMediaIds(long[] mediaIds)  void setPlaceId(java.lang.String placeId)  void setPossiblySensitive(boolean possiblySensitive)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values status private final java.lang.String status inReplyToStatusId private long inReplyToStatusId location private GeoLocation location placeId private java.lang.String placeId displayCoordinates private boolean displayCoordinates possiblySensitive private boolean possiblySensitive mediaName private java.lang.String mediaName mediaBody private transient java.io.InputStream mediaBody mediaFile private java.io.File mediaFile mediaIds private long[] mediaIds Constructor Detail StatusUpdate public StatusUpdate(java.lang.String status) Method Detail getStatus public java.lang.String getStatus() getInReplyToStatusId public long getInReplyToStatusId() setInReplyToStatusId public void setInReplyToStatusId(long inReplyToStatusId) inReplyToStatusId public StatusUpdate inReplyToStatusId(long inReplyToStatusId) getLocation public GeoLocation getLocation() setLocation public void setLocation(GeoLocation location) location public StatusUpdate location(GeoLocation location) getPlaceId public java.lang.String getPlaceId() setPlaceId public void setPlaceId(java.lang.String placeId) placeId public StatusUpdate placeId(java.lang.String placeId) isDisplayCoordinates public boolean isDisplayCoordinates() setDisplayCoordinates public void setDisplayCoordinates(boolean displayCoordinates) displayCoordinates public StatusUpdate displayCoordinates(boolean displayCoordinates) setMedia public void setMedia(java.io.File file) Parameters: file - media file Since: Twitter4J 2.2.5 media public StatusUpdate media(java.io.File file) Parameters: file - media file Returns: this instance Since: Twitter4J 2.2.5 setMedia public void setMedia(java.lang.String name, java.io.InputStream body) Parameters: name - name body - media body as stream Since: Twitter4J 2.2.5 setMediaIds public void setMediaIds(long[] mediaIds) Parameters: mediaIds - media ids Since: Twitter4J 4.0.2 isForUpdateWithMedia boolean isForUpdateWithMedia() media public StatusUpdate media(java.lang.String name, java.io.InputStream body) Parameters: name - media name body - media body Returns: this instance Since: Twitter4J 2.2.5 setPossiblySensitive public void setPossiblySensitive(boolean possiblySensitive) Parameters: possiblySensitive - possibly sensitive Since: Twitter4J 2.2.5 possiblySensitive public StatusUpdate possiblySensitive(boolean possiblySensitive) Parameters: possiblySensitive - possibly sensitive Returns: this instance Since: Twitter4J 2.2.5 isPossiblySensitive public boolean isPossiblySensitive() Returns: possibly sensitive Since: Twitter4J 2.2.5 asHttpParameterArray HttpParameter[] asHttpParameterArray() appendParameter private void appendParameter(java.lang.String name, java.lang.String value, java.util.List<HttpParameter> params) appendParameter private void appendParameter(java.lang.String name, double value, java.util.List<HttpParameter> params) appendParameter private void appendParameter(java.lang.String name, long value, java.util.List<HttpParameter> params) equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StreamController <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StreamController"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StreamController java.lang.Object twitter4j.StreamController public class StreamController extends java.lang.Object Since: Twitter4J 2.2.6 Author: Yusuke Yamamoto - yusuke at twitter.com Nested Class Summary Nested Classes  Modifier and Type Class and Description class  StreamController.FriendsIDs  class  StreamController.User  Field Summary Fields  Modifier and Type Field and Description private Authorization AUTH  private java.lang.String controlURI  private HttpClient http  private java.lang.Object lock  private static Logger logger  Constructor Summary Constructors  Constructor and Description StreamController(Configuration conf)  StreamController(HttpClient http, Authorization auth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description java.lang.String addUsers(long... userIds)  (package private) StreamController.User createUser(JSONObject json)  (package private) void ensureControlURISet()  (package private) java.lang.String getControlURI()  StreamController.FriendsIDs getFriendsIDs(long userId, long cursor)  ControlStreamInfo getInfo()  java.lang.String removeUsers(long... userIds)  (package private) void setControlURI(java.lang.String controlURI)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail controlURI private java.lang.String controlURI http private final HttpClient http AUTH private final Authorization AUTH logger private static final Logger logger lock private final java.lang.Object lock Constructor Detail StreamController StreamController(HttpClient http, Authorization auth) StreamController StreamController(Configuration conf) Method Detail setControlURI void setControlURI(java.lang.String controlURI) getControlURI java.lang.String getControlURI() ensureControlURISet void ensureControlURISet() throws TwitterException Throws: TwitterException getInfo public ControlStreamInfo getInfo() throws TwitterException Throws: TwitterException addUsers public java.lang.String addUsers(long... userIds) throws TwitterException Throws: TwitterException removeUsers public java.lang.String removeUsers(long... userIds) throws TwitterException Throws: TwitterException getFriendsIDs public StreamController.FriendsIDs getFriendsIDs(long userId, long cursor) throws TwitterException Throws: TwitterException createUser StreamController.User createUser(JSONObject json) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StreamImplementation <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StreamImplementation"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface StreamImplementation interface StreamImplementation Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void close()  void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners)  void onException(java.lang.Exception ex, StreamListener[] listeners, RawStreamListener[] rawStreamListeners)  Method Detail next void next(StreamListener[] listeners, RawStreamListener[] rawStreamListeners) close void close() onException void onException(java.lang.Exception ex, StreamListener[] listeners, RawStreamListener[] rawStreamListeners) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StreamListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StreamListener"; } } catch(err) { } //--> var methods = {"i0":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface StreamListener All Known Subinterfaces: RawStreamListener, SiteStreamsListener, StatusListener, UserStreamListener All Known Implementing Classes: SiteStreamsAdapter, StatusAdapter, UserStreamAdapter interface StreamListener Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void onException(java.lang.Exception ex)  Method Detail onException void onException(java.lang.Exception ex) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method StreamingReadTimeoutConfiguration <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="StreamingReadTimeoutConfiguration"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class StreamingReadTimeoutConfiguration java.lang.Object twitter4j.StreamingReadTimeoutConfiguration class StreamingReadTimeoutConfiguration extends java.lang.Object Field Summary Fields  Modifier and Type Field and Description (package private) Configuration nestedConf  Constructor Summary Constructors  Constructor and Description StreamingReadTimeoutConfiguration(Configuration httpConf)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description int getHttpConnectionTimeout()  java.lang.String getHttpProxyHost()  java.lang.String getHttpProxyPassword()  int getHttpProxyPort()  java.lang.String getHttpProxyUser()  int getHttpReadTimeout()  int getHttpRetryCount()  int getHttpRetryIntervalSeconds()  boolean isGZIPEnabled()  boolean isPrettyDebugEnabled()  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail nestedConf final Configuration nestedConf Constructor Detail StreamingReadTimeoutConfiguration StreamingReadTimeoutConfiguration(Configuration httpConf) Method Detail getHttpProxyHost public java.lang.String getHttpProxyHost() getHttpProxyPort public int getHttpProxyPort() getHttpProxyUser public java.lang.String getHttpProxyUser() getHttpProxyPassword public java.lang.String getHttpProxyPassword() getHttpConnectionTimeout public int getHttpConnectionTimeout() getHttpReadTimeout public int getHttpReadTimeout() getHttpRetryCount public int getHttpRetryCount() getHttpRetryIntervalSeconds public int getHttpRetryIntervalSeconds() isPrettyDebugEnabled public boolean isPrettyDebugEnabled() isGZIPEnabled public boolean isGZIPEnabled() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SuggestedUsersResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SuggestedUsersResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SuggestedUsersResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface SuggestedUsersResources Since: Twitter4J 3.0.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description ResponseList<User> getMemberSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. ResponseList<Category> getSuggestedUserCategories() Access to Twitter's suggested user list. ResponseList<User> getUserSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. Method Detail getUserSuggestions ResponseList<User> getUserSuggestions(java.lang.String categorySlug) throws TwitterException Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. This method calls https://api.twitter.com/1.1/users/suggestions/:slug.json Parameters: categorySlug - slug Returns: list of suggested users Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: GET users/suggestions/:slug | Twitter Developers getSuggestedUserCategories ResponseList<Category> getSuggestedUserCategories() throws TwitterException Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in the users/suggestions/category endpoint to get the users in that category. This method calls https://api.twitter.com/1.1/users/suggestions Returns: list of suggested user categories. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: GET users/suggestions | Twitter Developers getMemberSuggestions ResponseList<User> getMemberSuggestions(java.lang.String categorySlug) throws TwitterException Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/users/suggestions/:slug/members.json Parameters: categorySlug - slug Returns: list of suggested users Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: GET users/suggestions/:slug/members | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SuggestedUsersResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SuggestedUsersResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface SuggestedUsersResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface SuggestedUsersResourcesAsync Since: Twitter4J 3.0.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void getMemberSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. void getSuggestedUserCategories() Access to Twitter's suggested user list. void getUserSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. Method Detail getUserSuggestions void getUserSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. This method calls https://api.twitter.com/1.1/users/suggestions/:slug.json Parameters: categorySlug - slug Since: Twitter4J 2.1.1 See Also: GET users/suggestions/:slug | Twitter Developers getSuggestedUserCategories void getSuggestedUserCategories() Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in the users/suggestions/category endpoint to get the users in that category. This method calls https://api.twitter.com/1.1/users/suggestions Since: Twitter4J 2.1.1 See Also: GET users/suggestions | Twitter Developers getMemberSuggestions void getMemberSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/users/suggestions/:slug/members.json Parameters: categorySlug - slug Since: Twitter4J 2.1.9 See Also: #newtwitter and the API - Twitter API Announcements | Google Group Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method SymbolEntity <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="SymbolEntity"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface SymbolEntity All Superinterfaces: java.io.Serializable, TweetEntity public interface SymbolEntity extends TweetEntity, java.io.Serializable Since: Twitter4J 3.0.4 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getEnd() Returns the index of the end character of the symbol. int getStart() Returns the index of the start character of the symbol. Methods inherited from interface twitter4j.TweetEntity getText Method Detail getStart int getStart() Returns the index of the start character of the symbol. Specified by: getStart in interface TweetEntity Returns: the index of the start character of the symbol getEnd int getEnd() Returns the index of the end character of the symbol. Specified by: getEnd in interface TweetEntity Returns: the index of the end character of the symbol Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TimeSpanConverter <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TimeSpanConverter"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.util Class TimeSpanConverter java.lang.Object twitter4j.util.TimeSpanConverter All Implemented Interfaces: java.io.Serializable public final class TimeSpanConverter extends java.lang.Object implements java.io.Serializable Since: Twitter4J 2.1.0 Author: Joern Huxhorn - jhuxhorn at googlemail.com, Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private static int A_MINUTE_AGO  private static int AN_HOUR_AGO  private java.text.SimpleDateFormat dateMonth  private java.text.SimpleDateFormat dateMonthYear  private java.text.MessageFormat[] formats  private static int N_HOURS_AGO  private static int N_MINUTES_AGO  private static int N_SECONDS_AGO  private static int NOW  private static int ONE_DAY_IN_SECONDS  private static int ONE_HOUR_IN_SECONDS  private static int ONE_MONTH_IN_SECONDS  private static long serialVersionUID  Constructor Summary Constructors  Constructor and Description TimeSpanConverter() Constructs an instance with default locale TimeSpanConverter(java.util.Locale locale) Constructs an instance with the specified locale Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description java.lang.String toTimeSpanString(java.util.Date date)  private java.lang.String toTimeSpanString(int deltaInSeconds)  java.lang.String toTimeSpanString(long milliseconds)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail ONE_HOUR_IN_SECONDS private static final int ONE_HOUR_IN_SECONDS See Also: Constant Field Values ONE_DAY_IN_SECONDS private static final int ONE_DAY_IN_SECONDS See Also: Constant Field Values ONE_MONTH_IN_SECONDS private static final int ONE_MONTH_IN_SECONDS See Also: Constant Field Values serialVersionUID private static final long serialVersionUID See Also: Constant Field Values formats private final java.text.MessageFormat[] formats dateMonth private final java.text.SimpleDateFormat dateMonth dateMonthYear private final java.text.SimpleDateFormat dateMonthYear NOW private static final int NOW See Also: Constant Field Values N_SECONDS_AGO private static final int N_SECONDS_AGO See Also: Constant Field Values A_MINUTE_AGO private static final int A_MINUTE_AGO See Also: Constant Field Values N_MINUTES_AGO private static final int N_MINUTES_AGO See Also: Constant Field Values AN_HOUR_AGO private static final int AN_HOUR_AGO See Also: Constant Field Values N_HOURS_AGO private static final int N_HOURS_AGO See Also: Constant Field Values Constructor Detail TimeSpanConverter public TimeSpanConverter() Constructs an instance with default locale TimeSpanConverter public TimeSpanConverter(java.util.Locale locale) Constructs an instance with the specified locale Parameters: locale - locale Method Detail toTimeSpanString public java.lang.String toTimeSpanString(java.util.Date date) toTimeSpanString public java.lang.String toTimeSpanString(long milliseconds) toTimeSpanString private java.lang.String toTimeSpanString(int deltaInSeconds) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TimeZone <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TimeZone"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface TimeZone All Superinterfaces: java.io.Serializable public interface TimeZone extends java.io.Serializable Author: Alessandro Bahgat - ale.bahgat at gmail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getName()  java.lang.String tzinfoName()  int utcOffset()  Method Detail getName java.lang.String getName() tzinfoName java.lang.String tzinfoName() utcOffset int utcOffset() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TimelinesResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TimelinesResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface TimelinesResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface TimelinesResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description ResponseList<Status> getHomeTimeline() Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. ResponseList<Status> getHomeTimeline(Paging paging) Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. ResponseList<Status> getMentionsTimeline() Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. ResponseList<Status> getMentionsTimeline(Paging paging) Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. ResponseList<Status> getRetweetsOfMe() Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. ResponseList<Status> getRetweetsOfMe(Paging paging) Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. ResponseList<Status> getUserTimeline() Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(long userId) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(long userId, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(Paging paging) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(java.lang.String screenName) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(java.lang.String screenName, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. Method Detail getMentionsTimeline ResponseList<Status> getMentionsTimeline() throws TwitterException Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. This method calls https://api.twitter.com/1.1/statuses/mentions_timeline Returns: the 20 most recent replies Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET statuses/mentions | Twitter Developers getMentionsTimeline ResponseList<Status> getMentionsTimeline(Paging paging) throws TwitterException Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. This method calls https://api.twitter.com/1.1/statuses/mentions_timeline Parameters: paging - controls pagination. Supports since_id, max_id, zcount parameters. Returns: the 20 most recent replies Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET statuses/mentions | Twitter Developers getUserTimeline ResponseList<Status> getUserTimeline(java.lang.String screenName, Paging paging) throws TwitterException Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline.json Parameters: screenName - specifies the screen name of the user for whom to return the user_timeline paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of the user Timeline Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline ResponseList<Status> getUserTimeline(long userId, Paging paging) throws TwitterException Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline.json Parameters: userId - specifies the ID of the user for whom to return the user_timeline paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of the user Timeline Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline ResponseList<Status> getUserTimeline(java.lang.String screenName) throws TwitterException Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: screenName - specifies the screen name of the user for whom to return the user_timeline Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline ResponseList<Status> getUserTimeline(long userId) throws TwitterException Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: userId - specifies the ID of the user for whom to return the user_timeline Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline ResponseList<Status> getUserTimeline() throws TwitterException Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline ResponseList<Status> getUserTimeline(Paging paging) throws TwitterException Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: GET statuses/user_timeline | Twitter Developers getHomeTimeline ResponseList<Status> getHomeTimeline() throws TwitterException Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Returns: list of the home Timeline Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET statuses/home_timeline | Twitter Developers getHomeTimeline ResponseList<Status> getHomeTimeline(Paging paging) throws TwitterException Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of the home Timeline Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET statuses/home_timeline | Twitter Developers getRetweetsOfMe ResponseList<Status> getRetweetsOfMe() throws TwitterException Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Returns: the 20 most recent tweets of the authenticated user that have been retweeted by others. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET statuses/retweets_of_me | Twitter Developers getRetweetsOfMe ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: the 20 most recent tweets of the authenticated user that have been retweeted by others. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: GET statuses/retweets_of_me | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TimelinesResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TimelinesResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface TimelinesResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface TimelinesResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void getHomeTimeline() Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. void getHomeTimeline(Paging paging) Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. void getMentions() Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. void getMentions(Paging paging) Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. void getRetweetsOfMe() Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. void getRetweetsOfMe(Paging paging) Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. void getUserTimeline() Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(long userId) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(long userId, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(Paging paging) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(java.lang.String screenName) Returns the 20 most recent statuses posted from the authenticating user. void getUserTimeline(java.lang.String screenName, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. Method Detail getMentions void getMentions() Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected. This method calls https://api.twitter.com/1.1/statuses/mentions Since: Twitter4J 2.0.1 See Also: GET statuses/mentions | Twitter Developers getMentions void getMentions(Paging paging) Returns the 20 most recent replies (status updates prefixed with @username) to the authenticating user. Replies are only available to the authenticating user; you can not request a list of replies to another user whether public or protected. This method calls https://api.twitter.com/1.1/statuses/mentions Parameters: paging - controls pagination Since: Twitter4J 2.0.1 See Also: GET statuses/mentions | Twitter Developers getUserTimeline void getUserTimeline(java.lang.String screenName, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: screenName - Specifies the screen name of the user for whom to return the user_timeline. paging - controls pagination Since: Twitter4J 2.0.1 See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline void getUserTimeline(long userId, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: userId - Specifies the ID of the user for whom to return the user_timeline. paging - controls pagination Since: Twitter4J 2.1.0 See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline void getUserTimeline(Paging paging) Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: paging - controls pagination Since: Twitter4J 2.0.1 See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline void getUserTimeline(java.lang.String screenName) Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: screenName - Specifies the screen name of the user for whom to return the user_timeline. See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline void getUserTimeline(long userId) Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Parameters: userId - Specifies the ID of the user for whom to return the user_timeline. Since: Twitter4J 2.1.0 See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline void getUserTimeline() Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline See Also: GET statuses/user_timeline | Twitter Developers getHomeTimeline void getHomeTimeline() Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Since: Twitter4J 2.0.10 See Also: GET statuses/home_timeline | Twitter Developers getHomeTimeline void getHomeTimeline(Paging paging) Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Parameters: paging - controls pagination Since: Twitter4J 2.0.10 See Also: GET statuses/home_timeline | Twitter Developers getRetweetsOfMe void getRetweetsOfMe() Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Since: Twitter4J 2.0.10 See Also: GET statuses/retweets_of_me | Twitter Developers getRetweetsOfMe void getRetweetsOfMe(Paging paging) Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Since: Twitter4J 2.0.10 See Also: GET statuses/retweets_of_me | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Trend <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Trend"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Trend All Superinterfaces: java.io.Serializable public interface Trend extends java.io.Serializable A data interface representing Trend. Since: Twitter4J 2.0.2 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getName()  java.lang.String getQuery()  java.lang.String getURL()  Method Detail getName java.lang.String getName() getURL java.lang.String getURL() getQuery java.lang.String getQuery() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Trends <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Trends"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Trends All Superinterfaces: java.lang.Comparable<Trends>, java.io.Serializable, TwitterResponse public interface Trends extends TwitterResponse, java.lang.Comparable<Trends>, java.io.Serializable A data class representing Trends. Since: Twitter4J 2.0.2 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.util.Date getAsOf()  Location getLocation() Returns the location associated with the trends. This method is effective only with getLocalTrends() method. i.e. java.util.Date getTrendAt()  Trend[] getTrends()  Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Methods inherited from interface java.lang.Comparable compareTo Method Detail getTrends Trend[] getTrends() getLocation Location getLocation() Returns the location associated with the trends. This method is effective only with getLocalTrends() method. i.e. The return value of this method will be null with Search API Methods (getTrends(), getCurrentTrends(), getDailyTrends(), and getWeeklyTrends()). Returns: location Since: Twitter4J 2.1.1 getAsOf java.util.Date getAsOf() getTrendAt java.util.Date getTrendAt() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TrendsResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TrendsResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface TrendsResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface TrendsResources Since: Twitter4J 2.1.3 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description ResponseList<Location> getAvailableTrends() Returns the locations that Twitter has trending topic information for. ResponseList<Location> getClosestTrends(GeoLocation location) Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. Trends getPlaceTrends(int woeid) Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. Method Detail getPlaceTrends Trends getPlaceTrends(int woeid) throws TwitterException Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage. This method calls https://api.twitter.com/1.1/trends/place.json Parameters: woeid - The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. Returns: trends Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET trends/place | Twitter Developers getAvailableTrends ResponseList<Location> getAvailableTrends() throws TwitterException Returns the locations that Twitter has trending topic information for. The response is an array of "locations" that encode the location's WOEID (a Yahoo! Where On Earth ID) and some other human-readable information such as a canonical name and country the location belongs in. This method calls https://api.twitter.com/1.1/trends/available.json Returns: the locations Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: GET trends/available | Twitter Developers getClosestTrends ResponseList<Location> getClosestTrends(GeoLocation location) throws TwitterException Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. This method calls https://api.twitter.com/1.1/trends/closest.json Parameters: location - the available trend locations will be sorted by distance to the lat and long passed in. The sort is nearest to furthest. Returns: the locations Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET trends/closest | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TrendsResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TrendsResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface TrendsResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface TrendsResourcesAsync Since: Twitter4J 2.1.3 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void getAvailableTrends() Retrieves the locations that Twitter has trending topic information for. void getClosestTrends(GeoLocation location) Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. void getPlaceTrends(int woeid) Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. Method Detail getPlaceTrends void getPlaceTrends(int woeid) Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage. This method calls https://api.twitter.com/1.1/trends/place.json Parameters: woeid - The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. Since: Twitter4J 3.0.2 See Also: GET trends/place | Twitter Developers getAvailableTrends void getAvailableTrends() Retrieves the locations that Twitter has trending topic information for. The response is an array of "locations" that encode the location's WOEID (a Yahoo! Where On Earth ID) and some other human-readable information such as a canonical name and country the location belongs in. This method calls https://api.twitter.com/1.1/trends/available.json Since: Twitter4J 2.1.1 See Also: GET trends/available | Twitter Developers getClosestTrends void getClosestTrends(GeoLocation location) Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. This method calls https://api.twitter.com/1.1/trends/closest.json Parameters: location - the available trend locations will be sorted by distance to the lat and long passed in. The sort is nearest to furthest. Since: Twitter4J 3.0.2 See Also: GET trends/closest | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TweetEntity <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TweetEntity"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface TweetEntity All Known Subinterfaces: ExtendedMediaEntity, HashtagEntity, MediaEntity, SymbolEntity, URLEntity, UserMentionEntity public interface TweetEntity super interface of UserMentionEntity, URLEntity and HashtagEntity Since: Twitter4J 3.0.4 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getEnd() Returns the index of the end character of the entity in the tweet. int getStart() Returns the index of the start character of the entity in the tweet. java.lang.String getText() Returns the text of the entity Method Detail getText java.lang.String getText() Returns the text of the entity Returns: the text of the entity getStart int getStart() Returns the index of the start character of the entity in the tweet. Returns: the index of the start character of the entity in the tweet getEnd int getEnd() Returns the index of the end character of the entity in the tweet. Returns: the index of the end character of the entity in the tweet Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TweetsResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TweetsResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface TweetsResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface TweetsResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description Status destroyStatus(long statusId) Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. OEmbed getOEmbed(OEmbedRequest req) Returns information allowing the creation of an embedded representation of a Tweet on third party sites. IDs getRetweeterIds(long statusId, int count, long cursor) Returns a collection of up to count user IDs belonging to users who have retweeted the tweet specified by the id parameter. IDs getRetweeterIds(long statusId, long cursor) Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter. ResponseList<Status> getRetweets(long statusId) Returns up to 100 of the first retweets of a given tweet. ResponseList<Status> lookup(long... ids) Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. Status retweetStatus(long statusId) Retweets a tweet. Status showStatus(long id) Returns a single status, specified by the id parameter below. Status updateStatus(StatusUpdate latestStatus) Updates the authenticating user's status. Status updateStatus(java.lang.String status) Updates the authenticating user's status. UploadedMedia uploadMedia(java.io.File mediaFile) Uploads media image to be attached via updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json UploadedMedia uploadMedia(java.lang.String fileName, java.io.InputStream media) Uploads media image to be attached via updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json Method Detail getRetweets ResponseList<Status> getRetweets(long statusId) throws TwitterException Returns up to 100 of the first retweets of a given tweet. This method calls https://api.twitter.com/1.1/statuses/retweets Parameters: statusId - The numerical ID of the tweet you want the retweets of. Returns: the retweets of a given tweet Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: Tweets Resources › statuses/retweets/:id getRetweeterIds IDs getRetweeterIds(long statusId, long cursor) throws TwitterException Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter. This method calls https://api.twitter.com/1.1/get/statuses/retweeters/ids Parameters: statusId - The numerical ID of the tweet you want the retweeters of. cursor - The cursor of the page to fetch. Use -1 to start. Returns: the retweets of a given tweet Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.5 See Also: Tweets Resources › statuses/retweeters/ids getRetweeterIds IDs getRetweeterIds(long statusId, int count, long cursor) throws TwitterException Returns a collection of up to count user IDs belonging to users who have retweeted the tweet specified by the id parameter. This method calls https://api.twitter.com/1.1/get/statuses/retweeters/ids Parameters: statusId - The numerical ID of the tweet you want the retweeters of. count - The maximum number of retweeter IDs to retrieve. Must be between 1 and 200, inclusive. cursor - The cursor of the page to fetch. Use -1 to start. Returns: the retweets of a given tweet Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.5 See Also: Tweets Resources › statuses/retweeters/ids showStatus Status showStatus(long id) throws TwitterException Returns a single status, specified by the id parameter below. The status's author will be returned inline. This method calls https://api.twitter.com/1.1/statuses/show Parameters: id - the numerical ID of the status you're trying to retrieve Returns: a single status Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: GET statuses/show/:id | Twitter Developers destroyStatus Status destroyStatus(long statusId) throws TwitterException Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. This method calls https://api.twitter.com/1.1/statuses/destroy Parameters: statusId - The ID of the status to destroy. Returns: the deleted status Throws: TwitterException - when Twitter service or network is unavailable Since: 1.0.5 See Also: POST statuses/destroy/:id | Twitter Developers updateStatus Status updateStatus(java.lang.String status) throws TwitterException Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. This method calls https://api.twitter.com/1.1/statuses/update Parameters: status - the text of your status update Returns: the latest status Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: POST statuses/update | Twitter Developers updateStatus Status updateStatus(StatusUpdate latestStatus) throws TwitterException Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. This method calls https://api.twitter.com/1.1/statuses/update or This method calls https://upload.twitter.com/1/statuses/update_with_media Parameters: latestStatus - the latest status to be updated. Returns: the latest status Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: POST statuses/update | Twitter Developers retweetStatus Status retweetStatus(long statusId) throws TwitterException Retweets a tweet. Returns the original tweet with retweet details embedded. This method calls https://api.twitter.com/1.1/statuses/retweet Parameters: statusId - The ID of the status to retweet. Returns: the retweeted status Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: POST statuses/retweet/:id | Twitter Developers getOEmbed OEmbed getOEmbed(OEmbedRequest req) throws TwitterException Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification for information about the response format. While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements. Do not rely on any class or id parameters to stay constant in the returned markup. This method calls https://api.twitter.com/1.1/statuses/oembed.json Parameters: req - request Returns: information allowing the creation of an embedded representation of a Tweet on third party sites Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET statuses/oembed | Twitter Developers lookup ResponseList<Status> lookup(long... ids) throws TwitterException Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. This method is especially useful to get the details (hydrate) a collection of Tweet IDs. This method calls https://api.twitter.com/1.1/statuses/lookup.json Parameters: ids - array of the ids to lookup Returns: list of the tweets Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET statuses/lookup uploadMedia UploadedMedia uploadMedia(java.io.File mediaFile) throws TwitterException Uploads media image to be attached via updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json Parameters: mediaFile - the latest status to be updated. Returns: upload result Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: POST statuses/update | Twitter Developers, Multiple Media Entities in Statuses uploadMedia UploadedMedia uploadMedia(java.lang.String fileName, java.io.InputStream media) throws TwitterException Uploads media image to be attached via updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json Parameters: fileName - media file name media - media body as stream Returns: upload result Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.3 See Also: POST statuses/update | Twitter Developers, Multiple Media Entities in Statuses Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TweetsResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TweetsResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface TweetsResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface TweetsResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void destroyStatus(long statusId) Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. void getOEmbed(OEmbedRequest req) Returns information allowing the creation of an embedded representation of a Tweet on third party sites. void getRetweets(long statusId) Returns up to 100 of the first retweets of a given tweet. void lookup(long... ids) Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. void retweetStatus(long statusId) Retweets a tweet. void showStatus(long id) Returns a single status, specified by the id parameter below. void updateStatus(StatusUpdate status) Updates the authenticating user's status. void updateStatus(java.lang.String status) Updates the authenticating user's status. Method Detail getRetweets void getRetweets(long statusId) Returns up to 100 of the first retweets of a given tweet. This method calls https://api.twitter.com/1.1/statuses/retweets Parameters: statusId - The numerical ID of the tweet you want the retweets of. Since: Twitter4J 2.1.0 See Also: Tweets Resources › statuses/retweets/:id showStatus void showStatus(long id) Returns a single status, specified by the id parameter below. The status's author will be returned inline. This method calls https://api.twitter.com/1.1/statuses/show Parameters: id - int Since: Twitter4J 2.0.1 See Also: GET statuses/show/:id | Twitter Developers destroyStatus void destroyStatus(long statusId) Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. This method calls https://api.twitter.com/1.1/statuses/destroy Parameters: statusId - String Since: 1.1.2 See Also: POST statuses/destroy/:id | Twitter Developers updateStatus void updateStatus(java.lang.String status) Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. This method calls https://api.twitter.com/1.1/statuses/update Parameters: status - String Since: Twitter4J 2.0.1 See Also: POST statuses/update | Twitter Developers updateStatus void updateStatus(StatusUpdate status) Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. Statuses over 140 characters will be forcibly truncated. This method calls https://api.twitter.com/1.1/statuses/update Parameters: status - the latest status to be updated. Since: Twitter4J 2.1.1 See Also: POST statuses/update | Twitter Developers retweetStatus void retweetStatus(long statusId) Retweets a tweet. Returns the original tweet with retweet details embedded. This method calls https://api.twitter.com/1.1/statuses/retweet Parameters: statusId - The ID of the status to retweet. Since: Twitter4J 2.0.10 See Also: POST statuses/retweet/:id | Twitter Developers getOEmbed void getOEmbed(OEmbedRequest req) Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification for information about the response format. While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements. Do not rely on any class or id parameters to stay constant in the returned markup. This method calls https://api.twitter.com/1.1/statuses/oembed.json Parameters: req - request Since: Twitter4J 3.0.2 See Also: GET statuses/oembed | Twitter Developers lookup void lookup(long... ids) Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. This method is especially useful to get the details (hydrate) a collection of Tweet IDs. This method calls https://api.twitter.com/1.1/statuses/lookup.json Parameters: ids - array of the ids to lookup Since: Twitter4J 4.0.2 See Also: GET statuses/lookup Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwippleUpload <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwippleUpload"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Class TwippleUpload java.lang.Object twitter4j.media.AbstractImageUploadImpl twitter4j.media.TwippleUpload All Implemented Interfaces: ImageUpload class TwippleUpload extends AbstractImageUploadImpl Since: Twitter4J 2.1.8 Author: withgod - noname at withgod.jp Field Summary Fields inherited from class twitter4j.media.AbstractImageUploadImpl apiKey, headers, httpResponse, image, message, oauth, postParameter, TWITTER_VERIFY_CREDENTIALS_JSON_V1_1, uploadUrl Constructor Summary Constructors  Constructor and Description TwippleUpload(Configuration conf, OAuthAuthorization oauth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description protected java.lang.String postUpload()  protected void preUpload()  Methods inherited from class twitter4j.media.AbstractImageUploadImpl appendHttpParameters, equals, generateVerifyCredentialsAuthorizationHeader, generateVerifyCredentialsAuthorizationURL, hashCode, toString, upload, upload, upload, upload Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Constructor Detail TwippleUpload public TwippleUpload(Configuration conf, OAuthAuthorization oauth) Method Detail postUpload protected java.lang.String postUpload() throws TwitterException Specified by: postUpload in class AbstractImageUploadImpl Throws: TwitterException preUpload protected void preUpload() throws TwitterException Specified by: preUpload in class AbstractImageUploadImpl Throws: TwitterException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Twitter <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Twitter"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface Twitter All Superinterfaces: DirectMessagesResources, FavoritesResources, FriendsFollowersResources, HelpResources, ListsResources, OAuth2Support, OAuthSupport, PlacesGeoResources, SavedSearchesResources, SearchResource, java.io.Serializable, SpamReportingResource, SuggestedUsersResources, TimelinesResources, TrendsResources, TweetsResources, TwitterBase, UsersResources All Known Implementing Classes: TwitterImpl public interface Twitter extends java.io.Serializable, OAuthSupport, OAuth2Support, TwitterBase, TimelinesResources, TweetsResources, SearchResource, DirectMessagesResources, FriendsFollowersResources, UsersResources, SuggestedUsersResources, FavoritesResources, ListsResources, SavedSearchesResources, PlacesGeoResources, TrendsResources, SpamReportingResource, HelpResources Since: Twitter4J 2.2.0 Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested classes/interfaces inherited from interface twitter4j.api.HelpResources HelpResources.Language Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description DirectMessagesResources directMessages()  FavoritesResources favorites()  FriendsFollowersResources friendsFollowers()  HelpResources help()  ListsResources list()  PlacesGeoResources placesGeo()  SavedSearchesResources savedSearches()  SearchResource search()  SpamReportingResource spamReporting()  SuggestedUsersResources suggestedUsers()  TimelinesResources timelines()  TrendsResources trends()  TweetsResources tweets()  UsersResources users()  Methods inherited from interface twitter4j.auth.OAuthSupport getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, setOAuthAccessToken, setOAuthConsumer Methods inherited from interface twitter4j.auth.OAuth2Support getOAuth2Token, invalidateOAuth2Token, setOAuth2Token, setOAuthConsumer Methods inherited from interface twitter4j.TwitterBase addRateLimitStatusListener, getAuthorization, getConfiguration, getId, getScreenName, onRateLimitReached, onRateLimitStatus Methods inherited from interface twitter4j.api.TimelinesResources getHomeTimeline, getHomeTimeline, getMentionsTimeline, getMentionsTimeline, getRetweetsOfMe, getRetweetsOfMe, getUserTimeline, getUserTimeline, getUserTimeline, getUserTimeline, getUserTimeline, getUserTimeline Methods inherited from interface twitter4j.api.TweetsResources destroyStatus, getOEmbed, getRetweeterIds, getRetweeterIds, getRetweets, lookup, retweetStatus, showStatus, updateStatus, updateStatus, uploadMedia, uploadMedia Methods inherited from interface twitter4j.api.SearchResource search Methods inherited from interface twitter4j.api.DirectMessagesResources destroyDirectMessage, getDirectMessages, getDirectMessages, getDMImageAsStream, getSentDirectMessages, getSentDirectMessages, sendDirectMessage, sendDirectMessage, showDirectMessage Methods inherited from interface twitter4j.api.FriendsFollowersResources createFriendship, createFriendship, createFriendship, createFriendship, destroyFriendship, destroyFriendship, getFollowersIDs, getFollowersIDs, getFollowersIDs, getFollowersIDs, getFollowersIDs, getFollowersList, getFollowersList, getFollowersList, getFollowersList, getFollowersList, getFollowersList, getFriendsIDs, getFriendsIDs, getFriendsIDs, getFriendsIDs, getFriendsIDs, getFriendsList, getFriendsList, getFriendsList, getFriendsList, getFriendsList, getFriendsList, getIncomingFriendships, getNoRetweetsFriendships, getOutgoingFriendships, lookupFriendships, lookupFriendships, showFriendship, showFriendship, updateFriendship, updateFriendship Methods inherited from interface twitter4j.api.UsersResources createBlock, createBlock, createMute, createMute, destroyBlock, destroyBlock, destroyMute, destroyMute, getAccountSettings, getBlocksIDs, getBlocksIDs, getBlocksList, getBlocksList, getContributees, getContributees, getContributors, getContributors, getMutesIDs, getMutesList, lookupUsers, lookupUsers, removeProfileBanner, searchUsers, showUser, showUser, updateAccountSettings, updateProfile, updateProfileBackgroundImage, updateProfileBackgroundImage, updateProfileBanner, updateProfileBanner, updateProfileColors, updateProfileImage, updateProfileImage, verifyCredentials Methods inherited from interface twitter4j.api.SuggestedUsersResources getMemberSuggestions, getSuggestedUserCategories, getUserSuggestions Methods inherited from interface twitter4j.api.FavoritesResources createFavorite, destroyFavorite, getFavorites, getFavorites, getFavorites, getFavorites, getFavorites, getFavorites Methods inherited from interface twitter4j.api.ListsResources createUserList, createUserListMember, createUserListMember, createUserListMember, createUserListMembers, createUserListMembers, createUserListMembers, createUserListMembers, createUserListMembers, createUserListMembers, createUserListSubscription, createUserListSubscription, createUserListSubscription, destroyUserList, destroyUserList, destroyUserList, destroyUserListMember, destroyUserListMember, destroyUserListMember, destroyUserListMember, destroyUserListMembers, destroyUserListMembers, destroyUserListMembers, destroyUserListSubscription, destroyUserListSubscription, destroyUserListSubscription, getUserListMembers, getUserListMembers, getUserListMembers, getUserListMembers, getUserListMembers, getUserListMembers, getUserListMembers, getUserListMembers, getUserListMembers, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserListMemberships, getUserLists, getUserLists, getUserLists, getUserLists, getUserListsOwnerships, getUserListsOwnerships, getUserListsOwnerships, getUserListsOwnerships, getUserListStatuses, getUserListStatuses, getUserListStatuses, getUserListSubscribers, getUserListSubscribers, getUserListSubscribers, getUserListSubscribers, getUserListSubscribers, getUserListSubscribers, getUserListSubscribers, getUserListSubscribers, getUserListSubscribers, getUserListSubscriptions, getUserListSubscriptions, getUserListSubscriptions, getUserListSubscriptions, showUserList, showUserList, showUserList, showUserListMembership, showUserListMembership, showUserListMembership, showUserListSubscription, showUserListSubscription, showUserListSubscription, updateUserList, updateUserList, updateUserList Methods inherited from interface twitter4j.api.SavedSearchesResources createSavedSearch, destroySavedSearch, getSavedSearches, showSavedSearch Methods inherited from interface twitter4j.api.PlacesGeoResources getGeoDetails, getSimilarPlaces, reverseGeoCode, searchPlaces Methods inherited from interface twitter4j.api.TrendsResources getAvailableTrends, getClosestTrends, getPlaceTrends Methods inherited from interface twitter4j.api.SpamReportingResource reportSpam, reportSpam Methods inherited from interface twitter4j.api.HelpResources getAPIConfiguration, getLanguages, getPrivacyPolicy, getRateLimitStatus, getRateLimitStatus, getTermsOfService Method Detail timelines TimelinesResources timelines() Returns: TimelinesResources Since: Twitter4J 3.0.4 tweets TweetsResources tweets() Returns: TweetsResources Since: Twitter4J 3.0.4 search SearchResource search() Returns: SearchResource Since: Twitter4J 3.0.4 directMessages DirectMessagesResources directMessages() Returns: DirectMessagesResources Since: Twitter4J 3.0.4 friendsFollowers FriendsFollowersResources friendsFollowers() Returns: FriendsFollowersResources Since: Twitter4J 3.0.4 users UsersResources users() Returns: UsersResources Since: Twitter4J 3.0.4 suggestedUsers SuggestedUsersResources suggestedUsers() Returns: SuggestedUsersResources Since: Twitter4J 3.0.4 favorites FavoritesResources favorites() Returns: FavoritesResources Since: Twitter4J 3.0.4 list ListsResources list() Returns: ListsResources Since: Twitter4J 3.0.4 savedSearches SavedSearchesResources savedSearches() Returns: SavedSearchesResources Since: Twitter4J 3.0.4 placesGeo PlacesGeoResources placesGeo() Returns: PlacesGeoResources Since: Twitter4J 3.0.4 trends TrendsResources trends() Returns: TrendsResources Since: Twitter4J 3.0.4 spamReporting SpamReportingResource spamReporting() Returns: SpamReportingResource Since: Twitter4J 3.0.4 help HelpResources help() Returns: HelpResources Since: Twitter4J 3.0.4 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterAPIConfiguration <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterAPIConfiguration"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface TwitterAPIConfiguration All Superinterfaces: java.io.Serializable, TwitterResponse public interface TwitterAPIConfiguration extends TwitterResponse, java.io.Serializable Since: Twitter4J 2.2.3 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getCharactersReservedPerMedia()  int getMaxMediaPerUpload()  java.lang.String[] getNonUsernamePaths()  int getPhotoSizeLimit()  java.util.Map<java.lang.Integer,MediaEntity.Size> getPhotoSizes()  int getShortURLLength()  int getShortURLLengthHttps()  Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getPhotoSizeLimit int getPhotoSizeLimit() getShortURLLength int getShortURLLength() getShortURLLengthHttps int getShortURLLengthHttps() getCharactersReservedPerMedia int getCharactersReservedPerMedia() getPhotoSizes java.util.Map<java.lang.Integer,MediaEntity.Size> getPhotoSizes() getNonUsernamePaths java.lang.String[] getNonUsernamePaths() getMaxMediaPerUpload int getMaxMediaPerUpload() Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterAPIMonitor <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterAPIMonitor"; } } catch(err) { } //--> var methods = {"i0":9,"i1":10,"i2":10}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterAPIMonitor java.lang.Object twitter4j.TwitterAPIMonitor public class TwitterAPIMonitor extends java.lang.Object Singleton instance of all Twitter API monitoring. Handles URL parsing and "wire off" logic. We could avoid using a singleton here if Twitter objects were instantiated from a factory. Since: Twitter4J 2.2.1 Author: Nick Dellamaggiore (nick.dellamaggiore at gmail.com) Field Summary Fields  Modifier and Type Field and Description private static Logger logger  private static java.util.regex.Pattern pattern  private static TwitterAPIMonitor SINGLETON  private static APIStatistics STATISTICS  Constructor Summary Constructors  Modifier Constructor and Description private TwitterAPIMonitor() Constructor Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description static TwitterAPIMonitor getInstance()  APIStatisticsMBean getStatistics()  (package private) void methodCalled(java.lang.String twitterUrl, long elapsedTime, boolean success)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail logger private static final Logger logger pattern private static final java.util.regex.Pattern pattern SINGLETON private static final TwitterAPIMonitor SINGLETON STATISTICS private static final APIStatistics STATISTICS Constructor Detail TwitterAPIMonitor private TwitterAPIMonitor() Constructor Method Detail getInstance public static TwitterAPIMonitor getInstance() getStatistics public APIStatisticsMBean getStatistics() methodCalled void methodCalled(java.lang.String twitterUrl, long elapsedTime, boolean success) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterAdapter <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterAdapter"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterAdapter java.lang.Object twitter4j.TwitterAdapter All Implemented Interfaces: TwitterListener public class TwitterAdapter extends java.lang.Object implements TwitterListener A handy adapter of TwitterListener. Author: Yusuke Yamamoto - yusuke at mac.com See Also: AsyncTwitter, TwitterListener Constructor Summary Constructors  Constructor and Description TwitterAdapter()  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void checkedUserListMembership(User users)  void checkedUserListSubscription(User user)  void createdBlock(User user)  void createdFavorite(Status status)  void createdFriendship(User user)  void createdMute(User user)  void createdSavedSearch(SavedSearch savedSearch)  void createdUserList(UserList userList)  void createdUserListMember(UserList userList)  void createdUserListMembers(UserList userList)  void destroyedBlock(User user)  void destroyedDirectMessage(DirectMessage message)  void destroyedFavorite(Status status)  void destroyedFriendship(User user)  void destroyedMute(User user)  void destroyedSavedSearch(SavedSearch savedSearch)  void destroyedStatus(Status destroyedStatus)  void destroyedUserList(UserList userList)  void destroyedUserListMember(UserList userList)  void gotAccountSettings(AccountSettings settings)  void gotAPIConfiguration(TwitterAPIConfiguration conf)  void gotAvailableTrends(ResponseList<Location> locations)  void gotBlockIDs(IDs blockingUsersIDs)  void gotBlocksList(ResponseList<User> blockingUsers)  void gotClosestTrends(ResponseList<Location> locations)  void gotContributees(ResponseList<User> users)  void gotContributors(ResponseList<User> users)  void gotDirectMessage(DirectMessage message)  void gotDirectMessages(ResponseList<DirectMessage> messages)  void gotFavorites(ResponseList<Status> statuses)  void gotFollowersIDs(IDs ids)  void gotFollowersList(PagableResponseList<User> users)  void gotFriendsIDs(IDs ids)  void gotFriendsList(PagableResponseList<User> users)  void gotGeoDetails(Place place)  void gotHomeTimeline(ResponseList<Status> statuses)  void gotIncomingFriendships(IDs ids)  void gotLanguages(ResponseList<HelpResources.Language> languages)  void gotMemberSuggestions(ResponseList<User> users)  void gotMentions(ResponseList<Status> statuses)  void gotMuteIDs(IDs blockingUsersIDs)  void gotMutesList(ResponseList<User> blockingUsers)  void gotOAuth2Token(OAuth2Token token)  void gotOAuthAccessToken(AccessToken token)  void gotOAuthRequestToken(RequestToken token)  void gotOEmbed(OEmbed oembed)  void gotOutgoingFriendships(IDs ids)  void gotPlaceTrends(Trends trends)  void gotPrivacyPolicy(java.lang.String privacyPolicy)  void gotRateLimitStatus(java.util.Map<java.lang.String,RateLimitStatus> rateLimitStatus)  void gotRetweets(ResponseList<Status> retweets)  void gotRetweetsOfMe(ResponseList<Status> statuses)  void gotReverseGeoCode(ResponseList<Place> places)  void gotSavedSearch(SavedSearch savedSearch)  void gotSavedSearches(ResponseList<SavedSearch> savedSearches)  void gotSentDirectMessages(ResponseList<DirectMessage> messages)  void gotShowFriendship(Relationship relationship)  void gotShowStatus(Status status)  void gotShowUserList(UserList userList)  void gotSimilarPlaces(ResponseList<Place> places)  void gotSuggestedUserCategories(ResponseList<Category> category)  void gotTermsOfService(java.lang.String tof)  void gotUserDetail(User user)  void gotUserListMembers(PagableResponseList<User> users)  void gotUserListMemberships(PagableResponseList<UserList> userLists)  void gotUserLists(ResponseList<UserList> userLists)  void gotUserListStatuses(ResponseList<Status> statuses)  void gotUserListSubscribers(PagableResponseList<User> users)  void gotUserListSubscriptions(PagableResponseList<UserList> userLists)  void gotUserSuggestions(ResponseList<User> users)  void gotUserTimeline(ResponseList<Status> statuses)  void lookedup(ResponseList<Status> statuses)  void lookedUpFriendships(ResponseList<Friendship> friendships)  void lookedupUsers(ResponseList<User> users)  void onException(TwitterException te, TwitterMethod method)  void removedProfileBanner()  void reportedSpam(User reportedSpammer)  void retweetedStatus(Status retweetedStatus)  void searched(QueryResult queryResult)  void searchedPlaces(ResponseList<Place> places)  void searchedUser(ResponseList<User> userList)  void sentDirectMessage(DirectMessage message)  void subscribedUserList(UserList userList)  void unsubscribedUserList(UserList userList)  void updatedAccountSettings(AccountSettings settings)  void updatedFriendship(Relationship relationship)  void updatedProfile(User user)  void updatedProfileBackgroundImage(User user)  void updatedProfileBanner()  void updatedProfileColors(User user)  void updatedProfileImage(User user)  void updatedStatus(Status status)  void updatedUserList(UserList userList)  void verifiedCredentials(User user)  Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Constructor Detail TwitterAdapter public TwitterAdapter() Method Detail gotMentions public void gotMentions(ResponseList<Status> statuses) Specified by: gotMentions in interface TwitterListener gotHomeTimeline public void gotHomeTimeline(ResponseList<Status> statuses) Specified by: gotHomeTimeline in interface TwitterListener gotUserTimeline public void gotUserTimeline(ResponseList<Status> statuses) Specified by: gotUserTimeline in interface TwitterListener gotRetweetsOfMe public void gotRetweetsOfMe(ResponseList<Status> statuses) Specified by: gotRetweetsOfMe in interface TwitterListener gotRetweets public void gotRetweets(ResponseList<Status> retweets) Specified by: gotRetweets in interface TwitterListener gotShowStatus public void gotShowStatus(Status status) Specified by: gotShowStatus in interface TwitterListener destroyedStatus public void destroyedStatus(Status destroyedStatus) Specified by: destroyedStatus in interface TwitterListener updatedStatus public void updatedStatus(Status status) Specified by: updatedStatus in interface TwitterListener retweetedStatus public void retweetedStatus(Status retweetedStatus) Specified by: retweetedStatus in interface TwitterListener gotOEmbed public void gotOEmbed(OEmbed oembed) Specified by: gotOEmbed in interface TwitterListener lookedup public void lookedup(ResponseList<Status> statuses) Specified by: lookedup in interface TwitterListener searched public void searched(QueryResult queryResult) Specified by: searched in interface TwitterListener gotDirectMessages public void gotDirectMessages(ResponseList<DirectMessage> messages) Specified by: gotDirectMessages in interface TwitterListener gotSentDirectMessages public void gotSentDirectMessages(ResponseList<DirectMessage> messages) Specified by: gotSentDirectMessages in interface TwitterListener gotDirectMessage public void gotDirectMessage(DirectMessage message) Specified by: gotDirectMessage in interface TwitterListener destroyedDirectMessage public void destroyedDirectMessage(DirectMessage message) Specified by: destroyedDirectMessage in interface TwitterListener sentDirectMessage public void sentDirectMessage(DirectMessage message) Specified by: sentDirectMessage in interface TwitterListener gotFriendsIDs public void gotFriendsIDs(IDs ids) Specified by: gotFriendsIDs in interface TwitterListener gotFollowersIDs public void gotFollowersIDs(IDs ids) Specified by: gotFollowersIDs in interface TwitterListener lookedUpFriendships public void lookedUpFriendships(ResponseList<Friendship> friendships) Specified by: lookedUpFriendships in interface TwitterListener gotIncomingFriendships public void gotIncomingFriendships(IDs ids) Specified by: gotIncomingFriendships in interface TwitterListener gotOutgoingFriendships public void gotOutgoingFriendships(IDs ids) Specified by: gotOutgoingFriendships in interface TwitterListener createdFriendship public void createdFriendship(User user) Specified by: createdFriendship in interface TwitterListener destroyedFriendship public void destroyedFriendship(User user) Specified by: destroyedFriendship in interface TwitterListener updatedFriendship public void updatedFriendship(Relationship relationship) Specified by: updatedFriendship in interface TwitterListener gotShowFriendship public void gotShowFriendship(Relationship relationship) Specified by: gotShowFriendship in interface TwitterListener gotFriendsList public void gotFriendsList(PagableResponseList<User> users) Specified by: gotFriendsList in interface TwitterListener gotFollowersList public void gotFollowersList(PagableResponseList<User> users) Specified by: gotFollowersList in interface TwitterListener gotAccountSettings public void gotAccountSettings(AccountSettings settings) Specified by: gotAccountSettings in interface TwitterListener verifiedCredentials public void verifiedCredentials(User user) Specified by: verifiedCredentials in interface TwitterListener updatedAccountSettings public void updatedAccountSettings(AccountSettings settings) Specified by: updatedAccountSettings in interface TwitterListener updatedProfile public void updatedProfile(User user) Specified by: updatedProfile in interface TwitterListener updatedProfileBackgroundImage public void updatedProfileBackgroundImage(User user) Specified by: updatedProfileBackgroundImage in interface TwitterListener updatedProfileColors public void updatedProfileColors(User user) Specified by: updatedProfileColors in interface TwitterListener updatedProfileImage public void updatedProfileImage(User user) Specified by: updatedProfileImage in interface TwitterListener gotBlocksList public void gotBlocksList(ResponseList<User> blockingUsers) Specified by: gotBlocksList in interface TwitterListener gotBlockIDs public void gotBlockIDs(IDs blockingUsersIDs) Specified by: gotBlockIDs in interface TwitterListener createdBlock public void createdBlock(User user) Specified by: createdBlock in interface TwitterListener destroyedBlock public void destroyedBlock(User user) Specified by: destroyedBlock in interface TwitterListener lookedupUsers public void lookedupUsers(ResponseList<User> users) Specified by: lookedupUsers in interface TwitterListener gotUserDetail public void gotUserDetail(User user) Specified by: gotUserDetail in interface TwitterListener searchedUser public void searchedUser(ResponseList<User> userList) Specified by: searchedUser in interface TwitterListener gotContributees public void gotContributees(ResponseList<User> users) Specified by: gotContributees in interface TwitterListener gotContributors public void gotContributors(ResponseList<User> users) Specified by: gotContributors in interface TwitterListener removedProfileBanner public void removedProfileBanner() Specified by: removedProfileBanner in interface TwitterListener updatedProfileBanner public void updatedProfileBanner() Specified by: updatedProfileBanner in interface TwitterListener gotMutesList public void gotMutesList(ResponseList<User> blockingUsers) Specified by: gotMutesList in interface TwitterListener gotMuteIDs public void gotMuteIDs(IDs blockingUsersIDs) Specified by: gotMuteIDs in interface TwitterListener createdMute public void createdMute(User user) Specified by: createdMute in interface TwitterListener destroyedMute public void destroyedMute(User user) Specified by: destroyedMute in interface TwitterListener gotUserSuggestions public void gotUserSuggestions(ResponseList<User> users) Specified by: gotUserSuggestions in interface TwitterListener gotSuggestedUserCategories public void gotSuggestedUserCategories(ResponseList<Category> category) Specified by: gotSuggestedUserCategories in interface TwitterListener gotMemberSuggestions public void gotMemberSuggestions(ResponseList<User> users) Specified by: gotMemberSuggestions in interface TwitterListener gotFavorites public void gotFavorites(ResponseList<Status> statuses) Specified by: gotFavorites in interface TwitterListener createdFavorite public void createdFavorite(Status status) Specified by: createdFavorite in interface TwitterListener destroyedFavorite public void destroyedFavorite(Status status) Specified by: destroyedFavorite in interface TwitterListener gotUserLists public void gotUserLists(ResponseList<UserList> userLists) Specified by: gotUserLists in interface TwitterListener gotUserListStatuses public void gotUserListStatuses(ResponseList<Status> statuses) Specified by: gotUserListStatuses in interface TwitterListener destroyedUserListMember public void destroyedUserListMember(UserList userList) Specified by: destroyedUserListMember in interface TwitterListener gotUserListMemberships public void gotUserListMemberships(PagableResponseList<UserList> userLists) Specified by: gotUserListMemberships in interface TwitterListener gotUserListSubscribers public void gotUserListSubscribers(PagableResponseList<User> users) Specified by: gotUserListSubscribers in interface TwitterListener subscribedUserList public void subscribedUserList(UserList userList) Specified by: subscribedUserList in interface TwitterListener checkedUserListSubscription public void checkedUserListSubscription(User user) Specified by: checkedUserListSubscription in interface TwitterListener unsubscribedUserList public void unsubscribedUserList(UserList userList) Specified by: unsubscribedUserList in interface TwitterListener createdUserListMembers public void createdUserListMembers(UserList userList) Specified by: createdUserListMembers in interface TwitterListener checkedUserListMembership public void checkedUserListMembership(User users) Specified by: checkedUserListMembership in interface TwitterListener createdUserListMember public void createdUserListMember(UserList userList) Specified by: createdUserListMember in interface TwitterListener destroyedUserList public void destroyedUserList(UserList userList) Specified by: destroyedUserList in interface TwitterListener updatedUserList public void updatedUserList(UserList userList) Specified by: updatedUserList in interface TwitterListener createdUserList public void createdUserList(UserList userList) Specified by: createdUserList in interface TwitterListener gotShowUserList public void gotShowUserList(UserList userList) Specified by: gotShowUserList in interface TwitterListener gotUserListSubscriptions public void gotUserListSubscriptions(PagableResponseList<UserList> userLists) Specified by: gotUserListSubscriptions in interface TwitterListener gotUserListMembers public void gotUserListMembers(PagableResponseList<User> users) Specified by: gotUserListMembers in interface TwitterListener gotSavedSearches public void gotSavedSearches(ResponseList<SavedSearch> savedSearches) Specified by: gotSavedSearches in interface TwitterListener gotSavedSearch public void gotSavedSearch(SavedSearch savedSearch) Specified by: gotSavedSearch in interface TwitterListener createdSavedSearch public void createdSavedSearch(SavedSearch savedSearch) Specified by: createdSavedSearch in interface TwitterListener destroyedSavedSearch public void destroyedSavedSearch(SavedSearch savedSearch) Specified by: destroyedSavedSearch in interface TwitterListener gotGeoDetails public void gotGeoDetails(Place place) Specified by: gotGeoDetails in interface TwitterListener gotReverseGeoCode public void gotReverseGeoCode(ResponseList<Place> places) Specified by: gotReverseGeoCode in interface TwitterListener searchedPlaces public void searchedPlaces(ResponseList<Place> places) Specified by: searchedPlaces in interface TwitterListener gotSimilarPlaces public void gotSimilarPlaces(ResponseList<Place> places) Specified by: gotSimilarPlaces in interface TwitterListener gotPlaceTrends public void gotPlaceTrends(Trends trends) Specified by: gotPlaceTrends in interface TwitterListener gotAvailableTrends public void gotAvailableTrends(ResponseList<Location> locations) Specified by: gotAvailableTrends in interface TwitterListener gotClosestTrends public void gotClosestTrends(ResponseList<Location> locations) Specified by: gotClosestTrends in interface TwitterListener reportedSpam public void reportedSpam(User reportedSpammer) Specified by: reportedSpam in interface TwitterListener gotOAuthRequestToken public void gotOAuthRequestToken(RequestToken token) Specified by: gotOAuthRequestToken in interface TwitterListener gotOAuthAccessToken public void gotOAuthAccessToken(AccessToken token) Specified by: gotOAuthAccessToken in interface TwitterListener gotOAuth2Token public void gotOAuth2Token(OAuth2Token token) Specified by: gotOAuth2Token in interface TwitterListener gotAPIConfiguration public void gotAPIConfiguration(TwitterAPIConfiguration conf) Specified by: gotAPIConfiguration in interface TwitterListener gotLanguages public void gotLanguages(ResponseList<HelpResources.Language> languages) Specified by: gotLanguages in interface TwitterListener gotPrivacyPolicy public void gotPrivacyPolicy(java.lang.String privacyPolicy) Specified by: gotPrivacyPolicy in interface TwitterListener gotTermsOfService public void gotTermsOfService(java.lang.String tof) Specified by: gotTermsOfService in interface TwitterListener gotRateLimitStatus public void gotRateLimitStatus(java.util.Map<java.lang.String,RateLimitStatus> rateLimitStatus) Specified by: gotRateLimitStatus in interface TwitterListener onException public void onException(TwitterException te, TwitterMethod method) Specified by: onException in interface TwitterListener Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterBase <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterBase"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface TwitterBase All Known Subinterfaces: AsyncTwitter, Twitter, TwitterStream All Known Implementing Classes: AsyncTwitterImpl, TwitterBaseImpl, TwitterImpl, TwitterStreamImpl public interface TwitterBase Since: Twitter4J 2.2.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void addRateLimitStatusListener(RateLimitStatusListener listener) Registers a RateLimitStatusListener for account associated rate limits Authorization getAuthorization() Returns the authorization scheme for this instance. The returned type will be either of BasicAuthorization, OAuthAuthorization, or NullAuthorization Configuration getConfiguration() Returns the configuration associated with this instance long getId() Returns authenticating user's user id. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. java.lang.String getScreenName() Returns authenticating user's screen name. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. Note that this method returns a transiently cached (will be lost upon serialization) screen name while it is possible to change a user's screen name. void onRateLimitReached(Consumer<RateLimitStatusEvent> action) Registers a RateLimitStatusListener for account associated rate limits void onRateLimitStatus(Consumer<RateLimitStatusEvent> action) Registers a lambda action for account associated rate limits Method Detail getScreenName java.lang.String getScreenName() throws TwitterException, java.lang.IllegalStateException Returns authenticating user's screen name. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. Note that this method returns a transiently cached (will be lost upon serialization) screen name while it is possible to change a user's screen name. Returns: the authenticating screen name Throws: TwitterException - when verifyCredentials threw an exception. java.lang.IllegalStateException - if no credentials are supplied. i.e.) this is an anonymous Twitter instance Since: Twitter4J 2.1.1 getId long getId() throws TwitterException, java.lang.IllegalStateException Returns authenticating user's user id. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. Returns: the authenticating user's id Throws: TwitterException - when verifyCredentials threw an exception. java.lang.IllegalStateException - if no credentials are supplied. i.e.) this is an anonymous Twitter instance Since: Twitter4J 2.1.1 addRateLimitStatusListener void addRateLimitStatusListener(RateLimitStatusListener listener) Registers a RateLimitStatusListener for account associated rate limits Parameters: listener - the listener to be added Since: Twitter4J 2.1.12 See Also: Rate Limiting | Twitter Developers onRateLimitStatus void onRateLimitStatus(Consumer<RateLimitStatusEvent> action) Registers a lambda action for account associated rate limits Parameters: action - the action to be added Since: Twitter4J 4.0.4 See Also: Rate Limiting | Twitter Developers onRateLimitReached void onRateLimitReached(Consumer<RateLimitStatusEvent> action) Registers a RateLimitStatusListener for account associated rate limits Parameters: action - the action to be added Since: Twitter4J 4.0.4 See Also: Rate Limiting | Twitter Developers getAuthorization Authorization getAuthorization() Returns the authorization scheme for this instance. The returned type will be either of BasicAuthorization, OAuthAuthorization, or NullAuthorization Returns: the authorization scheme for this instance getConfiguration Configuration getConfiguration() Returns the configuration associated with this instance Returns: configuration associated with this instance Since: Twitter4J 2.1.8 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterBaseImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterBaseImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterBaseImpl java.lang.Object twitter4j.TwitterBaseImpl All Implemented Interfaces: java.io.Serializable, OAuth2Support, OAuthSupport, TwitterBase Direct Known Subclasses: AsyncTwitterImpl, TwitterImpl, TwitterStreamImpl abstract class TwitterBaseImpl extends java.lang.Object implements TwitterBase, java.io.Serializable, OAuthSupport, OAuth2Support Base class of Twitter / AsyncTwitter / TwitterStream supports OAuth. Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description (package private) Authorization auth  (package private) Configuration conf  (package private) ObjectFactory factory  (package private) HttpClient http  private long id  private java.util.List<RateLimitStatusListener> rateLimitStatusListeners  private java.lang.String screenName  private static long serialVersionUID  private static java.lang.String WWW_DETAILS  Constructor Summary Constructors  Constructor and Description TwitterBaseImpl(Configuration conf, Authorization auth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void addRateLimitStatusListener(RateLimitStatusListener listener) Registers a RateLimitStatusListener for account associated rate limits (package private) void ensureAuthorizationEnabled()  (package private) void ensureOAuthEnabled()  boolean equals(java.lang.Object o)  (package private) User fillInIDAndScreenName()  Authorization getAuthorization() Returns the authorization scheme for this instance. The returned type will be either of BasicAuthorization, OAuthAuthorization, or NullAuthorization Configuration getConfiguration() Returns the configuration associated with this instance long getId() Returns authenticating user's user id. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. private OAuthSupport getOAuth()  private OAuth2Support getOAuth2()  OAuth2Token getOAuth2Token() Obtains an OAuth 2 Bearer token. AccessToken getOAuthAccessToken() Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. AccessToken getOAuthAccessToken(RequestToken requestToken) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) Retrieves an access token associated with the supplied request token and sets userId. AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) Retrieves an access token. AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. RequestToken getOAuthRequestToken() Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackUrl) Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackUrl, java.lang.String xAuthAccessType) Retrieves a request token RequestToken getOAuthRequestToken(java.lang.String callbackUrl, java.lang.String xAuthAccessType, java.lang.String xAuthMode) Retrieves a request token java.lang.String getScreenName() Returns authenticating user's screen name. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. Note that this method returns a transiently cached (will be lost upon serialization) screen name while it is possible to change a user's screen name. int hashCode()  void httpResponseReceived(HttpResponseEvent event)  private void init()  void invalidateOAuth2Token() Revokes an issued OAuth 2 Bearer Token. void onRateLimitReached(Consumer<RateLimitStatusEvent> action) Registers a RateLimitStatusListener for account associated rate limits void onRateLimitStatus(Consumer<RateLimitStatusEvent> action) Registers a lambda action for account associated rate limits private void readObject(java.io.ObjectInputStream stream)  (package private) void setFactory()  void setOAuth2Token(OAuth2Token oauth2Token) Sets the OAuth 2 Bearer token. void setOAuthAccessToken(AccessToken accessToken) Sets the access token void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) sets the OAuth consumer key and consumer secret java.lang.String toString()  private void writeObject(java.io.ObjectOutputStream out)  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail WWW_DETAILS private static final java.lang.String WWW_DETAILS See Also: Constant Field Values serialVersionUID private static final long serialVersionUID See Also: Constant Field Values conf Configuration conf screenName private transient java.lang.String screenName id private transient long id http transient HttpClient http rateLimitStatusListeners private java.util.List<RateLimitStatusListener> rateLimitStatusListeners factory ObjectFactory factory auth Authorization auth Constructor Detail TwitterBaseImpl TwitterBaseImpl(Configuration conf, Authorization auth) Method Detail init private void init() setFactory void setFactory() getScreenName public java.lang.String getScreenName() throws TwitterException, java.lang.IllegalStateException Description copied from interface: TwitterBase Returns authenticating user's screen name. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. Note that this method returns a transiently cached (will be lost upon serialization) screen name while it is possible to change a user's screen name. Specified by: getScreenName in interface TwitterBase Returns: the authenticating screen name Throws: TwitterException - when verifyCredentials threw an exception. java.lang.IllegalStateException - if no credentials are supplied. i.e.) this is an anonymous Twitter instance getId public long getId() throws TwitterException, java.lang.IllegalStateException Description copied from interface: TwitterBase Returns authenticating user's user id. This method may internally call verifyCredentials() on the first invocation if - this instance is authenticated by Basic and email address is supplied instead of screen name, or - this instance is authenticated by OAuth. Specified by: getId in interface TwitterBase Returns: the authenticating user's id Throws: TwitterException - when verifyCredentials threw an exception. java.lang.IllegalStateException - if no credentials are supplied. i.e.) this is an anonymous Twitter instance fillInIDAndScreenName User fillInIDAndScreenName() throws TwitterException Throws: TwitterException addRateLimitStatusListener public void addRateLimitStatusListener(RateLimitStatusListener listener) Description copied from interface: TwitterBase Registers a RateLimitStatusListener for account associated rate limits Specified by: addRateLimitStatusListener in interface TwitterBase Parameters: listener - the listener to be added See Also: Rate Limiting | Twitter Developers onRateLimitStatus public void onRateLimitStatus(Consumer<RateLimitStatusEvent> action) Description copied from interface: TwitterBase Registers a lambda action for account associated rate limits Specified by: onRateLimitStatus in interface TwitterBase Parameters: action - the action to be added See Also: Rate Limiting | Twitter Developers onRateLimitReached public void onRateLimitReached(Consumer<RateLimitStatusEvent> action) Description copied from interface: TwitterBase Registers a RateLimitStatusListener for account associated rate limits Specified by: onRateLimitReached in interface TwitterBase Parameters: action - the action to be added See Also: Rate Limiting | Twitter Developers httpResponseReceived public void httpResponseReceived(HttpResponseEvent event) getAuthorization public final Authorization getAuthorization() Description copied from interface: TwitterBase Returns the authorization scheme for this instance. The returned type will be either of BasicAuthorization, OAuthAuthorization, or NullAuthorization Specified by: getAuthorization in interface TwitterBase Returns: the authorization scheme for this instance getConfiguration public Configuration getConfiguration() Description copied from interface: TwitterBase Returns the configuration associated with this instance Specified by: getConfiguration in interface TwitterBase Returns: configuration associated with this instance ensureAuthorizationEnabled final void ensureAuthorizationEnabled() ensureOAuthEnabled final void ensureOAuthEnabled() writeObject private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException Throws: java.io.IOException readObject private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException Throws: java.io.IOException java.lang.ClassNotFoundException setOAuthConsumer public void setOAuthConsumer(java.lang.String consumerKey, java.lang.String consumerSecret) Description copied from interface: OAuthSupport sets the OAuth consumer key and consumer secret Specified by: setOAuthConsumer in interface OAuth2Support Specified by: setOAuthConsumer in interface OAuthSupport Parameters: consumerKey - OAuth consumer key consumerSecret - OAuth consumer secret getOAuthRequestToken public RequestToken getOAuthRequestToken() throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Returns: generated request token. Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken public RequestToken getOAuthRequestToken(java.lang.String callbackUrl) throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Parameters: callbackUrl - callback URL Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken public RequestToken getOAuthRequestToken(java.lang.String callbackUrl, java.lang.String xAuthAccessType) throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Parameters: callbackUrl - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthRequestToken public RequestToken getOAuthRequestToken(java.lang.String callbackUrl, java.lang.String xAuthAccessType, java.lang.String xAuthMode) throws TwitterException Description copied from interface: OAuthSupport Retrieves a request token Specified by: getOAuthRequestToken in interface OAuthSupport Parameters: callbackUrl - callback URL xAuthAccessType - Overrides the access level an application requests to a users account. Supported values are read or write. This parameter is intended to allow a developer to register a read/write application but also request read only access when appropriate. xAuthMode - Set to reverse_auth to obtain a special request token to be used in the reverse auth process. Returns: generated request token Throws: TwitterException - when Twitter service or network is unavailable See Also: OAuth FAQ | Twitter Developers, OAuth Core 1.0a - 6.1. Obtaining an Unauthorized Request Token, POST oauth/request_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken() throws TwitterException Returns an access token associated with this instance. If no access token is associated with this instance, this will retrieve a new access token. Basic authenticated instance of this class will try acquiring an AccessToken using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Returns: access token Throws: TwitterException - When Twitter service or network is unavailable, when the user has not authorized, or when the client application is not permitted to use xAuth See Also: xAuth | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(java.lang.String oauthVerifier) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: oauthVerifier - OAuth verifier. AKA pin. Returns: access token Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(RequestToken requestToken) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: requestToken - the request token Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers getOAuthAccessToken public AccessToken getOAuthAccessToken(RequestToken requestToken, java.lang.String oauthVerifier) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied request token and sets userId. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: requestToken - the request token oauthVerifier - OAuth verifier. AKA pin. Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth Core 1.0a - 6.2. Obtaining User Authorization, POST oauth/access_token | Twitter Developers setOAuthAccessToken public void setOAuthAccessToken(AccessToken accessToken) Description copied from interface: OAuthSupport Sets the access token Specified by: setOAuthAccessToken in interface OAuthSupport Parameters: accessToken - accessToken getOAuthAccessToken public AccessToken getOAuthAccessToken(java.lang.String screenName, java.lang.String password) throws TwitterException Description copied from interface: OAuthSupport Retrieves an access token associated with the supplied screen name and password using xAuth. In order to get access acquire AccessToken using xAuth, you must apply by sending an email to api@twitter.com — all other applications will receive an HTTP 401 error. Web-based applications will not be granted access, except on a temporary basis for when they are converting from basic-authentication support to full OAuth support. Storage of Twitter usernames and passwords is forbidden. By using xAuth, you are required to store only access tokens and access token secrets. If the access token expires or is expunged by a user, you must ask for their login and password again before exchanging the credentials for an access token. Specified by: getOAuthAccessToken in interface OAuthSupport Parameters: screenName - the screen name password - the password Returns: access token associated with the supplied request token. Throws: TwitterException - when Twitter service or network is unavailable, or the user has not authorized See Also: OAuth FAQ | dev.twitter.com - How long does an access token last?, xAuth | Twitter Developers, POST oauth/access_token | Twitter Developers getOAuth private OAuthSupport getOAuth() getOAuth2Token public OAuth2Token getOAuth2Token() throws TwitterException Description copied from interface: OAuth2Support Obtains an OAuth 2 Bearer token. Specified by: getOAuth2Token in interface OAuth2Support Returns: OAuth 2 Bearer token Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. See Also: POST oauth2/token | Twitter Developers setOAuth2Token public void setOAuth2Token(OAuth2Token oauth2Token) Description copied from interface: OAuth2Support Sets the OAuth 2 Bearer token. Specified by: setOAuth2Token in interface OAuth2Support Parameters: oauth2Token - OAuth 2 Bearer token invalidateOAuth2Token public void invalidateOAuth2Token() throws TwitterException Description copied from interface: OAuth2Support Revokes an issued OAuth 2 Bearer Token. Specified by: invalidateOAuth2Token in interface OAuth2Support Throws: TwitterException - when Twitter service or network is unavailable, or connecting non-SSL endpoints. getOAuth2 private OAuth2Support getOAuth2() equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterException <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterException"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":9,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterException java.lang.Object java.lang.Throwable java.lang.Exception twitter4j.TwitterException All Implemented Interfaces: java.io.Serializable, TwitterResponse public class TwitterException extends java.lang.Exception implements TwitterResponse An exception class that will be thrown when TwitterAPI calls are failed. In case the Twitter server returned HTTP error code, you can get the HTTP status code using getStatusCode() method. Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private int errorCode  private java.lang.String errorMessage  private ExceptionDiagnosis exceptionDiagnosis  private static java.lang.String[] FILTER  private boolean nested  private HttpResponse response  private static long serialVersionUID  private int statusCode  Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Constructor Summary Constructors  Constructor and Description TwitterException(java.lang.Exception cause)  TwitterException(java.lang.String message)  TwitterException(java.lang.String message, java.lang.Exception cause, int statusCode)  TwitterException(java.lang.String message, HttpResponse res)  TwitterException(java.lang.String message, java.lang.Throwable cause)  Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description private void decode(java.lang.String str)  boolean equals(java.lang.Object o)  boolean exceededRateLimitation() Tests if the exception is caused by rate limitation exceed int getAccessLevel()  private static java.lang.String getCause(int statusCode)  int getErrorCode()  java.lang.String getErrorMessage() Returns error message from the API if available. java.lang.String getExceptionCode() Returns a hexadecimal representation of this exception stacktrace. An exception code is a hexadecimal representation of the stacktrace which enables it easier to Google known issues. Format : XXXXXXXX:YYYYYYYY[ XX:YY] Where XX is a hash code of stacktrace without line number YY is a hash code of stacktrace excluding line number [-XX:YY] will appear when this instance a root cause private ExceptionDiagnosis getExceptionDiagnosis()  java.lang.String getMessage()  RateLimitStatus getRateLimitStatus() Returns the current rate limit status if available. java.lang.String getResponseHeader(java.lang.String name)  int getRetryAfter() Returns int value of "Retry-After" response header (Search API) or seconds_until_reset (REST API). int getStatusCode()  int hashCode()  boolean isCausedByNetworkIssue() Tests if the exception is caused by network issue boolean isErrorMessageAvailable() Tests if error message from the API is available boolean resourceNotFound() Tests if the exception is caused by non-existing resource (package private) void setNested()  java.lang.String toString()  Methods inherited from class java.lang.Throwable addSuppressed, fillInStackTrace, getCause, getLocalizedMessage, getStackTrace, getSuppressed, initCause, printStackTrace, printStackTrace, printStackTrace, setStackTrace Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values statusCode private int statusCode errorCode private int errorCode exceptionDiagnosis private ExceptionDiagnosis exceptionDiagnosis response private HttpResponse response errorMessage private java.lang.String errorMessage FILTER private static final java.lang.String[] FILTER nested private boolean nested Constructor Detail TwitterException public TwitterException(java.lang.String message, java.lang.Throwable cause) TwitterException public TwitterException(java.lang.String message) TwitterException public TwitterException(java.lang.Exception cause) TwitterException public TwitterException(java.lang.String message, HttpResponse res) TwitterException public TwitterException(java.lang.String message, java.lang.Exception cause, int statusCode) Method Detail getMessage public java.lang.String getMessage() Overrides: getMessage in class java.lang.Throwable decode private void decode(java.lang.String str) getStatusCode public int getStatusCode() getErrorCode public int getErrorCode() getResponseHeader public java.lang.String getResponseHeader(java.lang.String name) getRateLimitStatus public RateLimitStatus getRateLimitStatus() Description copied from interface: TwitterResponse Returns the current rate limit status if available. Specified by: getRateLimitStatus in interface TwitterResponse Returns: current rate limit status getAccessLevel public int getAccessLevel() Specified by: getAccessLevel in interface TwitterResponse Returns: application permission model See Also: Application Permission Model FAQ - How do we know what the access level of a user token is? getRetryAfter public int getRetryAfter() Returns int value of "Retry-After" response header (Search API) or seconds_until_reset (REST API). An application that exceeds the rate limitations of the Search API will receive HTTP 420 response codes to requests. It is a best practice to watch for this error condition and honor the Retry-After header that instructs the application when it is safe to continue. The Retry-After header's value is the number of seconds your application should wait before submitting another query (for example: Retry-After: 67). Check if getStatusCode() == 503 before calling this method to ensure that you are actually exceeding rate limitation with query apis. Returns: instructs the application when it is safe to continue in seconds Since: Twitter4J 2.1.0 See Also: Rate Limiting | Twitter Developers isCausedByNetworkIssue public boolean isCausedByNetworkIssue() Tests if the exception is caused by network issue Returns: if the exception is caused by network issue Since: Twitter4J 2.1.2 exceededRateLimitation public boolean exceededRateLimitation() Tests if the exception is caused by rate limitation exceed Returns: if the exception is caused by rate limitation exceed Since: Twitter4J 2.1.2 See Also: Rate Limiting | Twitter Developers resourceNotFound public boolean resourceNotFound() Tests if the exception is caused by non-existing resource Returns: if the exception is caused by non-existing resource Since: Twitter4J 2.1.2 getExceptionCode public java.lang.String getExceptionCode() Returns a hexadecimal representation of this exception stacktrace. An exception code is a hexadecimal representation of the stacktrace which enables it easier to Google known issues. Format : XXXXXXXX:YYYYYYYY[ XX:YY] Where XX is a hash code of stacktrace without line number YY is a hash code of stacktrace excluding line number [-XX:YY] will appear when this instance a root cause Returns: a hexadecimal representation of this exception stacktrace getExceptionDiagnosis private ExceptionDiagnosis getExceptionDiagnosis() setNested void setNested() getErrorMessage public java.lang.String getErrorMessage() Returns error message from the API if available. Returns: error message from the API Since: Twitter4J 2.2.3 isErrorMessageAvailable public boolean isErrorMessageAvailable() Tests if error message from the API is available Returns: true if error message from the API is available Since: Twitter4J 2.2.3 equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Throwable getCause private static java.lang.String getCause(int statusCode) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterFactory"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterFactory java.lang.Object twitter4j.TwitterFactory All Implemented Interfaces: java.io.Serializable public final class TwitterFactory extends java.lang.Object implements java.io.Serializable A factory class for Twitter. An instance of this class is completely thread safe and can be re-used and used concurrently. Since: Twitter4J 2.1.0 Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private Configuration conf  (package private) static Authorization DEFAULT_AUTHORIZATION  private static long serialVersionUID  private static Twitter SINGLETON  private static java.lang.reflect.Constructor<Twitter> TWITTER_CONSTRUCTOR  Constructor Summary Constructors  Constructor and Description TwitterFactory() Creates a TwitterFactory with the root configuration. TwitterFactory(Configuration conf) Creates a TwitterFactory with the given configuration. TwitterFactory(java.lang.String configTreePath) Creates a TwitterFactory with a specified config tree Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description Twitter getInstance() Returns a instance associated with the configuration bound to this factory. Twitter getInstance(AccessToken accessToken) Returns a OAuth Authenticated instance. consumer key and consumer Secret must be provided by twitter4j.properties, or system properties. Unlike OAuthSupport.setOAuthAccessToken(twitter4j.auth.AccessToken), this factory method potentially returns a cached instance. Twitter getInstance(Authorization auth)  static Twitter getSingleton() Returns default singleton Twitter instance. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail TWITTER_CONSTRUCTOR private static final java.lang.reflect.Constructor<Twitter> TWITTER_CONSTRUCTOR DEFAULT_AUTHORIZATION static final Authorization DEFAULT_AUTHORIZATION SINGLETON private static final Twitter SINGLETON serialVersionUID private static final long serialVersionUID See Also: Constant Field Values conf private final Configuration conf Constructor Detail TwitterFactory public TwitterFactory() Creates a TwitterFactory with the root configuration. TwitterFactory public TwitterFactory(Configuration conf) Creates a TwitterFactory with the given configuration. Parameters: conf - the configuration to use Since: Twitter4J 2.1.1 TwitterFactory public TwitterFactory(java.lang.String configTreePath) Creates a TwitterFactory with a specified config tree Parameters: configTreePath - the path Method Detail getInstance public Twitter getInstance() Returns a instance associated with the configuration bound to this factory. Returns: default singleton instance getInstance public Twitter getInstance(AccessToken accessToken) Returns a OAuth Authenticated instance. consumer key and consumer Secret must be provided by twitter4j.properties, or system properties. Unlike OAuthSupport.setOAuthAccessToken(twitter4j.auth.AccessToken), this factory method potentially returns a cached instance. Parameters: accessToken - access token Returns: an instance Since: Twitter4J 2.1.9 getInstance public Twitter getInstance(Authorization auth) getSingleton public static Twitter getSingleton() Returns default singleton Twitter instance. Returns: default singleton Twitter instance Since: Twitter4J 2.2.4 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":10,"i59":10,"i60":10,"i61":10,"i62":10,"i63":10,"i64":10,"i65":10,"i66":10,"i67":10,"i68":10,"i69":10,"i70":10,"i71":10,"i72":10,"i73":10,"i74":10,"i75":10,"i76":10,"i77":10,"i78":10,"i79":10,"i80":10,"i81":10,"i82":10,"i83":10,"i84":10,"i85":10,"i86":10,"i87":10,"i88":10,"i89":10,"i90":10,"i91":10,"i92":10,"i93":10,"i94":10,"i95":10,"i96":10,"i97":10,"i98":10,"i99":10,"i100":10,"i101":10,"i102":10,"i103":10,"i104":10,"i105":10,"i106":10,"i107":10,"i108":10,"i109":10,"i110":10,"i111":10,"i112":10,"i113":10,"i114":10,"i115":10,"i116":10,"i117":10,"i118":10,"i119":10,"i120":10,"i121":10,"i122":10,"i123":10,"i124":10,"i125":10,"i126":10,"i127":10,"i128":10,"i129":10,"i130":10,"i131":10,"i132":10,"i133":10,"i134":10,"i135":10,"i136":10,"i137":10,"i138":10,"i139":10,"i140":10,"i141":10,"i142":10,"i143":10,"i144":10,"i145":10,"i146":10,"i147":10,"i148":10,"i149":10,"i150":10,"i151":10,"i152":10,"i153":10,"i154":10,"i155":10,"i156":10,"i157":10,"i158":10,"i159":10,"i160":10,"i161":10,"i162":10,"i163":10,"i164":10,"i165":10,"i166":10,"i167":10,"i168":10,"i169":10,"i170":10,"i171":10,"i172":10,"i173":10,"i174":10,"i175":10,"i176":10,"i177":10,"i178":10,"i179":10,"i180":10,"i181":10,"i182":10,"i183":10,"i184":10,"i185":10,"i186":10,"i187":10,"i188":10,"i189":10,"i190":10,"i191":10,"i192":10,"i193":10,"i194":10,"i195":10,"i196":10,"i197":10,"i198":10,"i199":10,"i200":10,"i201":10,"i202":10,"i203":10,"i204":10,"i205":10,"i206":10,"i207":10,"i208":10,"i209":10,"i210":10,"i211":10,"i212":10,"i213":10,"i214":10,"i215":10,"i216":10,"i217":10,"i218":10,"i219":10,"i220":10,"i221":10,"i222":10,"i223":10,"i224":10,"i225":10,"i226":10,"i227":10,"i228":10,"i229":10,"i230":10,"i231":10,"i232":10,"i233":10,"i234":10,"i235":10,"i236":10,"i237":10,"i238":10,"i239":10,"i240":10,"i241":10,"i242":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterImpl java.lang.Object twitter4j.TwitterBaseImpl twitter4j.TwitterImpl All Implemented Interfaces: java.io.Serializable, DirectMessagesResources, FavoritesResources, FriendsFollowersResources, HelpResources, ListsResources, PlacesGeoResources, SavedSearchesResources, SearchResource, SpamReportingResource, SuggestedUsersResources, TimelinesResources, TrendsResources, TweetsResources, UsersResources, OAuth2Support, OAuthSupport, Twitter, TwitterBase class TwitterImpl extends TwitterBaseImpl implements Twitter A java representation of the Twitter REST API This class is thread safe and can be cached/re-used and used concurrently. Currently this class is not carefully designed to be extended. It is suggested to extend this class only for mock testing purpose. Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested classes/interfaces inherited from interface twitter4j.api.HelpResources HelpResources.Language Field Summary Fields  Modifier and Type Field and Description private HttpParameter[] IMPLICIT_PARAMS  private java.lang.String IMPLICIT_PARAMS_STR  private static java.util.concurrent.ConcurrentHashMap<Configuration,HttpParameter[]> implicitParamsMap  private static java.util.concurrent.ConcurrentHashMap<Configuration,java.lang.String> implicitParamsStrMap  private HttpParameter INCLUDE_MY_RETWEET  private static long serialVersionUID  Fields inherited from class twitter4j.TwitterBaseImpl auth, conf, factory, http Constructor Summary Constructors  Constructor and Description TwitterImpl(Configuration conf, Authorization auth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description private void addParameterToList(java.util.List<HttpParameter> colors, java.lang.String paramName, java.lang.String color)  private void checkFileValidity(java.io.File image) Check the existence, and the type of the specified file. User createBlock(long userId) Blocks the user specified in the ID parameter as the authenticating user. User createBlock(java.lang.String screenName) Blocks the user specified in the ID parameter as the authenticating user. Status createFavorite(long id) Favorites the status specified in the ID parameter as the authenticating user. User createFriendship(long userId) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User createFriendship(long userId, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User createFriendship(java.lang.String screenName) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User createFriendship(java.lang.String screenName, boolean follow) Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. User createMute(long userId) Mutes the user specified in the ID parameter as the authenticating user. User createMute(java.lang.String screenName) Mutes the user specified in the screen name parameter as the authenticating user. SavedSearch createSavedSearch(java.lang.String query) Creates a saved search for the authenticated user. UserList createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) Creates a new list for the authenticated user. UserList createUserListMember(long listId, long userId) Adds a member to a list. UserList createUserListMember(long ownerId, java.lang.String slug, long userId) Adds a member to a list. UserList createUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) Adds a member to a list. UserList createUserListMembers(long listId, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(long listId, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(long ownerId, java.lang.String slug, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long... userIds) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String... screenNames) Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. UserList createUserListSubscription(long listId) Make the authenticated user follow the specified list. UserList createUserListSubscription(long ownerId, java.lang.String slug) Make the authenticated user follow the specified list. UserList createUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) Make the authenticated user follow the specified list. User destroyBlock(long userId) Un-blocks the user specified in the ID parameter as the authenticating user. User destroyBlock(java.lang.String screenName) Un-blocks the user specified in the ID parameter as the authenticating user. DirectMessage destroyDirectMessage(long id) Destroys the direct message specified in the required ID parameter. Status destroyFavorite(long id) Un-favorites the status specified in the ID parameter as the authenticating user. User destroyFriendship(long userId) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. User destroyFriendship(java.lang.String screenName) Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. User destroyMute(long userId) Un-mutes the user specified in the ID parameter as the authenticating user. User destroyMute(java.lang.String screenName) Un-mutes the user specified in the screen name parameter as the authenticating user. SavedSearch destroySavedSearch(long id) Destroys a saved search for the authenticated user. Status destroyStatus(long statusId) Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. UserList destroyUserList(long listId) Deletes the specified list. UserList destroyUserList(long ownerId, java.lang.String slug) Deletes the specified list. UserList destroyUserList(java.lang.String ownerScreenName, java.lang.String slug) Deletes the specified list. UserList destroyUserListMember(long listId, long userId) Removes the specified member from the list. UserList destroyUserListMember(long listId, java.lang.String screenName) Removes the specified members from the list. UserList destroyUserListMember(long ownerId, java.lang.String slug, long userId) Removes the specified member from the list. UserList destroyUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) Removes the specified member from the list. UserList destroyUserListMembers(long listId, long[] userIds) Removes the specified members from the list. UserList destroyUserListMembers(long listId, java.lang.String[] screenNames) Removes the specified members from the list. UserList destroyUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String[] screenNames) Removes the specified members from the list. UserList destroyUserListSubscription(long listId) Unsubscribes the authenticated user form the specified list. UserList destroyUserListSubscription(long ownerId, java.lang.String slug) Unsubscribes the authenticated user form the specified list. UserList destroyUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) Unsubscribes the authenticated user form the specified list. DirectMessagesResources directMessages()  FavoritesResources favorites()  FriendsFollowersResources friendsFollowers()  private HttpResponse get(java.lang.String url)  private HttpResponse get(java.lang.String url, HttpParameter... params)  AccountSettings getAccountSettings() Returns the current trend, geo, language, timezone and sleep time information for the authenticating user. TwitterAPIConfiguration getAPIConfiguration() Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. ResponseList<Location> getAvailableTrends() Returns the locations that Twitter has trending topic information for. IDs getBlocksIDs() Returns an array of numeric user ids the authenticating user is blocking. IDs getBlocksIDs(long cursor) Returns an array of numeric user ids the authenticating user is blocking. PagableResponseList<User> getBlocksList() Returns a list of user objects that the authenticating user is blocking. PagableResponseList<User> getBlocksList(long cursor) Returns a list of user objects that the authenticating user is blocking. ResponseList<Location> getClosestTrends(GeoLocation location) Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. ResponseList<User> getContributees(long userId) Returns an array of users that the specified user can contribute to. ResponseList<User> getContributees(java.lang.String screenName) Returns an array of users that the specified user can contribute to. ResponseList<User> getContributors(long userId) Returns an array of users who can contribute to the specified account. ResponseList<User> getContributors(java.lang.String screenName) Returns an array of users who can contribute to the specified account. ResponseList<DirectMessage> getDirectMessages() Returns a list of the direct messages sent to the authenticating user. ResponseList<DirectMessage> getDirectMessages(Paging paging) Returns a list of the direct messages sent to the authenticating user. java.io.InputStream getDMImageAsStream(java.lang.String url) Returns a stream of the image included in direct messages. ResponseList<Status> getFavorites() Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(long userId) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(long userId, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(java.lang.String screenName) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. ResponseList<Status> getFavorites(java.lang.String screenName, Paging paging) Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. IDs getFollowersIDs(long cursor) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(long userId, long cursor, int count) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is followed by. IDs getFollowersIDs(java.lang.String screenName, long cursor, int count) Returns an array of numeric IDs for every user the specified user is followed by. PagableResponseList<User> getFollowersList(long userId, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(long userId, long cursor, int count) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. IDs getFriendsIDs(long cursor) Returns an array of numeric IDs for every user the authenticating user is following. IDs getFriendsIDs(long userId, long cursor) Returns an array of numeric IDs for every user the specified user is following. IDs getFriendsIDs(long userId, long cursor, int count) Returns an array of numeric IDs for every user the specified user is following. IDs getFriendsIDs(java.lang.String screenName, long cursor) Returns an array of numeric IDs for every user the specified user is following. IDs getFriendsIDs(java.lang.String screenName, long cursor, int count) Returns an array of numeric IDs for every user the specified user is following. PagableResponseList<User> getFriendsList(long userId, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(long userId, long cursor, int count) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Place getGeoDetails(java.lang.String placeId) Find out more details of a place that was returned from the PlacesGeoResources.reverseGeoCode(twitter4j.GeoQuery) method. ResponseList<Status> getHomeTimeline() Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. ResponseList<Status> getHomeTimeline(Paging paging) Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. IDs getIncomingFriendships(long cursor) Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. ResponseList<HelpResources.Language> getLanguages() Returns the list of languages supported by Twitter along with their ISO 639-1 code. ResponseList<User> getMemberSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. ResponseList<Status> getMentionsTimeline() Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. ResponseList<Status> getMentionsTimeline(Paging paging) Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. IDs getMutesIDs(long cursor) Returns an array of numeric user ids the authenticating user is muting. PagableResponseList<User> getMutesList(long cursor) Returns a list of user objects that the authenticating user is muting. IDs getNoRetweetsFriendships() Returns a collection of user IDs that the currently authenticated user does not want to receive retweets from. OEmbed getOEmbed(OEmbedRequest req) Returns information allowing the creation of an embedded representation of a Tweet on third party sites. IDs getOutgoingFriendships(long cursor) Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. Trends getPlaceTrends(int woeid) Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. java.lang.String getPrivacyPolicy() Returns Twitter's Privacy Policy. java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus() Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus(java.lang.String... resources) Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. IDs getRetweeterIds(long statusId, int count, long cursor) Returns a collection of up to count user IDs belonging to users who have retweeted the tweet specified by the id parameter. IDs getRetweeterIds(long statusId, long cursor) Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter. ResponseList<Status> getRetweets(long statusId) Returns up to 100 of the first retweets of a given tweet. ResponseList<Status> getRetweetsOfMe() Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. ResponseList<Status> getRetweetsOfMe(Paging paging) Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. ResponseList<SavedSearch> getSavedSearches() Returns the authenticated user's saved search queries. ResponseList<DirectMessage> getSentDirectMessages() Returns a list of the direct messages sent by the authenticating user. ResponseList<DirectMessage> getSentDirectMessages(Paging paging) Returns a list of the direct messages sent by the authenticating user. ResponseList<Place> getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) Locates places near the given coordinates which are similar in name. ResponseList<Category> getSuggestedUserCategories() Access to Twitter's suggested user list. java.lang.String getTermsOfService() Returns Twitter's' Terms of Service. PagableResponseList<User> getUserListMembers(long listId, int count, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long listId, int count, long cursor, boolean skipStatus) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long listId, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the members of the specified list. PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) Returns the members of the specified list. PagableResponseList<UserList> getUserListMemberships(int count, long cursor) List the lists the authenticating user has been added to. PagableResponseList<UserList> getUserListMemberships(long cursor) List the lists the authenticating user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor) List the lists the specified user has been added to. PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) List the lists the specified user has been added to. ResponseList<UserList> getUserLists(long listOwnerUserId) List the lists of the specified user. ResponseList<UserList> getUserLists(long listOwnerUserId, boolean reverse) List the lists of the specified user. ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName) List the lists of the specified user. ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName, boolean reverse) List the lists of the specified user. PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, int count, long cursor) Returns the lists owned by the specified Twitter user. PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, long cursor) Returns the lists owned by the specified Twitter user. PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, int count, long cursor) Returns the lists owned by the specified Twitter user. PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, long cursor) Returns the lists owned by the specified Twitter user. ResponseList<Status> getUserListStatuses(long listId, Paging paging) Show tweet timeline for members of the specified list. ResponseList<Status> getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) Show tweet timeline for members of the specified list. ResponseList<Status> getUserListStatuses(java.lang.String ownerScreenName, java.lang.String slug, Paging paging) Show tweet timeline for members of the specified list. PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor, boolean skipStatus) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long listId, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) Returns the subscribers of the specified list. PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) Returns the subscribers of the specified list. PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, int count, long cursor) List the lists the specified user follows. PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, long cursor) List the lists the specified user follows. PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, int count, long cursor) List the lists the specified user follows. PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, long cursor) List the lists the specified user follows. ResponseList<User> getUserSuggestions(java.lang.String categorySlug) Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. ResponseList<Status> getUserTimeline() Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(long userId) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(long userId, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(Paging paging) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(java.lang.String screenName) Returns the 20 most recent statuses posted from the authenticating user. ResponseList<Status> getUserTimeline(java.lang.String screenName, Paging paging) Returns the 20 most recent statuses posted from the authenticating user. HelpResources help()  private boolean isOk(HttpResponse response)  ListsResources list()  ResponseList<Status> lookup(long... ids) Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. ResponseList<Friendship> lookupFriendships(long... ids) Returns the relationship of the authenticating user to the specified users. ResponseList<Friendship> lookupFriendships(java.lang.String... screenNames) Returns the relationship of the authenticating user to the specified users. ResponseList<User> lookupUsers(long... ids) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. ResponseList<User> lookupUsers(java.lang.String... screenNames) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. private HttpParameter[] mergeImplicitParams(HttpParameter... params)  private HttpParameter[] mergeParameters(HttpParameter[] params1, HttpParameter params2)  private HttpParameter[] mergeParameters(HttpParameter[] params1, HttpParameter[] params2)  PlacesGeoResources placesGeo()  private HttpResponse post(java.lang.String url)  private HttpResponse post(java.lang.String url, HttpParameter... params)  void removeProfileBanner() Removes the uploaded profile banner for the authenticating user. User reportSpam(long userId) The user specified in the id is blocked by the authenticated user and reported as a spammer. User reportSpam(java.lang.String screenName) The user specified in the id is blocked by the authenticated user and reported as a spammer. Status retweetStatus(long statusId) Retweets a tweet. ResponseList<Place> reverseGeoCode(GeoQuery query) Search for places (cities and neighborhoods) that can be attached to a statuses/update. SavedSearchesResources savedSearches()  SearchResource search()  QueryResult search(Query query) Returns tweets that match a specified query. ResponseList<Place> searchPlaces(GeoQuery query) Search for places that can be attached to a statuses/update. ResponseList<User> searchUsers(java.lang.String query, int page) Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. DirectMessage sendDirectMessage(long userId, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. DirectMessage sendDirectMessage(java.lang.String screenName, java.lang.String text) Sends a new direct message to the specified user from the authenticating user. DirectMessage showDirectMessage(long id) Returns a single direct message, specified by an id parameter. Relationship showFriendship(long sourceId, long targetId) Returns detailed information about the relationship between two users. Relationship showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) Returns detailed information about the relationship between two users. SavedSearch showSavedSearch(long id) Retrieve the data for a saved search owned by the authenticating user specified by the given id. Status showStatus(long id) Returns a single status, specified by the id parameter below. User showUser(long userId) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. User showUser(java.lang.String screenName) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. UserList showUserList(long listId) Show the specified list. UserList showUserList(long ownerId, java.lang.String slug) Show the specified list. UserList showUserList(java.lang.String ownerScreenName, java.lang.String slug) Show the specified list. User showUserListMembership(long listId, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json User showUserListMembership(long ownerId, java.lang.String slug, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json User showUserListMembership(java.lang.String ownerScreenName, java.lang.String slug, long userId) Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json User showUserListSubscription(long listId, long userId) Check if the specified user is a subscriber of the specified list. User showUserListSubscription(long ownerId, java.lang.String slug, long userId) Check if the specified user is a subscriber of the specified list. User showUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug, long userId) Check if the specified user is a subscriber of the specified list. SpamReportingResource spamReporting()  SuggestedUsersResources suggestedUsers()  TimelinesResources timelines()  java.lang.String toString()  TrendsResources trends()  TweetsResources tweets()  AccountSettings updateAccountSettings(java.lang.Integer trend_locationWoeid, java.lang.Boolean sleep_timeEnabled, java.lang.String start_sleepTime, java.lang.String end_sleepTime, java.lang.String time_zone, java.lang.String lang) Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. Relationship updateFriendship(long userId, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. Relationship updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweets) Allows you to enable or disable retweets and device notifications from the specified user. User updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) Sets values that users are able to set under the "Account" tab of their settings page. User updateProfileBackgroundImage(java.io.File image, boolean tile) Updates the authenticating user's profile background image. User updateProfileBackgroundImage(java.io.InputStream image, boolean tile) Updates the authenticating user's profile background image. void updateProfileBanner(java.io.File image) Uploads a profile banner on behalf of the authenticating user. void updateProfileBanner(java.io.InputStream image) Uploads a profile banner on behalf of the authenticating user. User updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. User updateProfileImage(java.io.File image) Updates the authenticating user's profile image. User updateProfileImage(java.io.InputStream image) Updates the authenticating user's profile image. Status updateStatus(StatusUpdate status) Updates the authenticating user's status. Status updateStatus(java.lang.String status) Updates the authenticating user's status. UserList updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. UserList updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. private UserList updateUserList(java.lang.String newListName, boolean isPublicList, java.lang.String newDescription, HttpParameter... params)  UserList updateUserList(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) Updates the specified list. UploadedMedia uploadMedia(java.io.File image) Uploads media image to be attached via TweetsResources.updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json UploadedMedia uploadMedia(java.lang.String fileName, java.io.InputStream image) Uploads media image to be attached via TweetsResources.updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json UsersResources users()  User verifyCredentials() Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Methods inherited from class twitter4j.TwitterBaseImpl addRateLimitStatusListener, ensureAuthorizationEnabled, ensureOAuthEnabled, equals, fillInIDAndScreenName, getAuthorization, getConfiguration, getId, getOAuth2Token, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getScreenName, hashCode, httpResponseReceived, invalidateOAuth2Token, onRateLimitReached, onRateLimitStatus, setFactory, setOAuth2Token, setOAuthAccessToken, setOAuthConsumer Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Methods inherited from interface twitter4j.auth.OAuthSupport getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, setOAuthAccessToken, setOAuthConsumer Methods inherited from interface twitter4j.auth.OAuth2Support getOAuth2Token, invalidateOAuth2Token, setOAuth2Token, setOAuthConsumer Methods inherited from interface twitter4j.TwitterBase addRateLimitStatusListener, getAuthorization, getConfiguration, getId, getScreenName, onRateLimitReached, onRateLimitStatus Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values IMPLICIT_PARAMS_STR private final java.lang.String IMPLICIT_PARAMS_STR IMPLICIT_PARAMS private final HttpParameter[] IMPLICIT_PARAMS INCLUDE_MY_RETWEET private final HttpParameter INCLUDE_MY_RETWEET implicitParamsMap private static final java.util.concurrent.ConcurrentHashMap<Configuration,HttpParameter[]> implicitParamsMap implicitParamsStrMap private static final java.util.concurrent.ConcurrentHashMap<Configuration,java.lang.String> implicitParamsStrMap Constructor Detail TwitterImpl TwitterImpl(Configuration conf, Authorization auth) Method Detail getMentionsTimeline public ResponseList<Status> getMentionsTimeline() throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. This method calls https://api.twitter.com/1.1/statuses/mentions_timeline Specified by: getMentionsTimeline in interface TimelinesResources Returns: the 20 most recent replies Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/mentions | Twitter Developers getMentionsTimeline public ResponseList<Status> getMentionsTimeline(Paging paging) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent mentions (tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines. This method calls https://api.twitter.com/1.1/statuses/mentions_timeline Specified by: getMentionsTimeline in interface TimelinesResources Parameters: paging - controls pagination. Supports since_id, max_id, zcount parameters. Returns: the 20 most recent replies Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/mentions | Twitter Developers getHomeTimeline public ResponseList<Status> getHomeTimeline() throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Specified by: getHomeTimeline in interface TimelinesResources Returns: list of the home Timeline Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/home_timeline | Twitter Developers getHomeTimeline public ResponseList<Status> getHomeTimeline(Paging paging) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses, including retweets, posted by the authenticating user and that user's friends. This is the equivalent of /timeline/home on the Web. Usage note: This home_timeline call is identical to statuses/friends_timeline, except that home_timeline also contains retweets, while statuses/friends_timeline does not for backwards compatibility reasons. In a future version of the API, statuses/friends_timeline will be deprected and replaced by home_timeline. This method calls https://api.twitter.com/1.1/statuses/home_timeline Specified by: getHomeTimeline in interface TimelinesResources Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of the home Timeline Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/home_timeline | Twitter Developers getRetweetsOfMe public ResponseList<Status> getRetweetsOfMe() throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Specified by: getRetweetsOfMe in interface TimelinesResources Returns: the 20 most recent tweets of the authenticated user that have been retweeted by others. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/retweets_of_me | Twitter Developers getRetweetsOfMe public ResponseList<Status> getRetweetsOfMe(Paging paging) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent tweets of the authenticated user that have been retweeted by others. This method calls https://api.twitter.com/1.1/statuses/retweets_of_me.json Specified by: getRetweetsOfMe in interface TimelinesResources Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: the 20 most recent tweets of the authenticated user that have been retweeted by others. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/retweets_of_me | Twitter Developers getUserTimeline public ResponseList<Status> getUserTimeline(java.lang.String screenName, Paging paging) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline.json Specified by: getUserTimeline in interface TimelinesResources Parameters: screenName - specifies the screen name of the user for whom to return the user_timeline paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of the user Timeline Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public ResponseList<Status> getUserTimeline(long userId, Paging paging) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline.json Specified by: getUserTimeline in interface TimelinesResources Parameters: userId - specifies the ID of the user for whom to return the user_timeline paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of the user Timeline Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public ResponseList<Status> getUserTimeline(java.lang.String screenName) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResources Parameters: screenName - specifies the screen name of the user for whom to return the user_timeline Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public ResponseList<Status> getUserTimeline(long userId) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResources Parameters: userId - specifies the ID of the user for whom to return the user_timeline Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public ResponseList<Status> getUserTimeline() throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResources Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getUserTimeline public ResponseList<Status> getUserTimeline(Paging paging) throws TwitterException Description copied from interface: TimelinesResources Returns the 20 most recent statuses posted from the authenticating user. It's also possible to request another user's timeline via the id parameter. This is the equivalent of the Web / page for your own user, or the profile page for a third party. For backwards compatibility reasons, retweets are stripped out of the user_timeline when calling in XML or JSON (they appear with 'RT' in RSS and Atom). If you'd like them included, you can merge them in from statuses retweeted_by_me. This method calls https://api.twitter.com/1.1/statuses/user_timeline Specified by: getUserTimeline in interface TimelinesResources Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: the 20 most recent statuses posted in the last 24 hours from the user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/user_timeline | Twitter Developers getRetweets public ResponseList<Status> getRetweets(long statusId) throws TwitterException Description copied from interface: TweetsResources Returns up to 100 of the first retweets of a given tweet. This method calls https://api.twitter.com/1.1/statuses/retweets Specified by: getRetweets in interface TweetsResources Parameters: statusId - The numerical ID of the tweet you want the retweets of. Returns: the retweets of a given tweet Throws: TwitterException - when Twitter service or network is unavailable See Also: Tweets Resources › statuses/retweets/:id getRetweeterIds public IDs getRetweeterIds(long statusId, long cursor) throws TwitterException Description copied from interface: TweetsResources Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter. This method calls https://api.twitter.com/1.1/get/statuses/retweeters/ids Specified by: getRetweeterIds in interface TweetsResources Parameters: statusId - The numerical ID of the tweet you want the retweeters of. cursor - The cursor of the page to fetch. Use -1 to start. Returns: the retweets of a given tweet Throws: TwitterException - when Twitter service or network is unavailable See Also: Tweets Resources › statuses/retweeters/ids getRetweeterIds public IDs getRetweeterIds(long statusId, int count, long cursor) throws TwitterException Description copied from interface: TweetsResources Returns a collection of up to count user IDs belonging to users who have retweeted the tweet specified by the id parameter. This method calls https://api.twitter.com/1.1/get/statuses/retweeters/ids Specified by: getRetweeterIds in interface TweetsResources Parameters: statusId - The numerical ID of the tweet you want the retweeters of. count - The maximum number of retweeter IDs to retrieve. Must be between 1 and 200, inclusive. cursor - The cursor of the page to fetch. Use -1 to start. Returns: the retweets of a given tweet Throws: TwitterException - when Twitter service or network is unavailable See Also: Tweets Resources › statuses/retweeters/ids showStatus public Status showStatus(long id) throws TwitterException Description copied from interface: TweetsResources Returns a single status, specified by the id parameter below. The status's author will be returned inline. This method calls https://api.twitter.com/1.1/statuses/show Specified by: showStatus in interface TweetsResources Parameters: id - the numerical ID of the status you're trying to retrieve Returns: a single status Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/show/:id | Twitter Developers destroyStatus public Status destroyStatus(long statusId) throws TwitterException Description copied from interface: TweetsResources Destroys the status specified by the required ID parameter. Usage note: The authenticating user must be the author of the specified status. This method calls https://api.twitter.com/1.1/statuses/destroy Specified by: destroyStatus in interface TweetsResources Parameters: statusId - The ID of the status to destroy. Returns: the deleted status Throws: TwitterException - when Twitter service or network is unavailable See Also: POST statuses/destroy/:id | Twitter Developers updateStatus public Status updateStatus(java.lang.String status) throws TwitterException Description copied from interface: TweetsResources Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. This method calls https://api.twitter.com/1.1/statuses/update Specified by: updateStatus in interface TweetsResources Parameters: status - the text of your status update Returns: the latest status Throws: TwitterException - when Twitter service or network is unavailable See Also: POST statuses/update | Twitter Developers updateStatus public Status updateStatus(StatusUpdate status) throws TwitterException Description copied from interface: TweetsResources Updates the authenticating user's status. A status update with text identical to the authenticating user's text identical to the authenticating user's current status will be ignored to prevent duplicates. This method calls https://api.twitter.com/1.1/statuses/update or This method calls https://upload.twitter.com/1/statuses/update_with_media Specified by: updateStatus in interface TweetsResources Parameters: status - the latest status to be updated. Returns: the latest status Throws: TwitterException - when Twitter service or network is unavailable See Also: POST statuses/update | Twitter Developers retweetStatus public Status retweetStatus(long statusId) throws TwitterException Description copied from interface: TweetsResources Retweets a tweet. Returns the original tweet with retweet details embedded. This method calls https://api.twitter.com/1.1/statuses/retweet Specified by: retweetStatus in interface TweetsResources Parameters: statusId - The ID of the status to retweet. Returns: the retweeted status Throws: TwitterException - when Twitter service or network is unavailable See Also: POST statuses/retweet/:id | Twitter Developers getOEmbed public OEmbed getOEmbed(OEmbedRequest req) throws TwitterException Description copied from interface: TweetsResources Returns information allowing the creation of an embedded representation of a Tweet on third party sites. See the oEmbed specification for information about the response format. While this endpoint allows a bit of customization for the final appearance of the embedded Tweet, be aware that the appearance of the rendered Tweet may change over time to be consistent with Twitter's Display Requirements. Do not rely on any class or id parameters to stay constant in the returned markup. This method calls https://api.twitter.com/1.1/statuses/oembed.json Specified by: getOEmbed in interface TweetsResources Parameters: req - request Returns: information allowing the creation of an embedded representation of a Tweet on third party sites Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/oembed | Twitter Developers lookup public ResponseList<Status> lookup(long... ids) throws TwitterException Description copied from interface: TweetsResources Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter. This method is especially useful to get the details (hydrate) a collection of Tweet IDs. This method calls https://api.twitter.com/1.1/statuses/lookup.json Specified by: lookup in interface TweetsResources Parameters: ids - array of the ids to lookup Returns: list of the tweets Throws: TwitterException - when Twitter service or network is unavailable See Also: GET statuses/lookup uploadMedia public UploadedMedia uploadMedia(java.io.File image) throws TwitterException Description copied from interface: TweetsResources Uploads media image to be attached via TweetsResources.updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json Specified by: uploadMedia in interface TweetsResources Parameters: image - the latest status to be updated. Returns: upload result Throws: TwitterException - when Twitter service or network is unavailable See Also: POST statuses/update | Twitter Developers, Multiple Media Entities in Statuses uploadMedia public UploadedMedia uploadMedia(java.lang.String fileName, java.io.InputStream image) throws TwitterException Description copied from interface: TweetsResources Uploads media image to be attached via TweetsResources.updateStatus(twitter4j.StatusUpdate) This method calls https://api.twitter.com/1.1/media/upload.json Specified by: uploadMedia in interface TweetsResources Parameters: fileName - media file name image - media body as stream Returns: upload result Throws: TwitterException - when Twitter service or network is unavailable See Also: POST statuses/update | Twitter Developers, Multiple Media Entities in Statuses search public QueryResult search(Query query) throws TwitterException Description copied from interface: SearchResource Returns tweets that match a specified query. This method calls http://search.twitter.com/search.json Specified by: search in interface SearchResource Parameters: query - - the search condition Returns: the result Throws: TwitterException - when Twitter service or network is unavailable See Also: GET search | Twitter Developers, Twitter API / Search Operators getDirectMessages public ResponseList<DirectMessage> getDirectMessages() throws TwitterException Description copied from interface: DirectMessagesResources Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages Specified by: getDirectMessages in interface DirectMessagesResources Returns: List Throws: TwitterException - when Twitter service or network is unavailable See Also: GET direct_messages | Twitter Developers getDirectMessages public ResponseList<DirectMessage> getDirectMessages(Paging paging) throws TwitterException Description copied from interface: DirectMessagesResources Returns a list of the direct messages sent to the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages Specified by: getDirectMessages in interface DirectMessagesResources Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: List Throws: TwitterException - when Twitter service or network is unavailable See Also: GET direct_messages | Twitter Developers getSentDirectMessages public ResponseList<DirectMessage> getSentDirectMessages() throws TwitterException Description copied from interface: DirectMessagesResources Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent Specified by: getSentDirectMessages in interface DirectMessagesResources Returns: List Throws: TwitterException - when Twitter service or network is unavailable See Also: GET direct_messages/sent | Twitter Developers getSentDirectMessages public ResponseList<DirectMessage> getSentDirectMessages(Paging paging) throws TwitterException Description copied from interface: DirectMessagesResources Returns a list of the direct messages sent by the authenticating user. This method calls https://api.twitter.com/1.1/direct_messages/sent Specified by: getSentDirectMessages in interface DirectMessagesResources Parameters: paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: List Throws: TwitterException - when Twitter service or network is unavailable See Also: GET direct_messages/sent | Twitter Developers showDirectMessage public DirectMessage showDirectMessage(long id) throws TwitterException Description copied from interface: DirectMessagesResources Returns a single direct message, specified by an id parameter. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/direct_messages/show/:id.json Specified by: showDirectMessage in interface DirectMessagesResources Parameters: id - message id Returns: DirectMessage Throws: TwitterException - when Twitter service or network is unavailable See Also: #newtwitter and the API - Twitter API Announcements | Google Group destroyDirectMessage public DirectMessage destroyDirectMessage(long id) throws TwitterException Description copied from interface: DirectMessagesResources Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message. This method calls https://api.twitter.com/1.1/direct_messages/destroy Specified by: destroyDirectMessage in interface DirectMessagesResources Parameters: id - the ID of the direct message to destroy Returns: the deleted direct message Throws: TwitterException - when Twitter service or network is unavailable See Also: POST direct_messages/destroy/:id | Twitter Developers sendDirectMessage public DirectMessage sendDirectMessage(long userId, java.lang.String text) throws TwitterException Description copied from interface: DirectMessagesResources Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimmed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Specified by: sendDirectMessage in interface DirectMessagesResources Parameters: userId - the screen name of the user to whom send the direct message text - The text of your direct message. Returns: DirectMessage Throws: TwitterException - when Twitter service or network is unavailable See Also: POST direct_messages/new | Twitter Developers sendDirectMessage public DirectMessage sendDirectMessage(java.lang.String screenName, java.lang.String text) throws TwitterException Description copied from interface: DirectMessagesResources Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters below. The text will be trimmed if the length of the text is exceeding 140 characters. This method calls https://api.twitter.com/1.1/direct_messages/new Specified by: sendDirectMessage in interface DirectMessagesResources Parameters: screenName - the screen name of the user to whom send the direct message text - The text of your direct message. Returns: DirectMessage Throws: TwitterException - when Twitter service or network is unavailable See Also: POST direct_messages/new | Twitter Developers getDMImageAsStream public java.io.InputStream getDMImageAsStream(java.lang.String url) throws TwitterException Description copied from interface: DirectMessagesResources Returns a stream of the image included in direct messages. Specified by: getDMImageAsStream in interface DirectMessagesResources Parameters: url - image url Returns: InputStream Throws: TwitterException - when Twitter service or network is unavailable See Also: Access media shared in direct messages | Twitter Developers getNoRetweetsFriendships public IDs getNoRetweetsFriendships() throws TwitterException Description copied from interface: FriendsFollowersResources Returns a collection of user IDs that the currently authenticated user does not want to receive retweets from. This method calls https://api.twitter.com/1.1/friendships/no_retweets/ids.json Specified by: getNoRetweetsFriendships in interface FriendsFollowersResources Returns: a collection of numeric IDs that the currently authenticated user does not want to receive retweets from. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friendships/no_retweets/ids | Twitter Developers getFriendsIDs public IDs getFriendsIDs(long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the authenticating user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResources Parameters: cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: an array of numeric IDs for every user the authenticating user is following Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/ids | Twitter Developers getFriendsIDs public IDs getFriendsIDs(long userId, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResources Parameters: userId - Specifies the ID of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/ids | Twitter Developers getFriendsIDs public IDs getFriendsIDs(long userId, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is following. This method calls http://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResources Parameters: userId - Specifies the ID of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/ids | Twitter Developers getFriendsIDs public IDs getFriendsIDs(java.lang.String screenName, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is following. This method calls https://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResources Parameters: screenName - Specifies the screen name of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/ids | Twitter Developers getFriendsIDs public IDs getFriendsIDs(java.lang.String screenName, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is following. This method calls http://api.twitter.com/1.1/friends/ids.json Specified by: getFriendsIDs in interface FriendsFollowersResources Parameters: screenName - Specifies the screen name of the user for whom to return the friends list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: an array of numeric IDs for every user the specified user is following Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/ids | Twitter Developers getFollowersIDs public IDs getFollowersIDs(long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResources Parameters: cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/ids | Twitter Developers getFollowersIDs public IDs getFollowersIDs(long userId, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResources Parameters: userId - Specifies the ID of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/ids | Twitter Developers getFollowersIDs public IDs getFollowersIDs(long userId, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is followed by. This method calls http://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResources Parameters: userId - Specifies the ID of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/ids | Twitter Developers getFollowersIDs public IDs getFollowersIDs(java.lang.String screenName, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is followed by. This method calls https://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResources Parameters: screenName - Specifies the screen name of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/ids | Twitter Developers getFollowersIDs public IDs getFollowersIDs(java.lang.String screenName, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user the specified user is followed by. This method calls http://api.twitter.com/1.1/followers/ids.json Specified by: getFollowersIDs in interface FriendsFollowersResources Parameters: screenName - Specifies the screen name of the user for whom to return the followers list. cursor - Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filterd out after connections are queried. To begin paging provide a value of -1 as the cursor. The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. count - Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response. Returns: The ID or screen_name of the user to retrieve the friends ID list for. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/ids | Twitter Developers lookupFriendships public ResponseList<Friendship> lookupFriendships(long... ids) throws TwitterException Description copied from interface: FriendsFollowersResources Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Specified by: lookupFriendships in interface FriendsFollowersResources Parameters: ids - array of the ids to lookup Returns: list of Relationships Throws: TwitterException - when Twitter service or network is unavailable See Also: #newtwitter and the API - Twitter API Announcements | Google Group lookupFriendships public ResponseList<Friendship> lookupFriendships(java.lang.String... screenNames) throws TwitterException Description copied from interface: FriendsFollowersResources Returns the relationship of the authenticating user to the specified users. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/lookup.json Specified by: lookupFriendships in interface FriendsFollowersResources Parameters: screenNames - array of the screen names to lookup Returns: list of Relationships Throws: TwitterException - when Twitter service or network is unavailable See Also: #newtwitter and the API - Twitter API Announcements | Google Group getIncomingFriendships public IDs getIncomingFriendships(long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user. This method calls https://api.twitter.com/1.1/friendships/incoming.json Specified by: getIncomingFriendships in interface FriendsFollowersResources Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. Returns: an array of numeric IDs for every user who has a pending request to follow the authenticating user. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friendships/incoming | Twitter Developers getOutgoingFriendships public IDs getOutgoingFriendships(long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. This method calls https://api.twitter.com/1.1/friendships/outgoing.json Specified by: getOutgoingFriendships in interface FriendsFollowersResources Parameters: cursor - Breaks the results into pages. A single page contains 5000 identifiers. Provide a value of -1 to begin paging. Returns: an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friendships/outgoing | Twitter Developers createFriendship public User createFriendship(long userId) throws TwitterException Description copied from interface: FriendsFollowersResources Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Specified by: createFriendship in interface FriendsFollowersResources Parameters: userId - the ID of the user to be befriended Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST friendships/create | Twitter Developers createFriendship public User createFriendship(java.lang.String screenName) throws TwitterException Description copied from interface: FriendsFollowersResources Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Specified by: createFriendship in interface FriendsFollowersResources Parameters: screenName - the screen name of the user to be befriended Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST friendships/create | Twitter Developers createFriendship public User createFriendship(long userId, boolean follow) throws TwitterException Description copied from interface: FriendsFollowersResources Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Specified by: createFriendship in interface FriendsFollowersResources Parameters: userId - the ID of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST friendships/create | Twitter Developers createFriendship public User createFriendship(java.lang.String screenName, boolean follow) throws TwitterException Description copied from interface: FriendsFollowersResources Allows the authenticating users to follow the user specified in the ID parameter. Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user an HTTP 403 will be returned. This method calls https://api.twitter.com/1.1/friendships/create/[id].json Specified by: createFriendship in interface FriendsFollowersResources Parameters: screenName - the screen name of the user to be befriended follow - Enable notifications for the target user in addition to becoming friends. Returns: the befriended user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST friendships/create | Twitter Developers destroyFriendship public User destroyFriendship(long userId) throws TwitterException Description copied from interface: FriendsFollowersResources Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy/[id].json Specified by: destroyFriendship in interface FriendsFollowersResources Parameters: userId - the ID of the user for whom to request a list of friends Returns: User Throws: TwitterException - when Twitter service or network is unavailable See Also: POST friendships/destroy | Twitter Developers destroyFriendship public User destroyFriendship(java.lang.String screenName) throws TwitterException Description copied from interface: FriendsFollowersResources Allows the authenticating users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. This method calls https://api.twitter.com/1.1/friendships/destroy/[id].json Specified by: destroyFriendship in interface FriendsFollowersResources Parameters: screenName - the screen name of the user for whom to request a list of friends Returns: User Throws: TwitterException - when Twitter service or network is unavailable See Also: POST friendships/destroy | Twitter Developers updateFriendship public Relationship updateFriendship(long userId, boolean enableDeviceNotification, boolean retweets) throws TwitterException Description copied from interface: FriendsFollowersResources Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Specified by: updateFriendship in interface FriendsFollowersResources Parameters: userId - user id to update enableDeviceNotification - set true to enable device notification retweets - set true to enable retweets Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable See Also: #newtwitter and the API - Twitter API Announcements | Google Group updateFriendship public Relationship updateFriendship(java.lang.String screenName, boolean enableDeviceNotification, boolean retweets) throws TwitterException Description copied from interface: FriendsFollowersResources Allows you to enable or disable retweets and device notifications from the specified user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/friendships/update.json Specified by: updateFriendship in interface FriendsFollowersResources Parameters: screenName - screen name to update enableDeviceNotification - set true to enable device notification retweets - set true to enable retweets Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable See Also: #newtwitter and the API - Twitter API Announcements | Google Group showFriendship public Relationship showFriendship(long sourceId, long targetId) throws TwitterException Description copied from interface: FriendsFollowersResources Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Specified by: showFriendship in interface FriendsFollowersResources Parameters: sourceId - the ID of the source user targetId - the ID of the target user Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friendships/show | Twitter Developers showFriendship public Relationship showFriendship(java.lang.String sourceScreenName, java.lang.String targetScreenName) throws TwitterException Description copied from interface: FriendsFollowersResources Returns detailed information about the relationship between two users. This method calls https://api.twitter.com/1.1/friendships/show.json Specified by: showFriendship in interface FriendsFollowersResources Parameters: sourceScreenName - the screen name of the source user targetScreenName - the screen name of the target user Returns: Relationship Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friendships/show | Twitter Developers getFriendsList public PagableResponseList<User> getFriendsList(long userId, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResources Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/list | Twitter Developers getFriendsList public PagableResponseList<User> getFriendsList(long userId, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResources Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/list | Twitter Developers getFriendsList public PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResources Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/list | Twitter Developers getFriendsList public PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResources Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/list | Twitter Developers getFriendsList public PagableResponseList<User> getFriendsList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResources Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/list | Twitter Developers getFriendsList public PagableResponseList<User> getFriendsList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends"). At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/friends/list.json Specified by: getFriendsList in interface FriendsFollowersResources Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of friends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET friends/list | Twitter Developers getFollowersList public PagableResponseList<User> getFollowersList(long userId, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResources Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/list | Twitter Developers getFollowersList public PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResources Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/list | Twitter Developers getFollowersList public PagableResponseList<User> getFollowersList(long userId, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResources Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/list | Twitter Developers getFollowersList public PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResources Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/list | Twitter Developers getFollowersList public PagableResponseList<User> getFollowersList(long userId, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResources Parameters: userId - The ID of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/list | Twitter Developers getFollowersList public PagableResponseList<User> getFollowersList(java.lang.String screenName, long cursor, int count, boolean skipStatus, boolean includeUserEntities) throws TwitterException Description copied from interface: FriendsFollowersResources Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method calls https://api.twitter.com/1.1/followers/list.json Specified by: getFollowersList in interface FriendsFollowersResources Parameters: screenName - The screen name of the user for whom to return results for. cursor - Causes the results to be broken into pages of no more than 20 records at a time. count - The number of users to return per page, up to a maximum of 200. Defaults to 20. skipStatus - When set to either true, statuses will not be included in the returned user objects. includeUserEntities - The user object entities node will be disincluded when set to false. Returns: list of followers Throws: TwitterException - when Twitter service or network is unavailable See Also: GET followers/list | Twitter Developers getAccountSettings public AccountSettings getAccountSettings() throws TwitterException Description copied from interface: UsersResources Returns the current trend, geo, language, timezone and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Specified by: getAccountSettings in interface UsersResources Returns: the current trend, geo and sleep time information for the authenticating user. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET account/settings | Twitter Developers verifyCredentials public User verifyCredentials() throws TwitterException Description copied from interface: UsersResources Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. This method calls https://api.twitter.com/1.1/account/verify_credentials.json Specified by: verifyCredentials in interface UsersResources Returns: user Throws: TwitterException - when Twitter service or network is unavailable, or if supplied credential is wrong (TwitterException.getStatusCode() == 401) See Also: GET account/verify_credentials | Twitter Developers updateAccountSettings public AccountSettings updateAccountSettings(java.lang.Integer trend_locationWoeid, java.lang.Boolean sleep_timeEnabled, java.lang.String start_sleepTime, java.lang.String end_sleepTime, java.lang.String time_zone, java.lang.String lang) throws TwitterException Description copied from interface: UsersResources Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Specified by: updateAccountSettings in interface UsersResources Parameters: trend_locationWoeid - Optional. The Yahoo! Where On Earth ID to use as the user's default trend location. sleep_timeEnabled - Optional. Whether sleep time is enabled for the user start_sleepTime - Optional. The hour that sleep time should begin if it is enabled. end_sleepTime - Optional. The hour that sleep time should end if it is enabled. time_zone - Optional. The timezone dates and times should be displayed in for the user. lang - Optional. The language which Twitter should render in for this user. (two letter ISO 639-1) Returns: the current trend, geo and sleep time information for the authenticating user. Throws: TwitterException - when Twitter service or network is unavailable See Also: POST account/settings | Twitter Developers updateProfile public User updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) throws TwitterException Description copied from interface: UsersResources Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated. This method calls https://api.twitter.com/1.1/account/update_profile.json Specified by: updateProfile in interface UsersResources Parameters: name - Optional. Maximum of 20 characters. url - Optional. Maximum of 100 characters. Will be prepended with "http://" if not present. location - Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way. description - Optional. Maximum of 160 characters. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST account/update_profile | Twitter Developers updateProfileBackgroundImage public User updateProfileBackgroundImage(java.io.File image, boolean tile) throws TwitterException Description copied from interface: UsersResources Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Specified by: updateProfileBackgroundImage in interface UsersResources Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forceably scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) See Also: POST account/update_profile_background_image | Twitter Developers updateProfileBackgroundImage public User updateProfileBackgroundImage(java.io.InputStream image, boolean tile) throws TwitterException Description copied from interface: UsersResources Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Specified by: updateProfileBackgroundImage in interface UsersResources Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forceably scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) See Also: POST account/update_profile_background_image | Twitter Developers updateProfileColors public User updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) throws TwitterException Description copied from interface: UsersResources Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff). This method calls https://api.twitter.com/1.1/account/update_profile_colors.json Specified by: updateProfileColors in interface UsersResources Parameters: profileBackgroundColor - optional, can be null profileTextColor - optional, can be null profileLinkColor - optional, can be null profileSidebarFillColor - optional, can be null profileSidebarBorderColor - optional, can be null Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST account/update_profile_colors | Twitter Developers addParameterToList private void addParameterToList(java.util.List<HttpParameter> colors, java.lang.String paramName, java.lang.String color) updateProfileImage public User updateProfileImage(java.io.File image) throws TwitterException Description copied from interface: UsersResources Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Specified by: updateProfileImage in interface UsersResources Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) See Also: POST account/update_profile_image | Twitter Developers updateProfileImage public User updateProfileImage(java.io.InputStream image) throws TwitterException Description copied from interface: UsersResources Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Specified by: updateProfileImage in interface UsersResources Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) See Also: POST account/update_profile_image | Twitter Developers checkFileValidity private void checkFileValidity(java.io.File image) throws TwitterException Check the existence, and the type of the specified file. Parameters: image - image to be uploaded Throws: TwitterException - when the specified file is not found (FileNotFoundException will be nested) , or when the specified file object is not representing a file(IOException will be nested). getBlocksList public PagableResponseList<User> getBlocksList() throws TwitterException Description copied from interface: UsersResources Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.json Specified by: getBlocksList in interface UsersResources Returns: a list of user objects that the authenticating user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET blocks/blocking | Twitter Developers getBlocksList public PagableResponseList<User> getBlocksList(long cursor) throws TwitterException Description copied from interface: UsersResources Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.json Specified by: getBlocksList in interface UsersResources Parameters: cursor - Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Returns: a list of user objects that the authenticating user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET blocks/blocking | Twitter Developers getBlocksIDs public IDs getBlocksIDs() throws TwitterException Description copied from interface: UsersResources Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/ids Specified by: getBlocksIDs in interface UsersResources Returns: Returns an array of numeric user ids the authenticating user is blocking. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET blocks/ids | Twitter Developers getBlocksIDs public IDs getBlocksIDs(long cursor) throws TwitterException Description copied from interface: UsersResources Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/ids Specified by: getBlocksIDs in interface UsersResources Parameters: cursor - cursor Returns: Returns an array of numeric user ids the authenticating user is blocking. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET blocks/ids | Twitter Developers createBlock public User createBlock(long userId) throws TwitterException Description copied from interface: UsersResources Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create/[id].json Specified by: createBlock in interface UsersResources Parameters: userId - the ID of the user to block Returns: the blocked user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST blocks/create | Twitter Developers createBlock public User createBlock(java.lang.String screenName) throws TwitterException Description copied from interface: UsersResources Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create/[id].json Specified by: createBlock in interface UsersResources Parameters: screenName - the screen_name of the user to block Returns: the blocked user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST blocks/create | Twitter Developers destroyBlock public User destroyBlock(long userId) throws TwitterException Description copied from interface: UsersResources Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/destroy/[id].json Specified by: destroyBlock in interface UsersResources Parameters: userId - the ID of the user to block Returns: the unblocked user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST blocks/destroy | Twitter Developers destroyBlock public User destroyBlock(java.lang.String screenName) throws TwitterException Description copied from interface: UsersResources Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/destroy/[id].json Specified by: destroyBlock in interface UsersResources Parameters: screenName - the screen_name of the user to block Returns: the unblocked user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST blocks/destroy | Twitter Developers getMutesList public PagableResponseList<User> getMutesList(long cursor) throws TwitterException Description copied from interface: UsersResources Returns a list of user objects that the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/list Specified by: getMutesList in interface UsersResources Parameters: cursor - Causes the list of muted users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Returns: a list of user objects that the authenticating user Throws: TwitterException - when Twitter service or network is unavailable See Also: GET blocks/blocking | Twitter Developers getMutesIDs public IDs getMutesIDs(long cursor) throws TwitterException Description copied from interface: UsersResources Returns an array of numeric user ids the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/ids Specified by: getMutesIDs in interface UsersResources Parameters: cursor - Causes the list of muted users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Returns: Returns an array of numeric user ids the authenticating user is muting. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET blocks/ids | Twitter Developers createMute public User createMute(long userId) throws TwitterException Description copied from interface: UsersResources Mutes the user specified in the ID parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Specified by: createMute in interface UsersResources Parameters: userId - the user_id of the user to mute Returns: the muted user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST mutes/users/create | Twitter Developers createMute public User createMute(java.lang.String screenName) throws TwitterException Description copied from interface: UsersResources Mutes the user specified in the screen name parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Specified by: createMute in interface UsersResources Parameters: screenName - the screen_name of the user to mute Returns: the muted user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST mutes/users/create | Twitter Developers destroyMute public User destroyMute(long userId) throws TwitterException Description copied from interface: UsersResources Un-mutes the user specified in the ID parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Specified by: destroyMute in interface UsersResources Parameters: userId - the ID of the user to mute Returns: the unmuted user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST mutes/users/destroy | Twitter Developers destroyMute public User destroyMute(java.lang.String screenName) throws TwitterException Description copied from interface: UsersResources Un-mutes the user specified in the screen name parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Specified by: destroyMute in interface UsersResources Parameters: screenName - the screen_name of the user to mute Returns: the unmuted user Throws: TwitterException - when Twitter service or network is unavailable See Also: POST mutes/users/destroy | Twitter Developers lookupUsers public ResponseList<User> lookupUsers(long... ids) throws TwitterException Description copied from interface: UsersResources Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Specified by: lookupUsers in interface UsersResources Parameters: ids - Specifies the screen names of the users to return. Returns: users Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/lookup | Twitter Developers lookupUsers public ResponseList<User> lookupUsers(java.lang.String... screenNames) throws TwitterException Description copied from interface: UsersResources Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Specified by: lookupUsers in interface UsersResources Parameters: screenNames - Specifies the screen names of the users to return. Returns: users Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/lookup | Twitter Developers showUser public User showUser(long userId) throws TwitterException Description copied from interface: UsersResources Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Specified by: showUser in interface UsersResources Parameters: userId - the ID of the user for whom to request the detail Returns: users Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/show | Twitter Developers showUser public User showUser(java.lang.String screenName) throws TwitterException Description copied from interface: UsersResources Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Specified by: showUser in interface UsersResources Parameters: screenName - the screen name of the user for whom to request the detail Returns: User Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/show | Twitter Developers searchUsers public ResponseList<User> searchUsers(java.lang.String query, int page) throws TwitterException Description copied from interface: UsersResources Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. This method calls https://api.twitter.com/1.1/users/search.json Specified by: searchUsers in interface UsersResources Parameters: query - The query to run against people search. page - Specifies the page of results to retrieve. Number of statuses per page is fixed to 20. Returns: the list of Users matches the provided Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/search | Twitter Developers getContributees public ResponseList<User> getContributees(long userId) throws TwitterException Description copied from interface: UsersResources Returns an array of users that the specified user can contribute to. Specified by: getContributees in interface UsersResources Parameters: userId - The user id of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/contributors | Twitter Developers getContributees public ResponseList<User> getContributees(java.lang.String screenName) throws TwitterException Description copied from interface: UsersResources Returns an array of users that the specified user can contribute to. Specified by: getContributees in interface UsersResources Parameters: screenName - The screen name of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/contributors | Twitter Developers getContributors public ResponseList<User> getContributors(long userId) throws TwitterException Description copied from interface: UsersResources Returns an array of users who can contribute to the specified account. Specified by: getContributors in interface UsersResources Parameters: userId - The user id of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/contributors | Twitter Developers getContributors public ResponseList<User> getContributors(java.lang.String screenName) throws TwitterException Description copied from interface: UsersResources Returns an array of users who can contribute to the specified account. Specified by: getContributors in interface UsersResources Parameters: screenName - The screen name of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/contributors | Twitter Developers removeProfileBanner public void removeProfileBanner() throws TwitterException Description copied from interface: UsersResources Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success. This method calls https://api.twitter.com/1.1/account/remove_profile_banner.json Specified by: removeProfileBanner in interface UsersResources Throws: TwitterException - when Twitter service or network is unavailable See Also: POST account/remove_profile_banner | Twitter Developers updateProfileBanner public void updateProfileBanner(java.io.File image) throws TwitterException Description copied from interface: UsersResources Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Specified by: updateProfileBanner in interface UsersResources Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) See Also: POST account/update_profile_banner | Twitter Developers updateProfileBanner public void updateProfileBanner(java.io.InputStream image) throws TwitterException Description copied from interface: UsersResources Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Specified by: updateProfileBanner in interface UsersResources Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) See Also: POST account/update_profile_banner | Twitter Developers getUserSuggestions public ResponseList<User> getUserSuggestions(java.lang.String categorySlug) throws TwitterException Description copied from interface: SuggestedUsersResources Access the users in a given category of the Twitter suggested user list. It is recommended that end clients cache this data for no more than one hour. This method calls https://api.twitter.com/1.1/users/suggestions/:slug.json Specified by: getUserSuggestions in interface SuggestedUsersResources Parameters: categorySlug - slug Returns: list of suggested users Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/suggestions/:slug | Twitter Developers getSuggestedUserCategories public ResponseList<Category> getSuggestedUserCategories() throws TwitterException Description copied from interface: SuggestedUsersResources Access to Twitter's suggested user list. This returns the list of suggested user categories. The category can be used in the users/suggestions/category endpoint to get the users in that category. This method calls https://api.twitter.com/1.1/users/suggestions Specified by: getSuggestedUserCategories in interface SuggestedUsersResources Returns: list of suggested user categories. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/suggestions | Twitter Developers getMemberSuggestions public ResponseList<User> getMemberSuggestions(java.lang.String categorySlug) throws TwitterException Description copied from interface: SuggestedUsersResources Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/users/suggestions/:slug/members.json Specified by: getMemberSuggestions in interface SuggestedUsersResources Parameters: categorySlug - slug Returns: list of suggested users Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/suggestions/:slug/members | Twitter Developers getFavorites public ResponseList<Status> getFavorites() throws TwitterException Description copied from interface: FavoritesResources Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites.json Specified by: getFavorites in interface FavoritesResources Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET favorites | Twitter Developers getFavorites public ResponseList<Status> getFavorites(long userId) throws TwitterException Description copied from interface: FavoritesResources Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. Specified by: getFavorites in interface FavoritesResources Parameters: userId - the id of the user for whom to request a list of favorite statuses Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET favorites | Twitter Developers getFavorites public ResponseList<Status> getFavorites(java.lang.String screenName) throws TwitterException Description copied from interface: FavoritesResources Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. Specified by: getFavorites in interface FavoritesResources Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET favorites | Twitter Developers getFavorites public ResponseList<Status> getFavorites(Paging paging) throws TwitterException Description copied from interface: FavoritesResources Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites.json Specified by: getFavorites in interface FavoritesResources Parameters: paging - controls pagination. Supports sinceId and page parameters. Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET favorites | Twitter Developers getFavorites public ResponseList<Status> getFavorites(long userId, Paging paging) throws TwitterException Description copied from interface: FavoritesResources Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Specified by: getFavorites in interface FavoritesResources Parameters: userId - the id of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET favorites | Twitter Developers getFavorites public ResponseList<Status> getFavorites(java.lang.String screenName, Paging paging) throws TwitterException Description copied from interface: FavoritesResources Returns the 20 most recent favorite statuses for the authenticating user or user specified by the ID parameter in the requested format. This method calls https://api.twitter.com/1.1/favorites/[id].json Specified by: getFavorites in interface FavoritesResources Parameters: screenName - the screen name of the user for whom to request a list of favorite statuses paging - controls pagination. Supports sinceId and page parameters. Returns: favorite statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET favorites | Twitter Developers destroyFavorite public Status destroyFavorite(long id) throws TwitterException Description copied from interface: FavoritesResources Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful. This method calls https://api.twitter.com/1.1/favorites/destroy/[id].json Specified by: destroyFavorite in interface FavoritesResources Parameters: id - the ID of the status to un-favorite Returns: destroyed statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: POST favorites/destroy/:id | Twitter Developers createFavorite public Status createFavorite(long id) throws TwitterException Description copied from interface: FavoritesResources Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful. This method calls https://api.twitter.com/1.1/favorites/create/[id].json Specified by: createFavorite in interface FavoritesResources Parameters: id - the ID of the status to favorite Returns: created favorite status Throws: TwitterException - when Twitter service or network is unavailable See Also: POST favorites/create/:id | Twitter Developers getUserLists public ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName) throws TwitterException Description copied from interface: ListsResources List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Specified by: getUserLists in interface ListsResources Parameters: listOwnerScreenName - The screen name of the list owner as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/list | Twitter Developers getUserLists public ResponseList<UserList> getUserLists(java.lang.String listOwnerScreenName, boolean reverse) throws TwitterException Description copied from interface: ListsResources List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Specified by: getUserLists in interface ListsResources Parameters: listOwnerScreenName - The screen name of the list owner as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. reverse - Set this to true if you would like owned lists to be returned first Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/list | Twitter Developers getUserLists public ResponseList<UserList> getUserLists(long listOwnerUserId) throws TwitterException Description copied from interface: ListsResources List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Specified by: getUserLists in interface ListsResources Parameters: listOwnerUserId - The id of the list owner Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/list | Twitter Developers getUserLists public ResponseList<UserList> getUserLists(long listOwnerUserId, boolean reverse) throws TwitterException Description copied from interface: ListsResources List the lists of the specified user. Private lists will be included if the authenticated users is the same as the user whose lists are being returned. This method calls https://api.twitter.com/1.1/lists.json Specified by: getUserLists in interface ListsResources Parameters: listOwnerUserId - The id of the list owner reverse - Set this to true if you would like owned lists to be returned first Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/list | Twitter Developers getUserListStatuses public ResponseList<Status> getUserListStatuses(long listId, Paging paging) throws TwitterException Description copied from interface: ListsResources Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Specified by: getUserListStatuses in interface ListsResources Parameters: listId - The id of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of statuses for members of the specified list Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/statuses | Twitter Developers getUserListStatuses public ResponseList<Status> getUserListStatuses(long ownerId, java.lang.String slug, Paging paging) throws TwitterException Description copied from interface: ListsResources Show tweet timeline for members of the specified list. https://api.twitter.com/1/user/lists/list_id/statuses.json Specified by: getUserListStatuses in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of statuses for members of the specified list Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/statuses | Twitter Developers getUserListStatuses public ResponseList<Status> getUserListStatuses(java.lang.String ownerScreenName, java.lang.String slug, Paging paging) throws TwitterException Description copied from interface: ListsResources Show tweet timeline for members of the specified list. https://api.twitter.com/1.1/lists/statuses.json Specified by: getUserListStatuses in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list paging - controls pagination. Supports since_id, max_id, count and page parameters. Returns: list of statuses for members of the specified list Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/statuses | Twitter Developers destroyUserListMember public UserList destroyUserListMember(long listId, long userId) throws TwitterException Description copied from interface: ListsResources Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Specified by: destroyUserListMember in interface ListsResources Parameters: listId - The id of the list. userId - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/destroy | Twitter Developers destroyUserListMember public UserList destroyUserListMember(long ownerId, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Specified by: destroyUserListMember in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/destroy | Twitter Developers destroyUserListMember public UserList destroyUserListMember(long listId, java.lang.String screenName) throws TwitterException Description copied from interface: ListsResources Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Specified by: destroyUserListMember in interface ListsResources Parameters: listId - The id of the list. screenName - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/destroy | Twitter Developers destroyUserListMember public UserList destroyUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy.json Specified by: destroyUserListMember in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userId - The screen name of the member you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/destroy | Twitter Developers destroyUserListMembers public UserList destroyUserListMembers(long listId, java.lang.String[] screenNames) throws TwitterException Description copied from interface: ListsResources Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy_all.json Specified by: destroyUserListMembers in interface ListsResources Parameters: listId - The id of the list. screenNames - The screen names of the members you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/destroy_all | Twitter Developers destroyUserListMembers public UserList destroyUserListMembers(long listId, long[] userIds) throws TwitterException Description copied from interface: ListsResources Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy_all.json Specified by: destroyUserListMembers in interface ListsResources Parameters: listId - The id of the list. userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/destroy_all | Twitter Developers destroyUserListMembers public UserList destroyUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String[] screenNames) throws TwitterException Description copied from interface: ListsResources Removes the specified members from the list. The authenticated user must be the list's owner to remove members from the list. This method calls https://api.twitter.com/1.1/lists/members/destroy_all.json Specified by: destroyUserListMembers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The screen names of the members you wish to remove from the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/destroy_all | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the authenticating user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(int count, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the authenticating user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberScreenName - The screen name of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, long cursor, boolean filterToOwnedLists) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberScreenName - The screen name of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(java.lang.String listMemberScreenName, int count, long cursor, boolean filterToOwnedLists) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberScreenName - The screen name of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberScreenName is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberId - The id of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(long listMemberId, long cursor, boolean filterToOwnedLists) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberId - The id of the list member cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberId is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListMemberships public PagableResponseList<UserList> getUserListMemberships(long listMemberId, int count, long cursor, boolean filterToOwnedLists) throws TwitterException Description copied from interface: ListsResources List the lists the specified user has been added to. This method calls https://api.twitter.com/1.1/lists/memberships.json Specified by: getUserListMemberships in interface ListsResources Parameters: listMemberId - The id of the list member count - The amount of results to return per page. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. filterToOwnedLists - Whether to return just lists the authenticating user owns, and the user represented by listMemberId is a member of. Returns: the list of lists Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/memberships | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(long listId, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(long listId, int count, long cursor, boolean skipStatus) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers getUserListSubscribers public PagableResponseList<User> getUserListSubscribers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Description copied from interface: ListsResources Returns the subscribers of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers.json Specified by: getUserListSubscribers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscribers | Twitter Developers createUserListSubscription public UserList createUserListSubscription(long listId) throws TwitterException Description copied from interface: ListsResources Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Specified by: createUserListSubscription in interface ListsResources Parameters: listId - The id of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/subscribers/create | Twitter Developers createUserListSubscription public UserList createUserListSubscription(long ownerId, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Specified by: createUserListSubscription in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/subscribers/create | Twitter Developers createUserListSubscription public UserList createUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Make the authenticated user follow the specified list. This method calls https://api.twitter.com/1.1/list/subscribers/create.json Specified by: createUserListSubscription in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/subscribers/create | Twitter Developers showUserListSubscription public User showUserListSubscription(long listId, long userId) throws TwitterException Description copied from interface: ListsResources Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Specified by: showUserListSubscription in interface ListsResources Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/subscribers/show | Twitter Developers showUserListSubscription public User showUserListSubscription(long ownerId, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Specified by: showUserListSubscription in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/subscribers/show | Twitter Developers showUserListSubscription public User showUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Check if the specified user is a subscriber of the specified list. This method calls https://api.twitter.com/1.1/lists/subscribers/show.json Specified by: showUserListSubscription in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/subscribers/show | Twitter Developers destroyUserListSubscription public UserList destroyUserListSubscription(long listId) throws TwitterException Description copied from interface: ListsResources Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Specified by: destroyUserListSubscription in interface ListsResources Parameters: listId - The id of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/subscribers/destroy | Twitter Developers destroyUserListSubscription public UserList destroyUserListSubscription(long ownerId, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Specified by: destroyUserListSubscription in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/subscribers/destroy | Twitter Developers destroyUserListSubscription public UserList destroyUserListSubscription(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Unsubscribes the authenticated user form the specified list. This method calls https://api.twitter.com/1.1/subscribers/destroy.json Specified by: destroyUserListSubscription in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/subscribers/destroy | Twitter Developers createUserListMembers public UserList createUserListMembers(long listId, long... userIds) throws TwitterException Description copied from interface: ListsResources Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResources Parameters: listId - The id of the list. userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public UserList createUserListMembers(long ownerId, java.lang.String slug, long... userIds) throws TwitterException Description copied from interface: ListsResources Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long... userIds) throws TwitterException Description copied from interface: ListsResources Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userIds - The array of ids of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public UserList createUserListMembers(long listId, java.lang.String... screenNames) throws TwitterException Description copied from interface: ListsResources Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResources Parameters: listId - The id of the list. screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public UserList createUserListMembers(long ownerId, java.lang.String slug, java.lang.String... screenNames) throws TwitterException Description copied from interface: ListsResources Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create_all | Twitter Developers createUserListMembers public UserList createUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String... screenNames) throws TwitterException Description copied from interface: ListsResources Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members, and you are limited to adding up to 100 members to a list at a time with this method. This method calls https://api.twitter.com/1.1/lists/members/create_all.json Specified by: createUserListMembers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list screenNames - The array of screen names of the user to add as member of the list. up to 100 are allowed in a single request. Returns: the list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create_all | Twitter Developers showUserListMembership public User showUserListMembership(long listId, long userId) throws TwitterException Description copied from interface: ListsResources Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Specified by: showUserListMembership in interface ListsResources Parameters: listId - The id of the list. userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/members/show | Twitter Developers showUserListMembership public User showUserListMembership(long ownerId, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Specified by: showUserListMembership in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/members/show | Twitter Developers showUserListMembership public User showUserListMembership(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Check if a user is a member of the specified list. This method calls https://api.twitter.com/1.1/lists/members/show.json Specified by: showUserListMembership in interface ListsResources Parameters: ownerScreenName - Id The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user who you want to know is a member or not of the specified list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable , or the user is not a member of the specified list(TwitterException.getStatusCode() returns 404 in that case.) See Also: GET lists/members/show | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(long listId, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: listId - The id of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(long listId, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(long listId, int count, long cursor, boolean skipStatus) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: listId - The id of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(long ownerId, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers getUserListMembers public PagableResponseList<User> getUserListMembers(java.lang.String ownerScreenName, java.lang.String slug, int count, long cursor, boolean skipStatus) throws TwitterException Description copied from interface: ListsResources Returns the members of the specified list. This method calls https://api.twitter.com/1.1/lists/members.json Specified by: getUserListMembers in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list count - Specifies the number of results to return per page. The default is 20, with a maximum of 5,000. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. skipStatus - When set to either true, t or 1 statuses will not be included in the returned user objects. Returns: the members of the specified list. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/members | Twitter Developers createUserListMember public UserList createUserListMember(long listId, long userId) throws TwitterException Description copied from interface: ListsResources Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Specified by: createUserListMember in interface ListsResources Parameters: listId - The id of the list. userId - The id of the user to add as a member of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create | Twitter Developers createUserListMember public UserList createUserListMember(long ownerId, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Specified by: createUserListMember in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user to add as a member of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create | Twitter Developers createUserListMember public UserList createUserListMember(java.lang.String ownerScreenName, java.lang.String slug, long userId) throws TwitterException Description copied from interface: ListsResources Adds a member to a list. The authenticated user must own the list to be able to add members to it. Lists are limited to having 5000 members. This method calls https://api.twitter.com/1.1/lists/members/create.json Specified by: createUserListMember in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list userId - The id of the user to add as a member of the list. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/members/create | Twitter Developers destroyUserList public UserList destroyUserList(long listId) throws TwitterException Description copied from interface: ListsResources Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Specified by: destroyUserList in interface ListsResources Parameters: listId - The id of the list to delete Returns: the deleted list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/destroy | Twitter Developers destroyUserList public UserList destroyUserList(long ownerId, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Specified by: destroyUserList in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the deleted list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/destroy | Twitter Developers destroyUserList public UserList destroyUserList(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Deletes the specified list. Must be owned by the authenticated user. This method calls https://api.twitter.com/1.1/lists/destroy.json Specified by: destroyUserList in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the deleted list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/destroy | Twitter Developers updateUserList public UserList updateUserList(long listId, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) throws TwitterException Description copied from interface: ListsResources Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Specified by: updateUserList in interface ListsResources Parameters: listId - The id of the list to update. newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/update | Twitter Developers updateUserList public UserList updateUserList(long ownerId, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) throws TwitterException Description copied from interface: ListsResources Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Specified by: updateUserList in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/update | Twitter Developers updateUserList public UserList updateUserList(java.lang.String ownerScreenName, java.lang.String slug, java.lang.String newListName, boolean isPublicList, java.lang.String newDescription) throws TwitterException Description copied from interface: ListsResources Updates the specified list. This method calls https://api.twitter.com/1.1/lists/update.json Specified by: updateUserList in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list newListName - What you'd like to change the list's name to. isPublicList - Whether your list is public or private. Optional. Values can be public or private. Lists are public by default if no mode is specified. newDescription - What you'd like to change the list description to. Returns: the updated list Throws: TwitterException - when Twitter service or network is unavailable See Also: POST lists/update | Twitter Developers updateUserList private UserList updateUserList(java.lang.String newListName, boolean isPublicList, java.lang.String newDescription, HttpParameter... params) throws TwitterException Throws: TwitterException createUserList public UserList createUserList(java.lang.String listName, boolean isPublicList, java.lang.String description) throws TwitterException Description copied from interface: ListsResources Creates a new list for the authenticated user. Accounts are limited to 20 lists. This method calls https://api.twitter.com/1.1/lists/create.json Specified by: createUserList in interface ListsResources Parameters: listName - The name of the list you are creating. Required. isPublicList - set true if you wish to make a public list description - The description of the list you are creating. Optional. Returns: the list that was created Throws: TwitterException - when Twitter service or network is unavailable, or the authenticated user already has 20 lists(TwitterException.getStatusCode() == 403). See Also: POST lists/create | Twitter Developers showUserList public UserList showUserList(long listId) throws TwitterException Description copied from interface: ListsResources Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Specified by: showUserList in interface ListsResources Parameters: listId - The id of the list to show Returns: the specified list Throws: TwitterException - when Twitter service or network is unavailable See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers showUserList public UserList showUserList(long ownerId, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Specified by: showUserList in interface ListsResources Parameters: ownerId - The user ID of the user who owns the list being requested by a slug. slug - slug of the list Returns: the specified list Throws: TwitterException - when Twitter service or network is unavailable See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers showUserList public UserList showUserList(java.lang.String ownerScreenName, java.lang.String slug) throws TwitterException Description copied from interface: ListsResources Show the specified list. Private lists will only be shown if the authenticated user owns the specified list. This method calls https://api.twitter.com/1.1/lists/show.json Specified by: showUserList in interface ListsResources Parameters: ownerScreenName - The screen name of the user who owns the list being requested by a slug. slug - slug of the list Returns: the specified list Throws: TwitterException - when Twitter service or network is unavailable See Also: https://dev.twitter.com/docs/api/1.1/get/lists/show | Twitter Developers getUserListSubscriptions public PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Specified by: getUserListSubscriptions in interface ListsResources Parameters: listSubscriberScreenName - The screen name of the list subscriber cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscriptions | Twitter Developers getUserListSubscriptions public PagableResponseList<UserList> getUserListSubscriptions(java.lang.String listSubscriberScreenName, int count, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Specified by: getUserListSubscriptions in interface ListsResources Parameters: listSubscriberScreenName - The screen name of the list subscriber count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscriptions | Twitter Developers getUserListSubscriptions public PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Specified by: getUserListSubscriptions in interface ListsResources Parameters: listSubscriberId - The ID of the list subscriber cursor - Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscriptions | Twitter Developers getUserListSubscriptions public PagableResponseList<UserList> getUserListSubscriptions(long listSubscriberId, int count, long cursor) throws TwitterException Description copied from interface: ListsResources List the lists the specified user follows. This method calls https://api.twitter.com/1.1/lists/subscriptions.json Specified by: getUserListSubscriptions in interface ListsResources Parameters: listSubscriberId - The ID of the list subscriber count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned to in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. Returns: the list of lists the specified user is subscribed to Throws: TwitterException - when Twitter service or network is unavailable See Also: GET lists/subscriptions | Twitter Developers getUserListsOwnerships public PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Specified by: getUserListsOwnerships in interface ListsResources Parameters: listOwnerScreenName - The screen name of the list owner cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable getUserListsOwnerships public PagableResponseList<UserList> getUserListsOwnerships(java.lang.String listOwnerScreenName, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Specified by: getUserListsOwnerships in interface ListsResources Parameters: listOwnerScreenName - The screen name of the list owner count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable getUserListsOwnerships public PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Specified by: getUserListsOwnerships in interface ListsResources Parameters: listOwnerId - The id of the list owner cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable getUserListsOwnerships public PagableResponseList<UserList> getUserListsOwnerships(long listOwnerId, int count, long cursor) throws TwitterException Description copied from interface: ListsResources Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists. This method calls https://api.twitter.com/1.1/lists/ownerships.json Specified by: getUserListsOwnerships in interface ListsResources Parameters: listOwnerId - The id of the list owner count - The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page. cursor - Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Using cursors to navigate collections for more information. Returns: lists owned by the specified Twitter user Throws: TwitterException - when Twitter service or network is unavailable getSavedSearches public ResponseList<SavedSearch> getSavedSearches() throws TwitterException Description copied from interface: SavedSearchesResources Returns the authenticated user's saved search queries. This method calls https://api.twitter.com/1.1/saved_searches.json Specified by: getSavedSearches in interface SavedSearchesResources Returns: Returns an array of numeric user ids the authenticating user is blocking. Throws: TwitterException - when Twitter service or network is unavailable See Also: GET saved_searches | Twitter Developers showSavedSearch public SavedSearch showSavedSearch(long id) throws TwitterException Description copied from interface: SavedSearchesResources Retrieve the data for a saved search owned by the authenticating user specified by the given id. This method calls https://api.twitter.com/1.1/saved_searches/show/:id.json Specified by: showSavedSearch in interface SavedSearchesResources Parameters: id - The id of the saved search to be retrieved. Returns: the data for a saved search Throws: TwitterException - when Twitter service or network is unavailable See Also: GET saved_searches/show/:id | Twitter Developers createSavedSearch public SavedSearch createSavedSearch(java.lang.String query) throws TwitterException Description copied from interface: SavedSearchesResources Creates a saved search for the authenticated user. This method calls https://api.twitter.com/1.1/saved_searches/saved_searches/create.json Specified by: createSavedSearch in interface SavedSearchesResources Parameters: query - the query string Returns: the data for a created saved search Throws: TwitterException - when Twitter service or network is unavailable See Also: POST saved_searches/create | Twitter Developers destroySavedSearch public SavedSearch destroySavedSearch(long id) throws TwitterException Description copied from interface: SavedSearchesResources Destroys a saved search for the authenticated user. The search specified by id must be owned by the authenticating user. This method calls https://api.twitter.com/1.1/saved_searches/destroy/id.json Specified by: destroySavedSearch in interface SavedSearchesResources Parameters: id - The id of the saved search to be deleted. Returns: the data for a destroyed saved search Throws: TwitterException - when Twitter service or network is unavailable See Also: POST saved_searches/destroy/:id | Twitter Developers getGeoDetails public Place getGeoDetails(java.lang.String placeId) throws TwitterException Description copied from interface: PlacesGeoResources Find out more details of a place that was returned from the PlacesGeoResources.reverseGeoCode(twitter4j.GeoQuery) method. This method calls https://api.twitter.com/1.1/geo/id/:id.json Specified by: getGeoDetails in interface PlacesGeoResources Parameters: placeId - The ID of the location to query about. Returns: details of the specified place Throws: TwitterException - when Twitter service or network is unavailable See Also: GET geo/id/:place_id | Twitter Developers reverseGeoCode public ResponseList<Place> reverseGeoCode(GeoQuery query) throws TwitterException Description copied from interface: PlacesGeoResources Search for places (cities and neighborhoods) that can be attached to a statuses/update. Given a latitude and a longitude, return a list of all the valid places that can be used as a place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location up with a call to statuses/update. There are multiple granularities of places that can be returned -- "neighborhoods", "cities", etc. At this time, only United States data is available through this method. This API call is meant to be an informative call and will deliver generalized results about geography. This method calls https://api.twitter.com/1.1/geo/reverse_geocode.json Specified by: reverseGeoCode in interface PlacesGeoResources Parameters: query - search query Returns: places (cities and neighborhoods) that can be attached to a statuses/update Throws: TwitterException - when Twitter service or network is unavailable See Also: GET geo/reverse_geocode | Twitter Developers searchPlaces public ResponseList<Place> searchPlaces(GeoQuery query) throws TwitterException Description copied from interface: PlacesGeoResources Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to statuses/update. This is the recommended method to use find places that can be attached to statuses/update. Unlike geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user. This method calls https://api.twitter.com/1.1/geo/search.json Specified by: searchPlaces in interface PlacesGeoResources Parameters: query - search query Returns: places (cities and neighborhoods) that can be attached to a statuses/update Throws: TwitterException - when Twitter service or network is unavailable See Also: GET geo/search | Twitter Developers getSimilarPlaces public ResponseList<Place> getSimilarPlaces(GeoLocation location, java.lang.String name, java.lang.String containedWithin, java.lang.String streetAddress) throws TwitterException Description copied from interface: PlacesGeoResources Locates places near the given coordinates which are similar in name. Conceptually you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to post/geo/place to create a new one. The token contained in the response is the token needed to be able to create a new place. This method calls https://api.twitter.com/1.1/geo/similar_places.json Specified by: getSimilarPlaces in interface PlacesGeoResources Parameters: location - The latitude and longitude to search around. name - The name a place is known as. containedWithin - optional: the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. streetAddress - optional: This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place Attributes. Returns: places (cities and neighborhoods) that can be attached to a statuses/update Throws: TwitterException - when Twitter service or network is unavailable getPlaceTrends public Trends getPlaceTrends(int woeid) throws TwitterException Description copied from interface: TrendsResources Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage. This method calls https://api.twitter.com/1.1/trends/place.json Specified by: getPlaceTrends in interface TrendsResources Parameters: woeid - The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID. Returns: trends Throws: TwitterException - when Twitter service or network is unavailable See Also: GET trends/place | Twitter Developers getAvailableTrends public ResponseList<Location> getAvailableTrends() throws TwitterException Description copied from interface: TrendsResources Returns the locations that Twitter has trending topic information for. The response is an array of "locations" that encode the location's WOEID (a Yahoo! Where On Earth ID) and some other human-readable information such as a canonical name and country the location belongs in. This method calls https://api.twitter.com/1.1/trends/available.json Specified by: getAvailableTrends in interface TrendsResources Returns: the locations Throws: TwitterException - when Twitter service or network is unavailable See Also: GET trends/available | Twitter Developers getClosestTrends public ResponseList<Location> getClosestTrends(GeoLocation location) throws TwitterException Description copied from interface: TrendsResources Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID. This method calls https://api.twitter.com/1.1/trends/closest.json Specified by: getClosestTrends in interface TrendsResources Parameters: location - the available trend locations will be sorted by distance to the lat and long passed in. The sort is nearest to furthest. Returns: the locations Throws: TwitterException - when Twitter service or network is unavailable See Also: GET trends/closest | Twitter Developers reportSpam public User reportSpam(long userId) throws TwitterException Description copied from interface: SpamReportingResource The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Specified by: reportSpam in interface SpamReportingResource Parameters: userId - The ID of the user you want to report as a spammer. Returns: The User reported as a spammer. Throws: TwitterException - when Twitter service or network is unavailable See Also: POST report_spam | Twitter Developers reportSpam public User reportSpam(java.lang.String screenName) throws TwitterException Description copied from interface: SpamReportingResource The user specified in the id is blocked by the authenticated user and reported as a spammer. This method calls https://api.twitter.com/1.1/report_spam.json Specified by: reportSpam in interface SpamReportingResource Parameters: screenName - The screen name of the user you want to report as a spammer. Returns: The User reported as a spammer. Throws: TwitterException - when Twitter service or network is unavailable See Also: POST report_spam | Twitter Developers getAPIConfiguration public TwitterAPIConfiguration getAPIConfiguration() throws TwitterException Description copied from interface: HelpResources Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day. Specified by: getAPIConfiguration in interface HelpResources Returns: configuration Throws: TwitterException - when Twitter service or network is unavailable See Also: GET help/configuration | Twitter Developers getLanguages public ResponseList<HelpResources.Language> getLanguages() throws TwitterException Description copied from interface: HelpResources Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests. Specified by: getLanguages in interface HelpResources Returns: list of languages supported by Twitter Throws: TwitterException - when Twitter service or network is unavailable See Also: GET help/languages | Twitter Developers getPrivacyPolicy public java.lang.String getPrivacyPolicy() throws TwitterException Description copied from interface: HelpResources Returns Twitter's Privacy Policy. This method calls https://api.twitter.com/1.1/help/privacy.json Specified by: getPrivacyPolicy in interface HelpResources Returns: privacy policy Throws: TwitterException - when Twitter service or network is unavailable See Also: GET help/privacy | Twitter Developers getTermsOfService public java.lang.String getTermsOfService() throws TwitterException Description copied from interface: HelpResources Returns Twitter's' Terms of Service. This method calls https://api.twitter.com/1.1/help/tos.json Specified by: getTermsOfService in interface HelpResources Returns: Terms of Service Throws: TwitterException - when Twitter service or network is unavailable See Also: GET help/tos | Twitter Developers getRateLimitStatus public java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus() throws TwitterException Description copied from interface: HelpResources Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Specified by: getRateLimitStatus in interface HelpResources Returns: the rate limit statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET application/rate_limit_status getRateLimitStatus public java.util.Map<java.lang.String,RateLimitStatus> getRateLimitStatus(java.lang.String... resources) throws TwitterException Description copied from interface: HelpResources Returns the current rate limits for methods belonging to the specified resource families. Each 1.1 API resource belongs to a "resource family" which is indicated in its method documentation. You can typically determine a method's resource family from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with. Read more about REST API Rate Limiting in v1.1 and review the limits. As of Nov 4th 2012, supported resource names are as follows: "trends","application","users","saved_searches","geo","direct_messages","blocks","favorites","statuses","followers","help","friends","search","friendships","account","lists" This method calls https://api.twitter.com/1.1/application/rate_limit_status.json Specified by: getRateLimitStatus in interface HelpResources Parameters: resources - resources Returns: the rate limit statuses Throws: TwitterException - when Twitter service or network is unavailable See Also: GET application/rate_limit_status timelines public TimelinesResources timelines() Specified by: timelines in interface Twitter Returns: TimelinesResources tweets public TweetsResources tweets() Specified by: tweets in interface Twitter Returns: TweetsResources search public SearchResource search() Specified by: search in interface Twitter Returns: SearchResource directMessages public DirectMessagesResources directMessages() Specified by: directMessages in interface Twitter Returns: DirectMessagesResources friendsFollowers public FriendsFollowersResources friendsFollowers() Specified by: friendsFollowers in interface Twitter Returns: FriendsFollowersResources users public UsersResources users() Specified by: users in interface Twitter Returns: UsersResources suggestedUsers public SuggestedUsersResources suggestedUsers() Specified by: suggestedUsers in interface Twitter Returns: SuggestedUsersResources favorites public FavoritesResources favorites() Specified by: favorites in interface Twitter Returns: FavoritesResources list public ListsResources list() Specified by: list in interface Twitter Returns: ListsResources savedSearches public SavedSearchesResources savedSearches() Specified by: savedSearches in interface Twitter Returns: SavedSearchesResources placesGeo public PlacesGeoResources placesGeo() Specified by: placesGeo in interface Twitter Returns: PlacesGeoResources trends public TrendsResources trends() Specified by: trends in interface Twitter Returns: TrendsResources spamReporting public SpamReportingResource spamReporting() Specified by: spamReporting in interface Twitter Returns: SpamReportingResource help public HelpResources help() Specified by: help in interface Twitter Returns: HelpResources get private HttpResponse get(java.lang.String url) throws TwitterException Throws: TwitterException get private HttpResponse get(java.lang.String url, HttpParameter... params) throws TwitterException Throws: TwitterException post private HttpResponse post(java.lang.String url) throws TwitterException Throws: TwitterException post private HttpResponse post(java.lang.String url, HttpParameter... params) throws TwitterException Throws: TwitterException mergeParameters private HttpParameter[] mergeParameters(HttpParameter[] params1, HttpParameter[] params2) mergeParameters private HttpParameter[] mergeParameters(HttpParameter[] params1, HttpParameter params2) mergeImplicitParams private HttpParameter[] mergeImplicitParams(HttpParameter... params) isOk private boolean isOk(HttpResponse response) toString public java.lang.String toString() Overrides: toString in class TwitterBaseImpl Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterListener"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6,"i35":6,"i36":6,"i37":6,"i38":6,"i39":6,"i40":6,"i41":6,"i42":6,"i43":6,"i44":6,"i45":6,"i46":6,"i47":6,"i48":6,"i49":6,"i50":6,"i51":6,"i52":6,"i53":6,"i54":6,"i55":6,"i56":6,"i57":6,"i58":6,"i59":6,"i60":6,"i61":6,"i62":6,"i63":6,"i64":6,"i65":6,"i66":6,"i67":6,"i68":6,"i69":6,"i70":6,"i71":6,"i72":6,"i73":6,"i74":6,"i75":6,"i76":6,"i77":6,"i78":6,"i79":6,"i80":6,"i81":6,"i82":6,"i83":6,"i84":6,"i85":6,"i86":6,"i87":6,"i88":6,"i89":6,"i90":6,"i91":6,"i92":6,"i93":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface TwitterListener All Known Implementing Classes: TwitterAdapter public interface TwitterListener A listener for receiving asynchronous responses from Twitter Async APIs. Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void checkedUserListMembership(User users)  void checkedUserListSubscription(User user)  void createdBlock(User user)  void createdFavorite(Status status)  void createdFriendship(User user)  void createdMute(User user)  void createdSavedSearch(SavedSearch savedSearch)  void createdUserList(UserList userList)  void createdUserListMember(UserList userList)  void createdUserListMembers(UserList userList)  void destroyedBlock(User user)  void destroyedDirectMessage(DirectMessage message)  void destroyedFavorite(Status status)  void destroyedFriendship(User user)  void destroyedMute(User user)  void destroyedSavedSearch(SavedSearch savedSearch)  void destroyedStatus(Status destroyedStatus)  void destroyedUserList(UserList userList)  void destroyedUserListMember(UserList userList)  void gotAccountSettings(AccountSettings settings)  void gotAPIConfiguration(TwitterAPIConfiguration conf)  void gotAvailableTrends(ResponseList<Location> locations)  void gotBlockIDs(IDs blockingUsersIDs)  void gotBlocksList(ResponseList<User> blockingUsers)  void gotClosestTrends(ResponseList<Location> locations)  void gotContributees(ResponseList<User> users)  void gotContributors(ResponseList<User> users)  void gotDirectMessage(DirectMessage message)  void gotDirectMessages(ResponseList<DirectMessage> messages)  void gotFavorites(ResponseList<Status> statuses)  void gotFollowersIDs(IDs ids)  void gotFollowersList(PagableResponseList<User> users)  void gotFriendsIDs(IDs ids)  void gotFriendsList(PagableResponseList<User> users)  void gotGeoDetails(Place place)  void gotHomeTimeline(ResponseList<Status> statuses)  void gotIncomingFriendships(IDs ids)  void gotLanguages(ResponseList<HelpResources.Language> languages)  void gotMemberSuggestions(ResponseList<User> users)  void gotMentions(ResponseList<Status> statuses)  void gotMuteIDs(IDs blockingUsersIDs)  void gotMutesList(ResponseList<User> blockingUsers)  void gotOAuth2Token(OAuth2Token token)  void gotOAuthAccessToken(AccessToken token)  void gotOAuthRequestToken(RequestToken token)  void gotOEmbed(OEmbed oembed)  void gotOutgoingFriendships(IDs ids)  void gotPlaceTrends(Trends trends)  void gotPrivacyPolicy(java.lang.String privacyPolicy)  void gotRateLimitStatus(java.util.Map<java.lang.String,RateLimitStatus> rateLimitStatus)  void gotRetweets(ResponseList<Status> retweets)  void gotRetweetsOfMe(ResponseList<Status> statuses)  void gotReverseGeoCode(ResponseList<Place> places)  void gotSavedSearch(SavedSearch savedSearch)  void gotSavedSearches(ResponseList<SavedSearch> savedSearches)  void gotSentDirectMessages(ResponseList<DirectMessage> messages)  void gotShowFriendship(Relationship relationship)  void gotShowStatus(Status status)  void gotShowUserList(UserList userList)  void gotSimilarPlaces(ResponseList<Place> places)  void gotSuggestedUserCategories(ResponseList<Category> category)  void gotTermsOfService(java.lang.String tof)  void gotUserDetail(User user)  void gotUserListMembers(PagableResponseList<User> users)  void gotUserListMemberships(PagableResponseList<UserList> userLists)  void gotUserLists(ResponseList<UserList> userLists)  void gotUserListStatuses(ResponseList<Status> statuses)  void gotUserListSubscribers(PagableResponseList<User> users)  void gotUserListSubscriptions(PagableResponseList<UserList> userLists)  void gotUserSuggestions(ResponseList<User> users)  void gotUserTimeline(ResponseList<Status> statuses)  void lookedup(ResponseList<Status> statuses)  void lookedUpFriendships(ResponseList<Friendship> friendships)  void lookedupUsers(ResponseList<User> users)  void onException(TwitterException te, TwitterMethod method)  void removedProfileBanner()  void reportedSpam(User reportedSpammer)  void retweetedStatus(Status retweetedStatus)  void searched(QueryResult queryResult)  void searchedPlaces(ResponseList<Place> places)  void searchedUser(ResponseList<User> userList)  void sentDirectMessage(DirectMessage message)  void subscribedUserList(UserList userList)  void unsubscribedUserList(UserList userList)  void updatedAccountSettings(AccountSettings settings)  void updatedFriendship(Relationship relationship)  void updatedProfile(User user)  void updatedProfileBackgroundImage(User user)  void updatedProfileBanner()  void updatedProfileColors(User user)  void updatedProfileImage(User user)  void updatedStatus(Status status)  void updatedUserList(UserList userList)  void verifiedCredentials(User user)  Method Detail gotMentions void gotMentions(ResponseList<Status> statuses) gotHomeTimeline void gotHomeTimeline(ResponseList<Status> statuses) gotUserTimeline void gotUserTimeline(ResponseList<Status> statuses) gotRetweetsOfMe void gotRetweetsOfMe(ResponseList<Status> statuses) gotRetweets void gotRetweets(ResponseList<Status> retweets) gotShowStatus void gotShowStatus(Status status) destroyedStatus void destroyedStatus(Status destroyedStatus) updatedStatus void updatedStatus(Status status) retweetedStatus void retweetedStatus(Status retweetedStatus) gotOEmbed void gotOEmbed(OEmbed oembed) lookedup void lookedup(ResponseList<Status> statuses) searched void searched(QueryResult queryResult) gotDirectMessages void gotDirectMessages(ResponseList<DirectMessage> messages) gotSentDirectMessages void gotSentDirectMessages(ResponseList<DirectMessage> messages) gotDirectMessage void gotDirectMessage(DirectMessage message) destroyedDirectMessage void destroyedDirectMessage(DirectMessage message) sentDirectMessage void sentDirectMessage(DirectMessage message) gotFriendsIDs void gotFriendsIDs(IDs ids) gotFollowersIDs void gotFollowersIDs(IDs ids) lookedUpFriendships void lookedUpFriendships(ResponseList<Friendship> friendships) gotIncomingFriendships void gotIncomingFriendships(IDs ids) gotOutgoingFriendships void gotOutgoingFriendships(IDs ids) createdFriendship void createdFriendship(User user) destroyedFriendship void destroyedFriendship(User user) updatedFriendship void updatedFriendship(Relationship relationship) gotShowFriendship void gotShowFriendship(Relationship relationship) gotFriendsList void gotFriendsList(PagableResponseList<User> users) gotFollowersList void gotFollowersList(PagableResponseList<User> users) gotAccountSettings void gotAccountSettings(AccountSettings settings) verifiedCredentials void verifiedCredentials(User user) updatedAccountSettings void updatedAccountSettings(AccountSettings settings) updatedProfile void updatedProfile(User user) updatedProfileBackgroundImage void updatedProfileBackgroundImage(User user) updatedProfileColors void updatedProfileColors(User user) updatedProfileImage void updatedProfileImage(User user) gotBlocksList void gotBlocksList(ResponseList<User> blockingUsers) gotBlockIDs void gotBlockIDs(IDs blockingUsersIDs) createdBlock void createdBlock(User user) destroyedBlock void destroyedBlock(User user) lookedupUsers void lookedupUsers(ResponseList<User> users) gotUserDetail void gotUserDetail(User user) searchedUser void searchedUser(ResponseList<User> userList) gotContributees void gotContributees(ResponseList<User> users) gotContributors void gotContributors(ResponseList<User> users) removedProfileBanner void removedProfileBanner() updatedProfileBanner void updatedProfileBanner() gotMutesList void gotMutesList(ResponseList<User> blockingUsers) gotMuteIDs void gotMuteIDs(IDs blockingUsersIDs) createdMute void createdMute(User user) destroyedMute void destroyedMute(User user) gotUserSuggestions void gotUserSuggestions(ResponseList<User> users) gotSuggestedUserCategories void gotSuggestedUserCategories(ResponseList<Category> category) gotMemberSuggestions void gotMemberSuggestions(ResponseList<User> users) gotFavorites void gotFavorites(ResponseList<Status> statuses) createdFavorite void createdFavorite(Status status) destroyedFavorite void destroyedFavorite(Status status) gotUserLists void gotUserLists(ResponseList<UserList> userLists) gotUserListStatuses void gotUserListStatuses(ResponseList<Status> statuses) destroyedUserListMember void destroyedUserListMember(UserList userList) gotUserListMemberships void gotUserListMemberships(PagableResponseList<UserList> userLists) gotUserListSubscribers void gotUserListSubscribers(PagableResponseList<User> users) subscribedUserList void subscribedUserList(UserList userList) checkedUserListSubscription void checkedUserListSubscription(User user) unsubscribedUserList void unsubscribedUserList(UserList userList) createdUserListMembers void createdUserListMembers(UserList userList) checkedUserListMembership void checkedUserListMembership(User users) createdUserListMember void createdUserListMember(UserList userList) destroyedUserList void destroyedUserList(UserList userList) updatedUserList void updatedUserList(UserList userList) createdUserList void createdUserList(UserList userList) gotShowUserList void gotShowUserList(UserList userList) gotUserListSubscriptions void gotUserListSubscriptions(PagableResponseList<UserList> userLists) gotUserListMembers void gotUserListMembers(PagableResponseList<User> users) gotSavedSearches void gotSavedSearches(ResponseList<SavedSearch> savedSearches) gotSavedSearch void gotSavedSearch(SavedSearch savedSearch) createdSavedSearch void createdSavedSearch(SavedSearch savedSearch) destroyedSavedSearch void destroyedSavedSearch(SavedSearch savedSearch) gotGeoDetails void gotGeoDetails(Place place) gotReverseGeoCode void gotReverseGeoCode(ResponseList<Place> places) searchedPlaces void searchedPlaces(ResponseList<Place> places) gotSimilarPlaces void gotSimilarPlaces(ResponseList<Place> places) gotPlaceTrends void gotPlaceTrends(Trends trends) gotAvailableTrends void gotAvailableTrends(ResponseList<Location> locations) gotClosestTrends void gotClosestTrends(ResponseList<Location> locations) reportedSpam void reportedSpam(User reportedSpammer) gotOAuthRequestToken void gotOAuthRequestToken(RequestToken token) gotOAuthAccessToken void gotOAuthAccessToken(AccessToken token) gotOAuth2Token void gotOAuth2Token(OAuth2Token token) gotAPIConfiguration void gotAPIConfiguration(TwitterAPIConfiguration conf) gotLanguages void gotLanguages(ResponseList<HelpResources.Language> languages) gotPrivacyPolicy void gotPrivacyPolicy(java.lang.String privacyPolicy) gotTermsOfService void gotTermsOfService(java.lang.String tof) gotRateLimitStatus void gotRateLimitStatus(java.util.Map<java.lang.String,RateLimitStatus> rateLimitStatus) onException void onException(TwitterException te, TwitterMethod method) Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterMethod <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterMethod"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method twitter4j Enum TwitterMethod java.lang.Object java.lang.Enum<TwitterMethod> twitter4j.TwitterMethod All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<TwitterMethod> public enum TwitterMethod extends java.lang.Enum<TwitterMethod> Author: Yusuke Yamamoto - yusuke at mac.com Enum Constant Summary Enum Constants  Enum Constant and Description ACCOUNT_SETTINGS  AVAILABLE_TRENDS  BLOCK_LIST  BLOCK_LIST_IDS  CHECK_LIST_MEMBERSHIP  CHECK_LIST_SUBSCRIPTION  CLOSEST_TRENDS  CONFIGURATION  CONTRIBUTEEES  CONTRIBUTORS  CREATE_BLOCK  CREATE_FAVORITE  CREATE_FRIENDSHIP  CREATE_LIST_MEMBER  CREATE_LIST_MEMBERS  CREATE_MUTE  CREATE_SAVED_SEARCH  CREATE_USER_LIST  DESTROY_BLOCK  DESTROY_DIRECT_MESSAGE  DESTROY_FAVORITE  DESTROY_FRIENDSHIP  DESTROY_LIST_MEMBER  DESTROY_MUTE  DESTROY_SAVED_SEARCH  DESTROY_STATUS  DESTROY_USER_LIST  DIRECT_MESSAGE  DIRECT_MESSAGES  FAVORITES  FOLLOWERS_IDS  FOLLOWERS_LIST  FRIENDS_IDS  FRIENDS_LIST  GEO_DETAILS  HOME_TIMELINE  INCOMING_FRIENDSHIPS  LANGUAGES  LIST_MEMBERS  LIST_SUBSCRIBERS  LOOKUP  LOOKUP_FRIENDSHIPS  LOOKUP_USERS  MEMBER_SUGGESTIONS  MENTIONS_TIMELINE  MUTE_LIST  MUTE_LIST_IDS  OAUTH_ACCESS_TOKEN  OAUTH_REQUEST_TOKEN  OEMBED  OUTGOING_FRIENDSHIPS  PLACE_TRENDS  PRIVACY_POLICY  RATE_LIMIT_STATUS  RELATED_RESULTS  REMOVE_PROFILE_BANNER  REPORT_SPAM  RETWEET_STATUS  RETWEETS  RETWEETS_OF_ME  REVERSE_GEO_CODE  SAVED_SEARCH  SAVED_SEARCHES  SEARCH  SEARCH_PLACES  SEARCH_USERS  SEND_DIRECT_MESSAGE  SENT_DIRECT_MESSAGES  SHOW_FRIENDSHIP  SHOW_STATUS  SHOW_USER  SHOW_USER_LIST  SIMILAR_PLACES  SUBSCRIBE_LIST  SUGGESTED_USER_CATEGORIES  TERMS_OF_SERVICE  UNSUBSCRIBE_LIST  UPDATE_ACCOUNT_SETTINGS  UPDATE_FRIENDSHIP  UPDATE_PROFILE  UPDATE_PROFILE_BACKGROUND_IMAGE  UPDATE_PROFILE_BANNER  UPDATE_PROFILE_COLORS  UPDATE_PROFILE_IMAGE  UPDATE_STATUS  UPDATE_USER_LIST  USER_LIST_MEMBERSHIPS  USER_LIST_STATUSES  USER_LIST_SUBSCRIPTIONS  USER_LISTS  USER_SUGGESTIONS  USER_TIMELINE  VERIFY_CREDENTIALS  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static TwitterMethod valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. static TwitterMethod[] values() Returns an array containing the constants of this enum type, in the order they are declared. Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait Enum Constant Detail MENTIONS_TIMELINE public static final TwitterMethod MENTIONS_TIMELINE USER_TIMELINE public static final TwitterMethod USER_TIMELINE HOME_TIMELINE public static final TwitterMethod HOME_TIMELINE RETWEETS_OF_ME public static final TwitterMethod RETWEETS_OF_ME RETWEETS public static final TwitterMethod RETWEETS SHOW_STATUS public static final TwitterMethod SHOW_STATUS DESTROY_STATUS public static final TwitterMethod DESTROY_STATUS UPDATE_STATUS public static final TwitterMethod UPDATE_STATUS RETWEET_STATUS public static final TwitterMethod RETWEET_STATUS OEMBED public static final TwitterMethod OEMBED LOOKUP public static final TwitterMethod LOOKUP SEARCH public static final TwitterMethod SEARCH DIRECT_MESSAGES public static final TwitterMethod DIRECT_MESSAGES SENT_DIRECT_MESSAGES public static final TwitterMethod SENT_DIRECT_MESSAGES DIRECT_MESSAGE public static final TwitterMethod DIRECT_MESSAGE DESTROY_DIRECT_MESSAGE public static final TwitterMethod DESTROY_DIRECT_MESSAGE SEND_DIRECT_MESSAGE public static final TwitterMethod SEND_DIRECT_MESSAGE FRIENDS_IDS public static final TwitterMethod FRIENDS_IDS FOLLOWERS_IDS public static final TwitterMethod FOLLOWERS_IDS LOOKUP_FRIENDSHIPS public static final TwitterMethod LOOKUP_FRIENDSHIPS INCOMING_FRIENDSHIPS public static final TwitterMethod INCOMING_FRIENDSHIPS OUTGOING_FRIENDSHIPS public static final TwitterMethod OUTGOING_FRIENDSHIPS CREATE_FRIENDSHIP public static final TwitterMethod CREATE_FRIENDSHIP DESTROY_FRIENDSHIP public static final TwitterMethod DESTROY_FRIENDSHIP UPDATE_FRIENDSHIP public static final TwitterMethod UPDATE_FRIENDSHIP SHOW_FRIENDSHIP public static final TwitterMethod SHOW_FRIENDSHIP FRIENDS_LIST public static final TwitterMethod FRIENDS_LIST FOLLOWERS_LIST public static final TwitterMethod FOLLOWERS_LIST ACCOUNT_SETTINGS public static final TwitterMethod ACCOUNT_SETTINGS VERIFY_CREDENTIALS public static final TwitterMethod VERIFY_CREDENTIALS UPDATE_ACCOUNT_SETTINGS public static final TwitterMethod UPDATE_ACCOUNT_SETTINGS UPDATE_PROFILE public static final TwitterMethod UPDATE_PROFILE UPDATE_PROFILE_BACKGROUND_IMAGE public static final TwitterMethod UPDATE_PROFILE_BACKGROUND_IMAGE UPDATE_PROFILE_COLORS public static final TwitterMethod UPDATE_PROFILE_COLORS UPDATE_PROFILE_IMAGE public static final TwitterMethod UPDATE_PROFILE_IMAGE BLOCK_LIST public static final TwitterMethod BLOCK_LIST BLOCK_LIST_IDS public static final TwitterMethod BLOCK_LIST_IDS CREATE_BLOCK public static final TwitterMethod CREATE_BLOCK DESTROY_BLOCK public static final TwitterMethod DESTROY_BLOCK MUTE_LIST public static final TwitterMethod MUTE_LIST MUTE_LIST_IDS public static final TwitterMethod MUTE_LIST_IDS CREATE_MUTE public static final TwitterMethod CREATE_MUTE DESTROY_MUTE public static final TwitterMethod DESTROY_MUTE SHOW_USER public static final TwitterMethod SHOW_USER LOOKUP_USERS public static final TwitterMethod LOOKUP_USERS SEARCH_USERS public static final TwitterMethod SEARCH_USERS CONTRIBUTORS public static final TwitterMethod CONTRIBUTORS CONTRIBUTEEES public static final TwitterMethod CONTRIBUTEEES REMOVE_PROFILE_BANNER public static final TwitterMethod REMOVE_PROFILE_BANNER UPDATE_PROFILE_BANNER public static final TwitterMethod UPDATE_PROFILE_BANNER RATE_LIMIT_STATUS public static final TwitterMethod RATE_LIMIT_STATUS USER_SUGGESTIONS public static final TwitterMethod USER_SUGGESTIONS SUGGESTED_USER_CATEGORIES public static final TwitterMethod SUGGESTED_USER_CATEGORIES MEMBER_SUGGESTIONS public static final TwitterMethod MEMBER_SUGGESTIONS FAVORITES public static final TwitterMethod FAVORITES DESTROY_FAVORITE public static final TwitterMethod DESTROY_FAVORITE CREATE_FAVORITE public static final TwitterMethod CREATE_FAVORITE USER_LISTS public static final TwitterMethod USER_LISTS USER_LIST_STATUSES public static final TwitterMethod USER_LIST_STATUSES DESTROY_LIST_MEMBER public static final TwitterMethod DESTROY_LIST_MEMBER USER_LIST_MEMBERSHIPS public static final TwitterMethod USER_LIST_MEMBERSHIPS LIST_SUBSCRIBERS public static final TwitterMethod LIST_SUBSCRIBERS SUBSCRIBE_LIST public static final TwitterMethod SUBSCRIBE_LIST CHECK_LIST_SUBSCRIPTION public static final TwitterMethod CHECK_LIST_SUBSCRIPTION UNSUBSCRIBE_LIST public static final TwitterMethod UNSUBSCRIBE_LIST CREATE_LIST_MEMBERS public static final TwitterMethod CREATE_LIST_MEMBERS CHECK_LIST_MEMBERSHIP public static final TwitterMethod CHECK_LIST_MEMBERSHIP LIST_MEMBERS public static final TwitterMethod LIST_MEMBERS CREATE_LIST_MEMBER public static final TwitterMethod CREATE_LIST_MEMBER DESTROY_USER_LIST public static final TwitterMethod DESTROY_USER_LIST UPDATE_USER_LIST public static final TwitterMethod UPDATE_USER_LIST CREATE_USER_LIST public static final TwitterMethod CREATE_USER_LIST SHOW_USER_LIST public static final TwitterMethod SHOW_USER_LIST USER_LIST_SUBSCRIPTIONS public static final TwitterMethod USER_LIST_SUBSCRIPTIONS SAVED_SEARCHES public static final TwitterMethod SAVED_SEARCHES SAVED_SEARCH public static final TwitterMethod SAVED_SEARCH CREATE_SAVED_SEARCH public static final TwitterMethod CREATE_SAVED_SEARCH DESTROY_SAVED_SEARCH public static final TwitterMethod DESTROY_SAVED_SEARCH SEARCH_PLACES public static final TwitterMethod SEARCH_PLACES SIMILAR_PLACES public static final TwitterMethod SIMILAR_PLACES REVERSE_GEO_CODE public static final TwitterMethod REVERSE_GEO_CODE GEO_DETAILS public static final TwitterMethod GEO_DETAILS PLACE_TRENDS public static final TwitterMethod PLACE_TRENDS AVAILABLE_TRENDS public static final TwitterMethod AVAILABLE_TRENDS CLOSEST_TRENDS public static final TwitterMethod CLOSEST_TRENDS REPORT_SPAM public static final TwitterMethod REPORT_SPAM OAUTH_REQUEST_TOKEN public static final TwitterMethod OAUTH_REQUEST_TOKEN OAUTH_ACCESS_TOKEN public static final TwitterMethod OAUTH_ACCESS_TOKEN TERMS_OF_SERVICE public static final TwitterMethod TERMS_OF_SERVICE CONFIGURATION public static final TwitterMethod CONFIGURATION LANGUAGES public static final TwitterMethod LANGUAGES PRIVACY_POLICY public static final TwitterMethod PRIVACY_POLICY RELATED_RESULTS public static final TwitterMethod RELATED_RESULTS Method Detail values public static TwitterMethod[] values() Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (TwitterMethod c : TwitterMethod.values())   System.out.println(c); Returns: an array containing the constants of this enum type, in the order they are declared valueOf public static TwitterMethod valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: java.lang.IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method TwitterObjectFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterObjectFactory"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9,"i2":9,"i3":9,"i4":9,"i5":9,"i6":9,"i7":9,"i8":9,"i9":9,"i10":9,"i11":9,"i12":9,"i13":9,"i14":9,"i15":9,"i16":9,"i17":9,"i18":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterObjectFactory java.lang.Object twitter4j.TwitterObjectFactory public final class TwitterObjectFactory extends java.lang.Object Since: Twitter4J 4.0.0 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private static java.lang.ThreadLocal<java.util.Map> rawJsonMap  private static boolean registeredAtleastOnce  Constructor Summary Constructors  Modifier Constructor and Description private TwitterObjectFactory()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description (package private) static void clearThreadLocalMap() clear raw JSON forms associated with the current thread. static AccountTotals createAccountTotals(java.lang.String rawJSON) Constructs an AccountTotals object from rawJSON string. static Category createCategory(java.lang.String rawJSON) Constructs a Category object from rawJSON string. static DirectMessage createDirectMessage(java.lang.String rawJSON) Constructs a DirectMessage object from rawJSON string. static IDs createIDs(java.lang.String rawJSON) Constructs a IDs object from rawJSON string. static Location createLocation(java.lang.String rawJSON) Constructs a Location object from rawJSON string. static java.lang.Object createObject(java.lang.String rawJSON) Construct an object from rawJSON string. static OEmbed createOEmbed(java.lang.String rawJSON) Constructs an OEmbed object from rawJSON string. static Place createPlace(java.lang.String rawJSON) Constructs a Place object from rawJSON string. static java.util.Map<java.lang.String,RateLimitStatus> createRateLimitStatus(java.lang.String rawJSON) Constructs a RateLimitStatus object from rawJSON string. static Relationship createRelationship(java.lang.String rawJSON) Constructs a Relationship object from rawJSON string. static SavedSearch createSavedSearch(java.lang.String rawJSON) Constructs a SavedSearch object from rawJSON string. static Status createStatus(java.lang.String rawJSON) Constructs a Status object from rawJSON string. static Trend createTrend(java.lang.String rawJSON) Constructs a Trend object from rawJSON string. static Trends createTrends(java.lang.String rawJSON) Constructs a Trends object from rawJSON string. static User createUser(java.lang.String rawJSON) Constructs a User object from rawJSON string. static UserList createUserList(java.lang.String rawJSON) Constructs a UserList object from rawJSON string. static java.lang.String getRawJSON(java.lang.Object obj) Returns a raw JSON form of the provided object. Note that raw JSON forms can be retrieved only from the same thread invoked the last method call and will become inaccessible once another method call (package private) static <T> T registerJSONObject(T key, java.lang.Object json) associate a raw JSON form to the current thread Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail rawJsonMap private static final java.lang.ThreadLocal<java.util.Map> rawJsonMap registeredAtleastOnce private static boolean registeredAtleastOnce Constructor Detail TwitterObjectFactory private TwitterObjectFactory() Method Detail getRawJSON public static java.lang.String getRawJSON(java.lang.Object obj) Returns a raw JSON form of the provided object. Note that raw JSON forms can be retrieved only from the same thread invoked the last method call and will become inaccessible once another method call Parameters: obj - target object to retrieve JSON Returns: raw JSON Since: Twitter4J 2.1.7 createStatus public static Status createStatus(java.lang.String rawJSON) throws TwitterException Constructs a Status object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Status Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createUser public static User createUser(java.lang.String rawJSON) throws TwitterException Constructs a User object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: User Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createAccountTotals public static AccountTotals createAccountTotals(java.lang.String rawJSON) throws TwitterException Constructs an AccountTotals object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: AccountTotals Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.9 createRelationship public static Relationship createRelationship(java.lang.String rawJSON) throws TwitterException Constructs a Relationship object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Relationship Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createPlace public static Place createPlace(java.lang.String rawJSON) throws TwitterException Constructs a Place object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Place Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createSavedSearch public static SavedSearch createSavedSearch(java.lang.String rawJSON) throws TwitterException Constructs a SavedSearch object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: SavedSearch Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createTrend public static Trend createTrend(java.lang.String rawJSON) throws TwitterException Constructs a Trend object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Trend Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createTrends public static Trends createTrends(java.lang.String rawJSON) throws TwitterException Constructs a Trends object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Trends Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createIDs public static IDs createIDs(java.lang.String rawJSON) throws TwitterException Constructs a IDs object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: IDs Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createRateLimitStatus public static java.util.Map<java.lang.String,RateLimitStatus> createRateLimitStatus(java.lang.String rawJSON) throws TwitterException Constructs a RateLimitStatus object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: RateLimitStatus Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createCategory public static Category createCategory(java.lang.String rawJSON) throws TwitterException Constructs a Category object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Category Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createDirectMessage public static DirectMessage createDirectMessage(java.lang.String rawJSON) throws TwitterException Constructs a DirectMessage object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: DirectMessage Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createLocation public static Location createLocation(java.lang.String rawJSON) throws TwitterException Constructs a Location object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: Location Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createUserList public static UserList createUserList(java.lang.String rawJSON) throws TwitterException Constructs a UserList object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: UserList Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.7 createOEmbed public static OEmbed createOEmbed(java.lang.String rawJSON) throws TwitterException Constructs an OEmbed object from rawJSON string. Parameters: rawJSON - raw JSON form as String Returns: OEmbed Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 3.0.2 createObject public static java.lang.Object createObject(java.lang.String rawJSON) throws TwitterException Construct an object from rawJSON string. This method may be called when you do not know what a given raw JSON string contains. It will do the work of determining what type of object the JSON represents, and constructing the respective object type. For example, if the JSON contents represents a Status, then a Status will be returned. If it represents a deletion notice, then a StatusDeletionNotice will be returned. The caller can simply use instanceof to handle the returned object as applicable. NOTE: the raw JSONObject will be returned in cases where there isn't a discrete respective object type that can be constructed. That way, the caller can at least have access to the JSON itself. Parameters: rawJSON - raw JSON form as String Returns: the respective constructed object, or the JSONObject in the case where we cannot determine the object type. Throws: TwitterException - when provided string is not a valid JSON string. Since: Twitter4J 2.1.9 clearThreadLocalMap static void clearThreadLocalMap() clear raw JSON forms associated with the current thread. Since: Twitter4J 2.1.7 registerJSONObject static <T> T registerJSONObject(T key, java.lang.Object json) associate a raw JSON form to the current thread Since: Twitter4J 2.1.7 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterResponse <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterResponse"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface TwitterResponse All Superinterfaces: java.io.Serializable All Known Subinterfaces: AccountSettings, AccountTotals, DirectMessage, IDs, OEmbed, PagableResponseList<T>, Place, QueryResult, Relationship, ResponseList<T>, SavedSearch, Status, Trends, TwitterAPIConfiguration, User, UserList All Known Implementing Classes: TwitterException public interface TwitterResponse extends java.io.Serializable Super interface of Twitter Response data interfaces which indicates that rate limit status is avaialble. Author: Yusuke Yamamoto - yusuke at mac.com See Also: DirectMessage, Status, User Field Summary Fields  Modifier and Type Field and Description static int NONE  static int READ  static int READ_WRITE  static int READ_WRITE_DIRECTMESSAGES  Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getAccessLevel()  RateLimitStatus getRateLimitStatus() Returns the current rate limit status if available. Field Detail NONE static final int NONE See Also: Constant Field Values READ static final int READ See Also: Constant Field Values READ_WRITE static final int READ_WRITE See Also: Constant Field Values READ_WRITE_DIRECTMESSAGES static final int READ_WRITE_DIRECTMESSAGES See Also: Constant Field Values Method Detail getRateLimitStatus RateLimitStatus getRateLimitStatus() Returns the current rate limit status if available. Returns: current rate limit status Since: Twitter4J 2.1.0 getAccessLevel int getAccessLevel() Returns: application permission model Since: Twitter4J 2.2.3 See Also: Application Permission Model FAQ - How do we know what the access level of a user token is? Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterStream <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterStream"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface TwitterStream All Superinterfaces: OAuthSupport, TwitterBase All Known Implementing Classes: TwitterStreamImpl public interface TwitterStream extends OAuthSupport, TwitterBase Since: Twitter4J 2.2.0 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void addConnectionLifeCycleListener(ConnectionLifeCycleListener listener) Adds a ConnectionLifeCycleListener void addListener(StreamListener listener)  void cleanUp() shutdown internal stream consuming thread void clearListeners() clear status listeners void filter(FilterQuery query) Start consuming public statuses that match one or more filter predicates. void filter(java.lang.String... track) Start consuming public statuses that match the filter predicate. void firehose(int count) Starts listening on all public statuses. void links(int count) Starts listening on all public statuses containing links. TwitterStream onException(Consumer<java.lang.Exception> action)  TwitterStream onStatus(Consumer<Status> action)  void removeListener(StreamListener listener)  void replaceListener(StreamListener toBeRemoved, StreamListener toBeAdded) replace existing listener void retweet() Starts listening on all retweets. void sample() Starts listening on random sample of all public statuses. void sample(java.lang.String language) Starts listening on random sample of all public statuses. void shutdown() Shuts down internal dispatcher thread shared by all TwitterStream instances. StreamController site(boolean withFollowings, long... follow) Site Streams, a new feature on the Streaming API, is now available for beta testing. void user() User Streams provides real-time updates of all data needed to update a desktop application display. void user(java.lang.String... track) User Streams provides real-time updates of all data needed to update a desktop application display. Methods inherited from interface twitter4j.auth.OAuthSupport getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, setOAuthAccessToken, setOAuthConsumer Methods inherited from interface twitter4j.TwitterBase addRateLimitStatusListener, getAuthorization, getConfiguration, getId, getScreenName, onRateLimitReached, onRateLimitStatus Method Detail addConnectionLifeCycleListener void addConnectionLifeCycleListener(ConnectionLifeCycleListener listener) Adds a ConnectionLifeCycleListener Parameters: listener - listener to be added Since: Twitter4J 2.1.7 addListener void addListener(StreamListener listener) Parameters: listener - listener to add Since: Twitter4J 2.1.8 onStatus TwitterStream onStatus(Consumer<Status> action) Parameters: action - action when receiving Status Returns: this instance Since: Twitter4J 4.0.4 onException TwitterStream onException(Consumer<java.lang.Exception> action) Parameters: action - action when receiving TwitterException Returns: this instance Since: Twitter4J 4.0.4 removeListener void removeListener(StreamListener listener) Parameters: listener - listener to remove Since: Twitter4J 4.0.0 clearListeners void clearListeners() clear status listeners Since: Twitter4J 4.0.0 replaceListener void replaceListener(StreamListener toBeRemoved, StreamListener toBeAdded) replace existing listener Parameters: toBeRemoved - listener to be removed toBeAdded - listener to be added Since: Twitter4J 4.0.0 firehose void firehose(int count) Starts listening on all public statuses. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the firehose. If your service warrants access to it, we'll contact you. Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. Since: Twitter4J 2.0.4 See Also: StatusStream, Streaming API Methods statuses/firehose links void links(int count) Starts listening on all public statuses containing links. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the links stream. If your service warrants access to it, we'll contact you. Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. Since: Twitter4J 2.1.1 See Also: StatusStream, Streaming API Methods statuses/links retweet void retweet() Starts listening on all retweets. The retweet stream is not a generally available resource. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case. As of 9/11/2009, the site-wide retweet feature has not yet launched, so there are currently few, if any, retweets on this stream. Since: Twitter4J 2.0.10 See Also: StatusStream, Streaming API Methods statuses/retweet sample void sample() Starts listening on random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample. Since: Twitter4J 2.0.10 See Also: StatusStream, Streaming API: Methods statuses/sample sample void sample(java.lang.String language) Starts listening on random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample. Only samples Tweets written in the given language. Parameters: language - language to be sampled Since: Twitter4J 2.0.10 See Also: StatusStream, Streaming API: Methods statuses/sample user void user() User Streams provides real-time updates of all data needed to update a desktop application display. Applications can request startup back-fill from the REST API and then transition to Streaming for nearly all subsequent reads. Rate limits and latency are practically eliminated. Desktop developers can stop managing rate limits and use this new data to create an entirely new user experience. On our end, we hope to reduce costs and increase site reliability. Throws: java.lang.IllegalStateException - when non-UserStreamListener is set, or no listener is set See Also: User Streams user void user(java.lang.String... track) User Streams provides real-time updates of all data needed to update a desktop application display. Applications can request startup back-fill from the REST API and then transition to Streaming for nearly all subsequent reads. Rate limits and latency are practically eliminated. Desktop developers can stop managing rate limits and use this new data to create an entirely new user experience. On our end, we hope to reduce costs and increase site reliability. Parameters: track - keywords to track Throws: java.lang.IllegalStateException - when non-UserStreamListener is set, or no listener is set Since: Twitter4J 2.1.9 See Also: User Streams site StreamController site(boolean withFollowings, long... follow) Site Streams, a new feature on the Streaming API, is now available for beta testing. Site Streams allows services, such as web sites or mobile push services, to receive real-time updates for a large number of users without any of the hassles of managing REST API rate limits. The initial version delivers events created by, or directed to, users that have shared their OAuth token with your application. The following events are streamed immediately, and without rate limits: Home Timelines, Mentions Timelines, User Timelines, Direct Messages, Mentions, Follows, Favorites, Tweets, Retweets, Profile changes, and List changes. The following limitations must be respected during the beta period. These limitations may be changed with little advance notice. We intend to increase or remove these various limitations as we move from beta test into full production: Limit the follow count to 100 users per stream. Clients must occasionally compact users onto a smaller number of connections to minimize the total number of connections outstanding. Open no more than 25 new connections per second and exponentially back-off on errors. Parameters: withFollowings - whether to receive status updates from people following follow - an array of users to include in the stream Returns: controller to control the site stream Since: Twitter4J 2.1.8 See Also: Site Streams | Twitter Developers filter void filter(FilterQuery query) Start consuming public statuses that match one or more filter predicates. At least one predicate parameter, follow, locations, or track must be specified. Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API. Placing long parameters in the URL may cause the request to be rejected for excessive URL length. The default access level allows up to 200 track keywords, 400 follow userids and 10 1-degree location boxes. Increased access levels allow 80,000 follow userids ("shadow" role), 400,000 follow userids ("birddog" role), 10,000 track keywords ("restricted track" role), 200,000 track keywords ("partner track" role), and 200 10-degree location boxes ("locRestricted" role). Increased track access levels also pass a higher proportion of statuses before limiting the stream. Parameters: query - Filter query Since: Twitter4J 2.1.2 See Also: StatusStream, Streaming API Methods statuses/filter filter void filter(java.lang.String... track) Start consuming public statuses that match the filter predicate. Placing long parameters in the URL may cause the request to be rejected for excessive URL length. The default access level allows up to 200 track keywords. Parameters: track - words to be filtered Since: Twitter4J 4.0.4 cleanUp void cleanUp() shutdown internal stream consuming thread Since: Twitter4J 2.1.7 shutdown void shutdown() Shuts down internal dispatcher thread shared by all TwitterStream instances. Since: Twitter4J 2.1.9 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterStreamFactory <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterStreamFactory"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterStreamFactory java.lang.Object twitter4j.TwitterStreamFactory All Implemented Interfaces: java.io.Serializable public final class TwitterStreamFactory extends java.lang.Object implements java.io.Serializable A factory class for TwitterFactory. An instance of this class is completely thread safe and can be re-used and used concurrently. Note that TwitterStream is NOT compatible with Google App Engine as GAE is not capable of handling requests longer than 30 seconds. Since: Twitter4J 2.1.0 Author: Yusuke Yamamoto - yusuke at mac.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private Configuration conf  private static long serialVersionUID  private static TwitterStream SINGLETON  Constructor Summary Constructors  Constructor and Description TwitterStreamFactory() Creates a TwitterStreamFactory with the root configuration. TwitterStreamFactory(Configuration conf) Creates a TwitterStreamFactory with the given configuration. TwitterStreamFactory(java.lang.String configTreePath) Creates a TwitterStreamFactory with a specified config tree. Method Summary All Methods Static Methods Instance Methods Concrete Methods  Modifier and Type Method and Description TwitterStream getInstance() Returns a instance associated with the configuration bound to this factory. TwitterStream getInstance(AccessToken accessToken) Returns a OAuth Authenticated instance. consumer key and consumer Secret must be provided by twitter4j.properties, or system properties. TwitterStream getInstance(Authorization auth) Returns a instance. private TwitterStream getInstance(Configuration conf, Authorization auth)  static TwitterStream getSingleton() Returns default singleton TwitterStream instance. Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values conf private final Configuration conf SINGLETON private static final TwitterStream SINGLETON Constructor Detail TwitterStreamFactory public TwitterStreamFactory() Creates a TwitterStreamFactory with the root configuration. TwitterStreamFactory public TwitterStreamFactory(Configuration conf) Creates a TwitterStreamFactory with the given configuration. Parameters: conf - the configuration to use Since: Twitter4J 2.1.1 TwitterStreamFactory public TwitterStreamFactory(java.lang.String configTreePath) Creates a TwitterStreamFactory with a specified config tree. Parameters: configTreePath - the path Method Detail getInstance public TwitterStream getInstance() Returns a instance associated with the configuration bound to this factory. Returns: default instance getInstance public TwitterStream getInstance(AccessToken accessToken) Returns a OAuth Authenticated instance. consumer key and consumer Secret must be provided by twitter4j.properties, or system properties. Unlike OAuthSupport.setOAuthAccessToken(twitter4j.auth.AccessToken), this factory method potentially returns a cached instance. Parameters: accessToken - access token Returns: an instance getInstance public TwitterStream getInstance(Authorization auth) Returns a instance. Parameters: auth - authorization object to be associated Returns: an instance getInstance private TwitterStream getInstance(Configuration conf, Authorization auth) getSingleton public static TwitterStream getSingleton() Returns default singleton TwitterStream instance. Returns: default singleton TwitterStream instance Since: Twitter4J 2.2.4 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterStreamImpl.Mode <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterStreamImpl.Mode"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method twitter4j Enum TwitterStreamImpl.Mode java.lang.Object java.lang.Enum<TwitterStreamImpl.Mode> twitter4j.TwitterStreamImpl.Mode All Implemented Interfaces: java.io.Serializable, java.lang.Comparable<TwitterStreamImpl.Mode> Enclosing class: TwitterStreamImpl static enum TwitterStreamImpl.Mode extends java.lang.Enum<TwitterStreamImpl.Mode> Enum Constant Summary Enum Constants  Enum Constant and Description site  status  user  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static TwitterStreamImpl.Mode valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. static TwitterStreamImpl.Mode[] values() Returns an array containing the constants of this enum type, in the order they are declared. Methods inherited from class java.lang.Enum clone, compareTo, equals, finalize, getDeclaringClass, hashCode, name, ordinal, toString, valueOf Methods inherited from class java.lang.Object getClass, notify, notifyAll, wait, wait, wait Enum Constant Detail user public static final TwitterStreamImpl.Mode user status public static final TwitterStreamImpl.Mode status site public static final TwitterStreamImpl.Mode site Method Detail values public static TwitterStreamImpl.Mode[] values() Returns an array containing the constants of this enum type, in the order they are declared. This method may be used to iterate over the constants as follows: for (TwitterStreamImpl.Mode c : TwitterStreamImpl.Mode.values())   System.out.println(c); Returns: an array containing the constants of this enum type, in the order they are declared valueOf public static TwitterStreamImpl.Mode valueOf(java.lang.String name) Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Parameters: name - the name of the enum constant to be returned. Returns: the enum constant with the specified name Throws: java.lang.IllegalArgumentException - if this enum type has no constant with the specified name java.lang.NullPointerException - if the argument is null Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Enum Constants |  Field |  Method Detail:  Enum Constants |  Field |  Method TwitterStreamImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterStreamImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class TwitterStreamImpl java.lang.Object twitter4j.TwitterBaseImpl twitter4j.TwitterStreamImpl All Implemented Interfaces: java.io.Serializable, OAuth2Support, OAuthSupport, TwitterBase, TwitterStream class TwitterStreamImpl extends TwitterBaseImpl implements TwitterStream A java representation of the Streaming API: Methods Note that this class is NOT compatible with Google App Engine as GAE is not capable of handling requests longer than 30 seconds. Since: Twitter4J 2.0.4 Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested Classes  Modifier and Type Class and Description (package private) static class  TwitterStreamImpl.Mode  (package private) class  TwitterStreamImpl.TwitterStreamConsumer  Field Summary Fields  Modifier and Type Field and Description private static int count  private static Dispatcher dispatcher  private TwitterStreamImpl.TwitterStreamConsumer handler  private HttpClient http  private static int HTTP_ERROR_INITIAL_WAIT  private static int HTTP_ERROR_WAIT_CAP  private java.util.List<ConnectionLifeCycleListener> lifeCycleListeners  private static Logger logger  private static int NO_WAIT  private static int numberOfHandlers  private static long serialVersionUID  private java.lang.String stallWarningsGetParam  private HttpParameter stallWarningsParam  private java.util.ArrayList<StreamListener> streamListeners  private static int TCP_ERROR_INITIAL_WAIT  private static int TCP_ERROR_WAIT_CAP  Fields inherited from class twitter4j.TwitterBaseImpl auth, conf, factory Constructor Summary Constructors  Constructor and Description TwitterStreamImpl(Configuration conf, Authorization auth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void addConnectionLifeCycleListener(ConnectionLifeCycleListener listener) Adds a ConnectionLifeCycleListener void addListener(StreamListener listener)  void cleanUp() shutdown internal stream consuming thread void clearListeners() clear status listeners private void ensureSiteStreamsListenerIsSet()  private void ensureStatusStreamListenerIsSet() check if any listener is set. boolean equals(java.lang.Object o)  void filter(FilterQuery query) Start consuming public statuses that match one or more filter predicates. void filter(java.lang.String... track) Start consuming public statuses that match the filter predicate. void firehose(int count) Starts listening on all public statuses. private StatusStream getCountStream(java.lang.String relativeUrl, int count)  private Dispatcher getDispatcher()  (package private) StatusStream getFilterStream(FilterQuery query) Returns public statuses that match one or more filter predicates. (package private) StatusStream getFirehoseStream(int count) Returns a status stream of all public statuses. (package private) StatusStream getLinksStream(int count) Returns a status stream of all public statuses containing links. private RawStreamListener[] getRawStreamListeners()  (package private) StatusStream getRetweetStream() Returns a stream of all retweets. (package private) StatusStream getSampleStream() Returns a stream of random sample of all public statuses. (package private) StatusStream getSampleStream(java.lang.String language) Returns a stream of random sample of all public statuses. (package private) java.io.InputStream getSiteStream(boolean withFollowings, long[] follow)  private SiteStreamsListener[] getSiteStreamsListeners()  private StatusListener[] getStatusListeners()  (package private) UserStream getUserStream(java.lang.String[] track) User Streams provides real-time updates of all data needed to update a desktop application display. int hashCode()  void links(int count) Starts listening on all public statuses containing links. TwitterStream onException(Consumer<java.lang.Exception> action)  TwitterStream onStatus(Consumer<Status> action)  void removeListener(StreamListener listener)  void replaceListener(StreamListener toBeRemoved, StreamListener toBeAdded) replace existing listener void retweet() Starts listening on all retweets. void sample() Starts listening on random sample of all public statuses. void sample(java.lang.String language) Starts listening on random sample of all public statuses. void shutdown() Shuts down internal dispatcher thread shared by all TwitterStream instances. StreamController site(boolean withFollowings, long[] follow) Site Streams, a new feature on the Streaming API, is now available for beta testing. private void startHandler(TwitterStreamImpl.TwitterStreamConsumer handler)  java.lang.String toString()  private void updateListeners()  void user() User Streams provides real-time updates of all data needed to update a desktop application display. void user(java.lang.String[] track) User Streams provides real-time updates of all data needed to update a desktop application display. Methods inherited from class twitter4j.TwitterBaseImpl addRateLimitStatusListener, ensureAuthorizationEnabled, ensureOAuthEnabled, fillInIDAndScreenName, getAuthorization, getConfiguration, getId, getOAuth2Token, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getScreenName, httpResponseReceived, invalidateOAuth2Token, onRateLimitReached, onRateLimitStatus, setFactory, setOAuth2Token, setOAuthAccessToken, setOAuthConsumer Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Methods inherited from interface twitter4j.auth.OAuthSupport getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthAccessToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, getOAuthRequestToken, setOAuthAccessToken, setOAuthConsumer Methods inherited from interface twitter4j.TwitterBase addRateLimitStatusListener, getAuthorization, getConfiguration, getId, getScreenName, onRateLimitReached, onRateLimitStatus Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values http private final HttpClient http logger private static final Logger logger lifeCycleListeners private final java.util.List<ConnectionLifeCycleListener> lifeCycleListeners handler private TwitterStreamImpl.TwitterStreamConsumer handler stallWarningsGetParam private final java.lang.String stallWarningsGetParam stallWarningsParam private final HttpParameter stallWarningsParam dispatcher private static transient volatile Dispatcher dispatcher numberOfHandlers private static int numberOfHandlers streamListeners private final java.util.ArrayList<StreamListener> streamListeners TCP_ERROR_INITIAL_WAIT private static final int TCP_ERROR_INITIAL_WAIT See Also: Constant Field Values TCP_ERROR_WAIT_CAP private static final int TCP_ERROR_WAIT_CAP See Also: Constant Field Values HTTP_ERROR_INITIAL_WAIT private static final int HTTP_ERROR_INITIAL_WAIT See Also: Constant Field Values HTTP_ERROR_WAIT_CAP private static final int HTTP_ERROR_WAIT_CAP See Also: Constant Field Values NO_WAIT private static final int NO_WAIT See Also: Constant Field Values count private static int count Constructor Detail TwitterStreamImpl TwitterStreamImpl(Configuration conf, Authorization auth) Method Detail firehose public void firehose(int count) Description copied from interface: TwitterStream Starts listening on all public statuses. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the firehose. If your service warrants access to it, we'll contact you. Specified by: firehose in interface TwitterStream Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. See Also: StatusStream, Streaming API Methods statuses/firehose getFirehoseStream StatusStream getFirehoseStream(int count) throws TwitterException Returns a status stream of all public statuses. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the firehose. If your service warrants access to it, we'll contact you. Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. Returns: StatusStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.4 See Also: StatusStream, Streaming API Methods statuses/firehose links public void links(int count) Description copied from interface: TwitterStream Starts listening on all public statuses containing links. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the links stream. If your service warrants access to it, we'll contact you. Specified by: links in interface TwitterStream Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. See Also: StatusStream, Streaming API Methods statuses/links getLinksStream StatusStream getLinksStream(int count) throws TwitterException Returns a status stream of all public statuses containing links. Available only to approved parties and requires a signed agreement to access. Please do not contact us about access to the links stream. If your service warrants access to it, we'll contact you. Parameters: count - Indicates the number of previous statuses to stream before transitioning to the live stream. Returns: StatusStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: StatusStream, Streaming API Methods statuses/links getCountStream private StatusStream getCountStream(java.lang.String relativeUrl, int count) throws TwitterException Throws: TwitterException retweet public void retweet() Description copied from interface: TwitterStream Starts listening on all retweets. The retweet stream is not a generally available resource. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case. As of 9/11/2009, the site-wide retweet feature has not yet launched, so there are currently few, if any, retweets on this stream. Specified by: retweet in interface TwitterStream See Also: StatusStream, Streaming API Methods statuses/retweet getRetweetStream StatusStream getRetweetStream() throws TwitterException Returns a stream of all retweets. The retweet stream is not a generally available resource. Few applications require this level of access. Creative use of a combination of other resources and various access levels can satisfy nearly every application use case. As of 9/11/2009, the site-wide retweet feature has not yet launched, so there are currently few, if any, retweets on this stream. Returns: StatusStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: StatusStream, Streaming API: Methods statuses/retweet sample public void sample() Description copied from interface: TwitterStream Starts listening on random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample. Specified by: sample in interface TwitterStream See Also: StatusStream, Streaming API: Methods statuses/sample sample public void sample(java.lang.String language) Description copied from interface: TwitterStream Starts listening on random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample. Only samples Tweets written in the given language. Specified by: sample in interface TwitterStream Parameters: language - language to be sampled See Also: StatusStream, Streaming API: Methods statuses/sample getSampleStream StatusStream getSampleStream() throws TwitterException Returns a stream of random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample. Returns: StatusStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: StatusStream, Streaming API: Methods statuses/sample getSampleStream StatusStream getSampleStream(java.lang.String language) throws TwitterException Returns a stream of random sample of all public statuses. The default access level provides a small proportion of the Firehose. The "Gardenhose" access level provides a proportion more suitable for data mining and research applications that desire a larger proportion to be statistically significant sample. Only returns tweets in the given languages Returns: StatusStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.10 See Also: StatusStream, Streaming API: Methods statuses/sample user public void user() Description copied from interface: TwitterStream User Streams provides real-time updates of all data needed to update a desktop application display. Applications can request startup back-fill from the REST API and then transition to Streaming for nearly all subsequent reads. Rate limits and latency are practically eliminated. Desktop developers can stop managing rate limits and use this new data to create an entirely new user experience. On our end, we hope to reduce costs and increase site reliability. Specified by: user in interface TwitterStream See Also: User Streams user public void user(java.lang.String[] track) Description copied from interface: TwitterStream User Streams provides real-time updates of all data needed to update a desktop application display. Applications can request startup back-fill from the REST API and then transition to Streaming for nearly all subsequent reads. Rate limits and latency are practically eliminated. Desktop developers can stop managing rate limits and use this new data to create an entirely new user experience. On our end, we hope to reduce costs and increase site reliability. Specified by: user in interface TwitterStream Parameters: track - keywords to track See Also: User Streams getUserStream UserStream getUserStream(java.lang.String[] track) throws TwitterException User Streams provides real-time updates of all data needed to update a desktop application display. Applications can request startup back-fill from the REST API and then transition to Streaming for nearly all subsequent reads. Rate limits and latency are practically eliminated. Desktop developers can stop managing rate limits and use this new data to create an entirely new user experience. On our end, we hope to reduce costs and increase site reliability. Parameters: track - keywords to track Returns: UserStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: User Streams site public StreamController site(boolean withFollowings, long[] follow) Description copied from interface: TwitterStream Site Streams, a new feature on the Streaming API, is now available for beta testing. Site Streams allows services, such as web sites or mobile push services, to receive real-time updates for a large number of users without any of the hassles of managing REST API rate limits. The initial version delivers events created by, or directed to, users that have shared their OAuth token with your application. The following events are streamed immediately, and without rate limits: Home Timelines, Mentions Timelines, User Timelines, Direct Messages, Mentions, Follows, Favorites, Tweets, Retweets, Profile changes, and List changes. The following limitations must be respected during the beta period. These limitations may be changed with little advance notice. We intend to increase or remove these various limitations as we move from beta test into full production: Limit the follow count to 100 users per stream. Clients must occasionally compact users onto a smaller number of connections to minimize the total number of connections outstanding. Open no more than 25 new connections per second and exponentially back-off on errors. Specified by: site in interface TwitterStream Parameters: withFollowings - whether to receive status updates from people following follow - an array of users to include in the stream Returns: controller to control the site stream See Also: Site Streams | Twitter Developers getDispatcher private Dispatcher getDispatcher() getSiteStream java.io.InputStream getSiteStream(boolean withFollowings, long[] follow) throws TwitterException Throws: TwitterException filter public void filter(FilterQuery query) Description copied from interface: TwitterStream Start consuming public statuses that match one or more filter predicates. At least one predicate parameter, follow, locations, or track must be specified. Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API. Placing long parameters in the URL may cause the request to be rejected for excessive URL length. The default access level allows up to 200 track keywords, 400 follow userids and 10 1-degree location boxes. Increased access levels allow 80,000 follow userids ("shadow" role), 400,000 follow userids ("birddog" role), 10,000 track keywords ("restricted track" role), 200,000 track keywords ("partner track" role), and 200 10-degree location boxes ("locRestricted" role). Increased track access levels also pass a higher proportion of statuses before limiting the stream. Specified by: filter in interface TwitterStream Parameters: query - Filter query See Also: StatusStream, Streaming API Methods statuses/filter filter public void filter(java.lang.String... track) Description copied from interface: TwitterStream Start consuming public statuses that match the filter predicate. Placing long parameters in the URL may cause the request to be rejected for excessive URL length. The default access level allows up to 200 track keywords. Specified by: filter in interface TwitterStream Parameters: track - words to be filtered getFilterStream StatusStream getFilterStream(FilterQuery query) throws TwitterException Returns public statuses that match one or more filter predicates. At least one predicate parameter, follow, locations, or track must be specified. Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API. Placing long parameters in the URL may cause the request to be rejected for excessive URL length. The default access level allows up to 200 track keywords, 400 follow userids and 10 1-degree location boxes. Increased access levels allow 80,000 follow userids ("shadow" role), 400,000 follow userids ("birddog" role), 10,000 track keywords ("restricted track" role), 200,000 track keywords ("partner track" role), and 200 10-degree location boxes ("locRestricted" role). Increased track access levels also pass a higher proportion of statuses before limiting the stream. Parameters: query - Filter query Returns: StatusStream Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.2 See Also: StatusStream, Streaming API Methods | Twitter Developers ensureStatusStreamListenerIsSet private void ensureStatusStreamListenerIsSet() check if any listener is set. Throws IllegalStateException if no listener is set. Throws: java.lang.IllegalStateException - when no listener is set. ensureSiteStreamsListenerIsSet private void ensureSiteStreamsListenerIsSet() startHandler private void startHandler(TwitterStreamImpl.TwitterStreamConsumer handler) cleanUp public void cleanUp() Description copied from interface: TwitterStream shutdown internal stream consuming thread Specified by: cleanUp in interface TwitterStream shutdown public void shutdown() Description copied from interface: TwitterStream Shuts down internal dispatcher thread shared by all TwitterStream instances. Specified by: shutdown in interface TwitterStream addConnectionLifeCycleListener public void addConnectionLifeCycleListener(ConnectionLifeCycleListener listener) Description copied from interface: TwitterStream Adds a ConnectionLifeCycleListener Specified by: addConnectionLifeCycleListener in interface TwitterStream Parameters: listener - listener to be added addListener public void addListener(StreamListener listener) Specified by: addListener in interface TwitterStream Parameters: listener - listener to add onStatus public TwitterStream onStatus(Consumer<Status> action) Specified by: onStatus in interface TwitterStream Parameters: action - action when receiving Status Returns: this instance onException public TwitterStream onException(Consumer<java.lang.Exception> action) Specified by: onException in interface TwitterStream Parameters: action - action when receiving TwitterException Returns: this instance removeListener public void removeListener(StreamListener listener) Specified by: removeListener in interface TwitterStream Parameters: listener - listener to remove clearListeners public void clearListeners() Description copied from interface: TwitterStream clear status listeners Specified by: clearListeners in interface TwitterStream replaceListener public void replaceListener(StreamListener toBeRemoved, StreamListener toBeAdded) Description copied from interface: TwitterStream replace existing listener Specified by: replaceListener in interface TwitterStream Parameters: toBeRemoved - listener to be removed toBeAdded - listener to be added updateListeners private void updateListeners() getRawStreamListeners private RawStreamListener[] getRawStreamListeners() getSiteStreamsListeners private SiteStreamsListener[] getSiteStreamsListeners() getStatusListeners private StatusListener[] getStatusListeners() equals public boolean equals(java.lang.Object o) Overrides: equals in class TwitterBaseImpl hashCode public int hashCode() Overrides: hashCode in class TwitterBaseImpl toString public java.lang.String toString() Overrides: toString in class TwitterBaseImpl Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method TwitterUpload <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="TwitterUpload"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Class TwitterUpload java.lang.Object twitter4j.media.TwitterUpload All Implemented Interfaces: ImageUpload class TwitterUpload extends java.lang.Object implements ImageUpload Since: Twitter4J 2.2.5 Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private Twitter twitter  Constructor Summary Constructors  Constructor and Description TwitterUpload(Configuration conf, OAuthAuthorization oauth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  int hashCode()  java.lang.String toString()  java.lang.String upload(java.io.File image)  java.lang.String upload(java.io.File image, java.lang.String message)  java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody)  java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody, java.lang.String message)  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail twitter private final Twitter twitter Constructor Detail TwitterUpload public TwitterUpload(Configuration conf, OAuthAuthorization oauth) Method Detail upload public java.lang.String upload(java.io.File image, java.lang.String message) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException upload public java.lang.String upload(java.io.File image) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException upload public java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException upload public java.lang.String upload(java.lang.String imageFileName, java.io.InputStream imageBody, java.lang.String message) throws TwitterException Specified by: upload in interface ImageUpload Throws: TwitterException equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method URLEntity <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="URLEntity"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface URLEntity All Superinterfaces: java.io.Serializable, TweetEntity All Known Subinterfaces: ExtendedMediaEntity, MediaEntity public interface URLEntity extends TweetEntity, java.io.Serializable A data interface representing one single URL entity. Since: Twitter4J 2.1.9 Author: Mocel - mocel at guma.jp Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getDisplayURL() Returns the display URL if mentioned URL is shorten. int getEnd() Returns the index of the end character of the URL mentioned in the tweet. java.lang.String getExpandedURL() Returns the expanded URL if mentioned URL is shorten. int getStart() Returns the index of the start character of the URL mentioned in the tweet. java.lang.String getText() Returns the URL mentioned in the tweet. This method implementation is to meet TweetEntity interface and the behavior is equivalent to getURL() java.lang.String getURL() Returns the URL mentioned in the tweet. Method Detail getText java.lang.String getText() Returns the URL mentioned in the tweet. This method implementation is to meet TweetEntity interface and the behavior is equivalent to getURL() Specified by: getText in interface TweetEntity Returns: the mentioned URL getURL java.lang.String getURL() Returns the URL mentioned in the tweet. Returns: the mentioned URL getExpandedURL java.lang.String getExpandedURL() Returns the expanded URL if mentioned URL is shorten. Returns: the expanded URL if mentioned URL is shorten, or null if no shorten URL was mentioned. getDisplayURL java.lang.String getDisplayURL() Returns the display URL if mentioned URL is shorten. Returns: the display URL if mentioned URL is shorten, or null if no shorten URL was mentioned. getStart int getStart() Returns the index of the start character of the URL mentioned in the tweet. Specified by: getStart in interface TweetEntity Returns: the index of the start character of the URL mentioned in the tweet getEnd int getEnd() Returns the index of the end character of the URL mentioned in the tweet. Specified by: getEnd in interface TweetEntity Returns: the index of the end character of the URL mentioned in the tweet Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UploadedMedia <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UploadedMedia"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class UploadedMedia java.lang.Object twitter4j.UploadedMedia All Implemented Interfaces: java.io.Serializable public final class UploadedMedia extends java.lang.Object implements java.io.Serializable Represents result of "/1.1/media/upload.json" Since: Twitter4J 4.0.2 Author: Hiroaki TAKEUCHI - takke30 at gmail.com See Also: Serialized Form Field Summary Fields  Modifier and Type Field and Description private int imageHeight  private java.lang.String imageType  private int imageWidth  private long mediaId  private static long serialVersionUID  private long size  Constructor Summary Constructors  Constructor and Description UploadedMedia(JSONObject json)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description boolean equals(java.lang.Object o)  int getImageHeight()  java.lang.String getImageType()  int getImageWidth()  long getMediaId()  long getSize()  int hashCode()  private void init(JSONObject json)  java.lang.String toString()  Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Field Detail serialVersionUID private static final long serialVersionUID See Also: Constant Field Values imageWidth private int imageWidth imageHeight private int imageHeight imageType private java.lang.String imageType mediaId private long mediaId size private long size Constructor Detail UploadedMedia UploadedMedia(JSONObject json) throws TwitterException Throws: TwitterException Method Detail getImageWidth public int getImageWidth() getImageHeight public int getImageHeight() getImageType public java.lang.String getImageType() getMediaId public long getMediaId() getSize public long getSize() init private void init(JSONObject json) throws TwitterException Throws: TwitterException equals public boolean equals(java.lang.Object o) Overrides: equals in class java.lang.Object hashCode public int hashCode() Overrides: hashCode in class java.lang.Object toString public java.lang.String toString() Overrides: toString in class java.lang.Object Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method User <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="User"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6,"i35":6,"i36":6,"i37":6,"i38":6,"i39":6,"i40":6,"i41":6,"i42":6,"i43":6,"i44":6,"i45":6,"i46":6,"i47":6,"i48":6,"i49":6,"i50":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface User All Superinterfaces: java.lang.Comparable<User>, java.io.Serializable, TwitterResponse public interface User extends java.lang.Comparable<User>, TwitterResponse, java.io.Serializable A data interface representing Basic user information element Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.lang.String getBiggerProfileImageURL()  java.lang.String getBiggerProfileImageURLHttps()  java.util.Date getCreatedAt()  java.lang.String getDescription() Returns the description of the user URLEntity[] getDescriptionURLEntities() Returns URL entities for user description. int getFavouritesCount()  int getFollowersCount() Returns the number of followers int getFriendsCount() Returns the number of users the user follows (AKA "followings") long getId() Returns the id of the user java.lang.String getLang() Returns the preferred language of the user int getListedCount() Returns the number of public lists the user is listed on, or -1 if the count is unavailable. java.lang.String getLocation() Returns the location of the user java.lang.String getMiniProfileImageURL()  java.lang.String getMiniProfileImageURLHttps()  java.lang.String getName() Returns the name of the user java.lang.String getOriginalProfileImageURL()  java.lang.String getOriginalProfileImageURLHttps()  java.lang.String getProfileBackgroundColor()  java.lang.String getProfileBackgroundImageURL()  java.lang.String getProfileBackgroundImageUrlHttps()  java.lang.String getProfileBannerIPadRetinaURL()  java.lang.String getProfileBannerIPadURL()  java.lang.String getProfileBannerMobileRetinaURL()  java.lang.String getProfileBannerMobileURL()  java.lang.String getProfileBannerRetinaURL()  java.lang.String getProfileBannerURL()  java.lang.String getProfileImageURL() Returns the profile image url of the user java.lang.String getProfileImageURLHttps()  java.lang.String getProfileLinkColor()  java.lang.String getProfileSidebarBorderColor()  java.lang.String getProfileSidebarFillColor()  java.lang.String getProfileTextColor()  java.lang.String getScreenName() Returns the screen name of the user Status getStatus() Returns the current status of the user This can be null if the instance if from Status.getUser(). int getStatusesCount()  java.lang.String getTimeZone()  java.lang.String getURL() Returns the url of the user URLEntity getURLEntity() Returns URL entity for user's URL. int getUtcOffset()  java.lang.String[] getWithheldInCountries() Returns the list of country codes where the user is withheld boolean isContributorsEnabled() Tests if the user is enabling contributors boolean isDefaultProfile() Tests if the user has not altered the theme or background boolean isDefaultProfileImage() Tests if the user has not uploaded their own avatar boolean isFollowRequestSent() Returns true if the authenticating user has requested to follow this user, otherwise false. boolean isGeoEnabled()  boolean isProfileBackgroundTiled()  boolean isProfileUseBackgroundImage()  boolean isProtected() Test if the user status is protected boolean isShowAllInlineMedia()  boolean isTranslator()  boolean isVerified()  Methods inherited from interface java.lang.Comparable compareTo Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getId long getId() Returns the id of the user Returns: the id of the user getName java.lang.String getName() Returns the name of the user Returns: the name of the user getScreenName java.lang.String getScreenName() Returns the screen name of the user Returns: the screen name of the user getLocation java.lang.String getLocation() Returns the location of the user Returns: the location of the user getDescription java.lang.String getDescription() Returns the description of the user Returns: the description of the user isContributorsEnabled boolean isContributorsEnabled() Tests if the user is enabling contributors Returns: if the user is enabling contributors Since: Twitter4J 2.1.2 getProfileImageURL java.lang.String getProfileImageURL() Returns the profile image url of the user Returns: the profile image url of the user getBiggerProfileImageURL java.lang.String getBiggerProfileImageURL() getMiniProfileImageURL java.lang.String getMiniProfileImageURL() getOriginalProfileImageURL java.lang.String getOriginalProfileImageURL() getProfileImageURLHttps java.lang.String getProfileImageURLHttps() getBiggerProfileImageURLHttps java.lang.String getBiggerProfileImageURLHttps() getMiniProfileImageURLHttps java.lang.String getMiniProfileImageURLHttps() getOriginalProfileImageURLHttps java.lang.String getOriginalProfileImageURLHttps() isDefaultProfileImage boolean isDefaultProfileImage() Tests if the user has not uploaded their own avatar Returns: if the user has not uploaded their own avatar getURL java.lang.String getURL() Returns the url of the user Returns: the url of the user isProtected boolean isProtected() Test if the user status is protected Returns: true if the user status is protected getFollowersCount int getFollowersCount() Returns the number of followers Returns: the number of followers Since: Twitter4J 1.0.4 getStatus Status getStatus() Returns the current status of the user This can be null if the instance if from Status.getUser(). Returns: current status of the user Since: Twitter4J 2.1.1 getProfileBackgroundColor java.lang.String getProfileBackgroundColor() getProfileTextColor java.lang.String getProfileTextColor() getProfileLinkColor java.lang.String getProfileLinkColor() getProfileSidebarFillColor java.lang.String getProfileSidebarFillColor() getProfileSidebarBorderColor java.lang.String getProfileSidebarBorderColor() isProfileUseBackgroundImage boolean isProfileUseBackgroundImage() isDefaultProfile boolean isDefaultProfile() Tests if the user has not altered the theme or background Returns: if the user has not altered the theme or background isShowAllInlineMedia boolean isShowAllInlineMedia() getFriendsCount int getFriendsCount() Returns the number of users the user follows (AKA "followings") Returns: the number of users the user follows getCreatedAt java.util.Date getCreatedAt() getFavouritesCount int getFavouritesCount() getUtcOffset int getUtcOffset() getTimeZone java.lang.String getTimeZone() getProfileBackgroundImageURL java.lang.String getProfileBackgroundImageURL() getProfileBackgroundImageUrlHttps java.lang.String getProfileBackgroundImageUrlHttps() getProfileBannerURL java.lang.String getProfileBannerURL() Returns: profile banner URL Since: Twitter4J 3.0.0 getProfileBannerRetinaURL java.lang.String getProfileBannerRetinaURL() Returns: profile banner retina URL Since: Twitter4J 3.0.0 getProfileBannerIPadURL java.lang.String getProfileBannerIPadURL() Returns: profile banner iPad URL Since: Twitter4J 3.0.0 getProfileBannerIPadRetinaURL java.lang.String getProfileBannerIPadRetinaURL() Returns: profile banner iPad retina URL Since: Twitter4J 3.0.0 getProfileBannerMobileURL java.lang.String getProfileBannerMobileURL() Returns: profile banner mobile URL Since: Twitter4J 3.0.0 getProfileBannerMobileRetinaURL java.lang.String getProfileBannerMobileRetinaURL() Returns: profile banner mobile retina URL Since: Twitter4J 3.0.0 isProfileBackgroundTiled boolean isProfileBackgroundTiled() getLang java.lang.String getLang() Returns the preferred language of the user Returns: the preferred language of the user Since: Twitter4J 2.1.2 getStatusesCount int getStatusesCount() isGeoEnabled boolean isGeoEnabled() Returns: the user is enabling geo location Since: Twitter4J 2.0.10 isVerified boolean isVerified() Returns: returns true if the user is a verified celebrity Since: Twitter4J 2.0.10 isTranslator boolean isTranslator() Returns: returns true if the user is a translator Since: Twitter4J 2.1.9 getListedCount int getListedCount() Returns the number of public lists the user is listed on, or -1 if the count is unavailable. Returns: the number of public lists the user is listed on. Since: Twitter4J 2.1.4 isFollowRequestSent boolean isFollowRequestSent() Returns true if the authenticating user has requested to follow this user, otherwise false. Returns: true if the authenticating user has requested to follow this user. Since: Twitter4J 2.1.4 getDescriptionURLEntities URLEntity[] getDescriptionURLEntities() Returns URL entities for user description. Returns: URL entities for user description Since: Twitter4J 3.0.3 getURLEntity URLEntity getURLEntity() Returns URL entity for user's URL. Returns: URL entity for user's URL. Since: Twitter4J 3.0.3 getWithheldInCountries java.lang.String[] getWithheldInCountries() Returns the list of country codes where the user is withheld Returns: list of country codes where the tweet is withheld - null if not withheld Since: Twitter4j 4.0.3 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UserList <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UserList"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface UserList All Superinterfaces: java.lang.Comparable<UserList>, java.io.Serializable, TwitterResponse public interface UserList extends java.lang.Comparable<UserList>, TwitterResponse, java.io.Serializable A data interface representing Basic list information element Author: Dan Checkoway - dcheckoway at gmail.com Field Summary Fields inherited from interface twitter4j.TwitterResponse NONE, READ, READ_WRITE, READ_WRITE_DIRECTMESSAGES Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description java.util.Date getCreatedAt()  java.lang.String getDescription() Returns the description of the list java.lang.String getFullName() Returns the full name of the list long getId() Returns the id of the list int getMemberCount() Returns the member count of the list java.lang.String getName() Returns the name of the list java.lang.String getSlug() Returns the slug of the list int getSubscriberCount() Returns the subscriber count of the list java.net.URI getURI() Returns the uri of the list User getUser() Returns the user of the list boolean isFollowing() Returns if the authenticated user is following the list boolean isPublic() tests if the list is public Methods inherited from interface java.lang.Comparable compareTo Methods inherited from interface twitter4j.TwitterResponse getAccessLevel, getRateLimitStatus Method Detail getId long getId() Returns the id of the list Returns: the id of the list getName java.lang.String getName() Returns the name of the list Returns: the name of the list getFullName java.lang.String getFullName() Returns the full name of the list Returns: the full name of the list getSlug java.lang.String getSlug() Returns the slug of the list Returns: the slug of the list getDescription java.lang.String getDescription() Returns the description of the list Returns: the description of the list getSubscriberCount int getSubscriberCount() Returns the subscriber count of the list Returns: the subscriber count of the list getMemberCount int getMemberCount() Returns the member count of the list Returns: the member count of the list getURI java.net.URI getURI() Returns the uri of the list Returns: the uri of the list isPublic boolean isPublic() tests if the list is public Returns: if the list is public getUser User getUser() Returns the user of the list Returns: the user of the list isFollowing boolean isFollowing() Returns if the authenticated user is following the list Returns: if the authenticated user is following the list getCreatedAt java.util.Date getCreatedAt() Returns: the date created the list Since: Twitter4J 4.0.1 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UserMentionEntity <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UserMentionEntity"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface UserMentionEntity All Superinterfaces: java.io.Serializable, TweetEntity public interface UserMentionEntity extends TweetEntity, java.io.Serializable A data interface representing one single user mention entity. Since: Twitter4J 2.1.9 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description int getEnd() Returns the index of the end character of the user mention. long getId() Returns the user id mentioned in the status. java.lang.String getName() Returns the name mentioned in the status. java.lang.String getScreenName() Returns the screen name mentioned in the status. int getStart() Returns the index of the start character of the user mention. java.lang.String getText() Returns the screen name mentioned in the status. Method Detail getText java.lang.String getText() Returns the screen name mentioned in the status. This method implementation is to meet TweetEntity interface and the behavior is equivalent to getScreenName() Specified by: getText in interface TweetEntity Returns: the screen name mentioned in the status getName java.lang.String getName() Returns the name mentioned in the status. Returns: the name mentioned in the status getScreenName java.lang.String getScreenName() Returns the screen name mentioned in the status. Returns: the screen name mentioned in the status getId long getId() Returns the user id mentioned in the status. Returns: the user id mentioned in the status getStart int getStart() Returns the index of the start character of the user mention. Specified by: getStart in interface TweetEntity Returns: the index of the start character of the user mention getEnd int getEnd() Returns the index of the end character of the user mention. Specified by: getEnd in interface TweetEntity Returns: the index of the end character of the user mention Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UserStream <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UserStream"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface UserStream All Superinterfaces: StatusStream All Known Implementing Classes: UserStreamImpl interface UserStream extends StatusStream Since: Twitter4J 2.1.3 Author: Yusuke Yamamoto - yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void close()  void next(UserStreamListener listener) Reads next element from this stream. Methods inherited from interface twitter4j.StatusStream next Method Detail next void next(UserStreamListener listener) throws TwitterException Reads next element from this stream. Parameters: listener - a UserStreamListener implementation Throws: TwitterException - when the end of the stream has been reached. java.lang.IllegalStateException - when the end of the stream had been reached. close void close() throws java.io.IOException Specified by: close in interface StatusStream Throws: java.io.IOException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UserStreamAdapter <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UserStreamAdapter"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class UserStreamAdapter java.lang.Object twitter4j.StatusAdapter twitter4j.UserStreamAdapter All Implemented Interfaces: StatusListener, StreamListener, UserStreamListener public class UserStreamAdapter extends StatusAdapter implements UserStreamListener Since: Twitter4J 2.1.3 Author: yusuke at mac.com Constructor Summary Constructors  Constructor and Description UserStreamAdapter()  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void onBlock(User source, User blockedUser)  void onDeletionNotice(long directMessageId, long userId)  void onDirectMessage(DirectMessage directMessage)  void onException(java.lang.Exception ex)  void onFavorite(User source, User target, Status favoritedStatus)  void onFavoritedRetweet(User source, User target, Status favoritedStatus)  void onFollow(User source, User followedUser)  void onFriendList(long[] friendIds)  void onQuotedTweet(User source, User target, Status quotingTweet)  void onRetweetedRetweet(User source, User target, Status retweetedStatus)  void onUnblock(User source, User unblockedUser)  void onUnfavorite(User source, User target, Status unfavoritedStatus)  void onUnfollow(User source, User unfollowedUser)  void onUserDeletion(long deletedUser)  void onUserListCreation(User listOwner, UserList list)  void onUserListDeletion(User listOwner, UserList list)  void onUserListMemberAddition(User addedMember, User listOwner, UserList list)  void onUserListMemberDeletion(User deletedMember, User listOwner, UserList list)  void onUserListSubscription(User subscriber, User listOwner, UserList list)  void onUserListUnsubscription(User subscriber, User listOwner, UserList list)  void onUserListUpdate(User listOwner, UserList list)  void onUserProfileUpdate(User updatedUser)  void onUserSuspension(long suspendedUser)  Methods inherited from class twitter4j.StatusAdapter onDeletionNotice, onScrubGeo, onStallWarning, onStatus, onTrackLimitationNotice Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Methods inherited from interface twitter4j.StatusListener onDeletionNotice, onScrubGeo, onStallWarning, onStatus, onTrackLimitationNotice Constructor Detail UserStreamAdapter public UserStreamAdapter() Method Detail onDeletionNotice public void onDeletionNotice(long directMessageId, long userId) Specified by: onDeletionNotice in interface UserStreamListener onFriendList public void onFriendList(long[] friendIds) Specified by: onFriendList in interface UserStreamListener Parameters: friendIds - friend ids onFavorite public void onFavorite(User source, User target, Status favoritedStatus) Specified by: onFavorite in interface UserStreamListener Parameters: source - source user of the event target - target user of the event favoritedStatus - status favorited onFollow public void onFollow(User source, User followedUser) Specified by: onFollow in interface UserStreamListener Parameters: source - source user of the event followedUser - user followed onUnfollow public void onUnfollow(User source, User unfollowedUser) Specified by: onUnfollow in interface UserStreamListener Parameters: source - source user of the event unfollowedUser - user unfollowed onUnfavorite public void onUnfavorite(User source, User target, Status unfavoritedStatus) Specified by: onUnfavorite in interface UserStreamListener Parameters: source - source user of the event target - target user of the event unfavoritedStatus - status unfavorited onDirectMessage public void onDirectMessage(DirectMessage directMessage) Specified by: onDirectMessage in interface UserStreamListener Parameters: directMessage - direct message onUserListMemberAddition public void onUserListMemberAddition(User addedMember, User listOwner, UserList list) Specified by: onUserListMemberAddition in interface UserStreamListener Parameters: addedMember - member added listOwner - owner of the list list - the list onUserListMemberDeletion public void onUserListMemberDeletion(User deletedMember, User listOwner, UserList list) Specified by: onUserListMemberDeletion in interface UserStreamListener Parameters: deletedMember - user deleted listOwner - owner of the list list - the list onUserListSubscription public void onUserListSubscription(User subscriber, User listOwner, UserList list) Specified by: onUserListSubscription in interface UserStreamListener Parameters: subscriber - the user subscribed listOwner - owner of the list list - the list onUserListUnsubscription public void onUserListUnsubscription(User subscriber, User listOwner, UserList list) Specified by: onUserListUnsubscription in interface UserStreamListener Parameters: subscriber - the user subscribed listOwner - owner of the list list - the list onUserListCreation public void onUserListCreation(User listOwner, UserList list) Specified by: onUserListCreation in interface UserStreamListener Parameters: listOwner - owner of the list list - the list onUserListUpdate public void onUserListUpdate(User listOwner, UserList list) Specified by: onUserListUpdate in interface UserStreamListener Parameters: listOwner - owner of the list list - the list onUserListDeletion public void onUserListDeletion(User listOwner, UserList list) Specified by: onUserListDeletion in interface UserStreamListener Parameters: listOwner - owner of the list list - the list onUserProfileUpdate public void onUserProfileUpdate(User updatedUser) Specified by: onUserProfileUpdate in interface UserStreamListener Parameters: updatedUser - updated user onUserSuspension public void onUserSuspension(long suspendedUser) Specified by: onUserSuspension in interface UserStreamListener Parameters: suspendedUser - suspended user id onUserDeletion public void onUserDeletion(long deletedUser) Specified by: onUserDeletion in interface UserStreamListener Parameters: deletedUser - deleted user id onBlock public void onBlock(User source, User blockedUser) Specified by: onBlock in interface UserStreamListener Parameters: source - source user of the event blockedUser - the user blocked onUnblock public void onUnblock(User source, User unblockedUser) Specified by: onUnblock in interface UserStreamListener Parameters: source - source user of the event unblockedUser - the user unblocked onRetweetedRetweet public void onRetweetedRetweet(User source, User target, Status retweetedStatus) Specified by: onRetweetedRetweet in interface UserStreamListener Parameters: source - source user of the event target - target user of the event retweetedStatus - status retweeted retweet onFavoritedRetweet public void onFavoritedRetweet(User source, User target, Status favoritedStatus) Specified by: onFavoritedRetweet in interface UserStreamListener Parameters: source - source user of the event target - target user of the event favoritedStatus - status favorited retweet onQuotedTweet public void onQuotedTweet(User source, User target, Status quotingTweet) Specified by: onQuotedTweet in interface UserStreamListener Parameters: source - source user of the event target - target user of the event quotingTweet - status quoting the tweet onException public void onException(java.lang.Exception ex) Specified by: onException in interface StreamListener Overrides: onException in class StatusAdapter Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UserStreamImpl <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UserStreamImpl"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class UserStreamImpl java.lang.Object twitter4j.StatusStreamBase twitter4j.StatusStreamImpl twitter4j.UserStreamImpl All Implemented Interfaces: StatusStream, UserStream final class UserStreamImpl extends StatusStreamImpl implements UserStream Since: Twitter4J 2.1.8 Author: Yusuke Yamamoto - yusuke at mac.com Nested Class Summary Nested classes/interfaces inherited from class twitter4j.StatusStreamBase StatusStreamBase.StreamEvent Field Summary Fields inherited from class twitter4j.StatusStreamImpl EMPTY, line Fields inherited from class twitter4j.StatusStreamBase CONF, logger Constructor Summary Constructors  Constructor and Description UserStreamImpl(Dispatcher dispatcher, HttpResponse response, Configuration conf)  UserStreamImpl(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description void next(UserStreamListener listener) Reads next element from this stream. protected void onBlock(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onDirectMessage(JSONObject json, StreamListener[] listeners)  protected void onFavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onFavoritedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  protected void onFollow(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onFriends(JSONObject json, StreamListener[] listeners)  protected void onQuotedTweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  (package private) void onRetweetedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  protected void onScrubGeo(JSONObject json, StreamListener[] listeners)  protected void onSender(JSONObject json, StreamListener[] listeners)  protected void onUnblock(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onUnfavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners)  protected void onUnfollow(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onUserDeletion(long target, StreamListener[] listeners)  protected void onUserListCreation(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onUserListDestroyed(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onUserListMemberAddition(JSONObject addedMember, JSONObject owner, JSONObject target, StreamListener[] listeners)  protected void onUserListMemberDeletion(JSONObject deletedMember, JSONObject owner, JSONObject target, StreamListener[] listeners)  protected void onUserListSubscription(JSONObject source, JSONObject owner, JSONObject target, StreamListener[] listeners)  protected void onUserListUnsubscription(JSONObject source, JSONObject owner, JSONObject target, StreamListener[] listeners)  protected void onUserListUpdated(JSONObject source, JSONObject target, StreamListener[] listeners)  protected void onUserSuspension(long target, StreamListener[] listeners)  protected void onUserUpdate(JSONObject source, JSONObject target, StreamListener[] listeners)  Methods inherited from class twitter4j.StatusStreamImpl next, next, onClose, onDelete, onException, onLimit, onMessage, onStallWarning, onStatus, parseLine Methods inherited from class twitter4j.StatusStreamBase asDirectMessage, asFriendList, asStatus, asUser, asUserList, close, handleNextElement, onDisconnectionNotice, onException Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Methods inherited from interface twitter4j.UserStream close Methods inherited from interface twitter4j.StatusStream next Constructor Detail UserStreamImpl UserStreamImpl(Dispatcher dispatcher, java.io.InputStream stream, Configuration conf) throws java.io.IOException Throws: java.io.IOException UserStreamImpl UserStreamImpl(Dispatcher dispatcher, HttpResponse response, Configuration conf) throws java.io.IOException Throws: java.io.IOException Method Detail next public void next(UserStreamListener listener) throws TwitterException Description copied from interface: UserStream Reads next element from this stream. Specified by: next in interface UserStream Parameters: listener - a UserStreamListener implementation Throws: TwitterException - when the end of the stream has been reached. onSender protected void onSender(JSONObject json, StreamListener[] listeners) throws TwitterException Overrides: onSender in class StatusStreamBase Throws: TwitterException onDirectMessage protected void onDirectMessage(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onDirectMessage in class StatusStreamBase Throws: TwitterException JSONException onScrubGeo protected void onScrubGeo(JSONObject json, StreamListener[] listeners) throws TwitterException Overrides: onScrubGeo in class StatusStreamImpl Throws: TwitterException onFriends protected void onFriends(JSONObject json, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onFriends in class StatusStreamBase Throws: TwitterException JSONException onFavorite protected void onFavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onFavorite in class StatusStreamBase Throws: TwitterException onUnfavorite protected void onUnfavorite(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onUnfavorite in class StatusStreamBase Throws: TwitterException onFollow protected void onFollow(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onFollow in class StatusStreamBase Throws: TwitterException onUnfollow protected void onUnfollow(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onUnfollow in class StatusStreamBase Throws: TwitterException onUserListMemberAddition protected void onUserListMemberAddition(JSONObject addedMember, JSONObject owner, JSONObject target, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListMemberAddition in class StatusStreamBase Throws: TwitterException JSONException onUserListMemberDeletion protected void onUserListMemberDeletion(JSONObject deletedMember, JSONObject owner, JSONObject target, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListMemberDeletion in class StatusStreamBase Throws: TwitterException JSONException onUserListSubscription protected void onUserListSubscription(JSONObject source, JSONObject owner, JSONObject target, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListSubscription in class StatusStreamBase Throws: TwitterException JSONException onUserListUnsubscription protected void onUserListUnsubscription(JSONObject source, JSONObject owner, JSONObject target, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListUnsubscription in class StatusStreamBase Throws: TwitterException JSONException onUserListCreation protected void onUserListCreation(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListCreation in class StatusStreamBase Throws: TwitterException JSONException onUserListUpdated protected void onUserListUpdated(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException, JSONException Overrides: onUserListUpdated in class StatusStreamBase Throws: TwitterException JSONException onUserListDestroyed protected void onUserListDestroyed(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onUserListDestroyed in class StatusStreamBase Throws: TwitterException onUserUpdate protected void onUserUpdate(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onUserUpdate in class StatusStreamBase Throws: TwitterException onUserSuspension protected void onUserSuspension(long target, StreamListener[] listeners) throws TwitterException Overrides: onUserSuspension in class StatusStreamBase Throws: TwitterException onUserDeletion protected void onUserDeletion(long target, StreamListener[] listeners) throws TwitterException Overrides: onUserDeletion in class StatusStreamBase Throws: TwitterException onBlock protected void onBlock(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onBlock in class StatusStreamBase Throws: TwitterException onUnblock protected void onUnblock(JSONObject source, JSONObject target, StreamListener[] listeners) throws TwitterException Overrides: onUnblock in class StatusStreamBase Throws: TwitterException onRetweetedRetweet void onRetweetedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onRetweetedRetweet in class StatusStreamBase Throws: TwitterException onFavoritedRetweet void onFavoritedRetweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onFavoritedRetweet in class StatusStreamBase Throws: TwitterException onQuotedTweet protected void onQuotedTweet(JSONObject source, JSONObject target, JSONObject targetObject, StreamListener[] listeners) throws TwitterException Overrides: onQuotedTweet in class StatusStreamBase Throws: TwitterException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UserStreamListener <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UserStreamListener"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Interface UserStreamListener All Superinterfaces: StatusListener, StreamListener All Known Implementing Classes: UserStreamAdapter public interface UserStreamListener extends StatusListener Since: Twitter4J 2.1.3 Author: yusuke at mac.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void onBlock(User source, User blockedUser)  void onDeletionNotice(long directMessageId, long userId)  void onDirectMessage(DirectMessage directMessage)  void onFavorite(User source, User target, Status favoritedStatus)  void onFavoritedRetweet(User source, User target, Status favoritedRetweeet)  void onFollow(User source, User followedUser)  void onFriendList(long[] friendIds)  void onQuotedTweet(User source, User target, Status quotingTweet)  void onRetweetedRetweet(User source, User target, Status retweetedStatus)  void onUnblock(User source, User unblockedUser)  void onUnfavorite(User source, User target, Status unfavoritedStatus)  void onUnfollow(User source, User unfollowedUser)  void onUserDeletion(long deletedUser)  void onUserListCreation(User listOwner, UserList list)  void onUserListDeletion(User listOwner, UserList list)  void onUserListMemberAddition(User addedMember, User listOwner, UserList list)  void onUserListMemberDeletion(User deletedMember, User listOwner, UserList list)  void onUserListSubscription(User subscriber, User listOwner, UserList list)  void onUserListUnsubscription(User subscriber, User listOwner, UserList list)  void onUserListUpdate(User listOwner, UserList list)  void onUserProfileUpdate(User updatedUser)  void onUserSuspension(long suspendedUser)  Methods inherited from interface twitter4j.StatusListener onDeletionNotice, onScrubGeo, onStallWarning, onStatus, onTrackLimitationNotice Methods inherited from interface twitter4j.StreamListener onException Method Detail onDeletionNotice void onDeletionNotice(long directMessageId, long userId) onFriendList void onFriendList(long[] friendIds) Parameters: friendIds - friend ids Since: Twitter4J 2.1.3 onFavorite void onFavorite(User source, User target, Status favoritedStatus) Parameters: source - source user of the event target - target user of the event favoritedStatus - status favorited Since: Twitter4J 2.1.3 onUnfavorite void onUnfavorite(User source, User target, Status unfavoritedStatus) Parameters: source - source user of the event target - target user of the event unfavoritedStatus - status unfavorited Since: Twitter4J 2.1.3 onFollow void onFollow(User source, User followedUser) Parameters: source - source user of the event followedUser - user followed Since: Twitter4J 2.1.3 onUnfollow void onUnfollow(User source, User unfollowedUser) Parameters: source - source user of the event unfollowedUser - user unfollowed Since: Twitter4J 4.0.1 onDirectMessage void onDirectMessage(DirectMessage directMessage) Parameters: directMessage - direct message Since: Twitter4J 2.1.3 onUserListMemberAddition void onUserListMemberAddition(User addedMember, User listOwner, UserList list) Parameters: addedMember - member added listOwner - owner of the list list - the list Since: Twitter4J 2.1.11 onUserListMemberDeletion void onUserListMemberDeletion(User deletedMember, User listOwner, UserList list) Parameters: deletedMember - user deleted listOwner - owner of the list list - the list Since: Twitter4J 2.1.11 onUserListSubscription void onUserListSubscription(User subscriber, User listOwner, UserList list) Parameters: subscriber - the user subscribed listOwner - owner of the list list - the list Since: Twitter4J 2.1.3 onUserListUnsubscription void onUserListUnsubscription(User subscriber, User listOwner, UserList list) Parameters: subscriber - the user subscribed listOwner - owner of the list list - the list Since: Twitter4J 2.1.11 onUserListCreation void onUserListCreation(User listOwner, UserList list) Parameters: listOwner - owner of the list list - the list Since: Twitter4J 2.1.3 onUserListUpdate void onUserListUpdate(User listOwner, UserList list) Parameters: listOwner - owner of the list list - the list Since: Twitter4J 2.1.3 onUserListDeletion void onUserListDeletion(User listOwner, UserList list) Parameters: listOwner - owner of the list list - the list Since: Twitter4J 2.1.3 onUserProfileUpdate void onUserProfileUpdate(User updatedUser) Parameters: updatedUser - updated user Since: Twitter4J 2.1.9 onUserSuspension void onUserSuspension(long suspendedUser) Parameters: suspendedUser - suspended user id Since: Twitter4J 4.0.3 onUserDeletion void onUserDeletion(long deletedUser) Parameters: deletedUser - deleted user id Since: Twitter4J 4.0.3 onBlock void onBlock(User source, User blockedUser) Parameters: source - source user of the event blockedUser - the user blocked Since: Twitter4J 2.1.3 onUnblock void onUnblock(User source, User unblockedUser) Parameters: source - source user of the event unblockedUser - the user unblocked Since: Twitter4J 2.1.3 onRetweetedRetweet void onRetweetedRetweet(User source, User target, Status retweetedStatus) Parameters: source - source user of the event target - target user of the event retweetedStatus - status retweeted retweet Since: Twitter4J 4.0.4 onFavoritedRetweet void onFavoritedRetweet(User source, User target, Status favoritedRetweeet) Parameters: source - source user of the event target - target user of the event favoritedRetweeet - status favorited retweet Since: Twitter4J 4.0.4 onQuotedTweet void onQuotedTweet(User source, User target, Status quotingTweet) Parameters: source - source user of the event target - target user of the event quotingTweet - status quoting the tweet Since: Twitter4J 4.0.4 Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UsersResources <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UsersResources"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface UsersResources All Known Subinterfaces: Twitter All Known Implementing Classes: TwitterImpl public interface UsersResources Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description User createBlock(long userId) Blocks the user specified in the ID parameter as the authenticating user. User createBlock(java.lang.String screenName) Blocks the user specified in the ID parameter as the authenticating user. User createMute(long userId) Mutes the user specified in the ID parameter as the authenticating user. User createMute(java.lang.String screenName) Mutes the user specified in the screen name parameter as the authenticating user. User destroyBlock(long userId) Un-blocks the user specified in the ID parameter as the authenticating user. User destroyBlock(java.lang.String screen_name) Un-blocks the user specified in the ID parameter as the authenticating user. User destroyMute(long userId) Un-mutes the user specified in the ID parameter as the authenticating user. User destroyMute(java.lang.String screenName) Un-mutes the user specified in the screen name parameter as the authenticating user. AccountSettings getAccountSettings() Returns the current trend, geo, language, timezone and sleep time information for the authenticating user. IDs getBlocksIDs() Returns an array of numeric user ids the authenticating user is blocking. IDs getBlocksIDs(long cursor) Returns an array of numeric user ids the authenticating user is blocking. PagableResponseList<User> getBlocksList() Returns a list of user objects that the authenticating user is blocking. PagableResponseList<User> getBlocksList(long cursor) Returns a list of user objects that the authenticating user is blocking. ResponseList<User> getContributees(long userId) Returns an array of users that the specified user can contribute to. ResponseList<User> getContributees(java.lang.String screenName) Returns an array of users that the specified user can contribute to. ResponseList<User> getContributors(long userId) Returns an array of users who can contribute to the specified account. ResponseList<User> getContributors(java.lang.String screenName) Returns an array of users who can contribute to the specified account. IDs getMutesIDs(long cursor) Returns an array of numeric user ids the authenticating user is muting. PagableResponseList<User> getMutesList(long cursor) Returns a list of user objects that the authenticating user is muting. ResponseList<User> lookupUsers(long... ids) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. ResponseList<User> lookupUsers(java.lang.String... screenNames) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. void removeProfileBanner() Removes the uploaded profile banner for the authenticating user. ResponseList<User> searchUsers(java.lang.String query, int page) Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. User showUser(long userId) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. User showUser(java.lang.String screenName) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. AccountSettings updateAccountSettings(java.lang.Integer trendLocationWoeid, java.lang.Boolean sleepTimeEnabled, java.lang.String startSleepTime, java.lang.String endSleepTime, java.lang.String timeZone, java.lang.String lang) Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. User updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) Sets values that users are able to set under the "Account" tab of their settings page. User updateProfileBackgroundImage(java.io.File image, boolean tile) Updates the authenticating user's profile background image. User updateProfileBackgroundImage(java.io.InputStream image, boolean tile) Updates the authenticating user's profile background image. void updateProfileBanner(java.io.File image) Uploads a profile banner on behalf of the authenticating user. void updateProfileBanner(java.io.InputStream image) Uploads a profile banner on behalf of the authenticating user. User updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. User updateProfileImage(java.io.File image) Updates the authenticating user's profile image. User updateProfileImage(java.io.InputStream image) Updates the authenticating user's profile image. User verifyCredentials() Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Method Detail getAccountSettings AccountSettings getAccountSettings() throws TwitterException Returns the current trend, geo, language, timezone and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Returns: the current trend, geo and sleep time information for the authenticating user. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.9 See Also: GET account/settings | Twitter Developers verifyCredentials User verifyCredentials() throws TwitterException Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. This method calls https://api.twitter.com/1.1/account/verify_credentials.json Returns: user Throws: TwitterException - when Twitter service or network is unavailable, or if supplied credential is wrong (TwitterException.getStatusCode() == 401) Since: Twitter4J 2.0.0 See Also: GET account/verify_credentials | Twitter Developers updateAccountSettings AccountSettings updateAccountSettings(java.lang.Integer trendLocationWoeid, java.lang.Boolean sleepTimeEnabled, java.lang.String startSleepTime, java.lang.String endSleepTime, java.lang.String timeZone, java.lang.String lang) throws TwitterException Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Parameters: trendLocationWoeid - Optional. The Yahoo! Where On Earth ID to use as the user's default trend location. sleepTimeEnabled - Optional. Whether sleep time is enabled for the user startSleepTime - Optional. The hour that sleep time should begin if it is enabled. endSleepTime - Optional. The hour that sleep time should end if it is enabled. timeZone - Optional. The timezone dates and times should be displayed in for the user. lang - Optional. The language which Twitter should render in for this user. (two letter ISO 639-1) Returns: the current trend, geo and sleep time information for the authenticating user. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.2.4 See Also: POST account/settings | Twitter Developers updateProfile User updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) throws TwitterException Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated. This method calls https://api.twitter.com/1.1/account/update_profile.json Parameters: name - Optional. Maximum of 20 characters. url - Optional. Maximum of 100 characters. Will be prepended with "http://" if not present. location - Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way. description - Optional. Maximum of 160 characters. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.8 See Also: POST account/update_profile | Twitter Developers updateProfileBackgroundImage User updateProfileBackgroundImage(java.io.File image, boolean tile) throws TwitterException Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forceably scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) Since: Twitter4J 2.1.0 See Also: POST account/update_profile_background_image | Twitter Developers updateProfileBackgroundImage User updateProfileBackgroundImage(java.io.InputStream image, boolean tile) throws TwitterException Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forceably scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) Since: Twitter4J 2.1.11 See Also: POST account/update_profile_background_image | Twitter Developers updateProfileColors User updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) throws TwitterException Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexidecimal value, and may be either three or six characters (ex: #fff or #ffffff). This method calls https://api.twitter.com/1.1/account/update_profile_colors.json Parameters: profileBackgroundColor - optional, can be null profileTextColor - optional, can be null profileLinkColor - optional, can be null profileSidebarFillColor - optional, can be null profileSidebarBorderColor - optional, can be null Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.0 See Also: POST account/update_profile_colors | Twitter Developers updateProfileImage User updateProfileImage(java.io.File image) throws TwitterException Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) Since: Twitter4J 2.1.0 See Also: POST account/update_profile_image | Twitter Developers updateProfileImage User updateProfileImage(java.io.InputStream image) throws TwitterException Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Returns: the updated user Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) Since: Twitter4J 2.1.11 See Also: POST account/update_profile_image | Twitter Developers getBlocksList PagableResponseList<User> getBlocksList() throws TwitterException Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.json Returns: a list of user objects that the authenticating user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.4 See Also: GET blocks/blocking | Twitter Developers getBlocksList PagableResponseList<User> getBlocksList(long cursor) throws TwitterException Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.json Parameters: cursor - Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Returns: a list of user objects that the authenticating user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.4 See Also: GET blocks/blocking | Twitter Developers getBlocksIDs IDs getBlocksIDs() throws TwitterException Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/ids Returns: Returns an array of numeric user ids the authenticating user is blocking. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.4 See Also: GET blocks/ids | Twitter Developers getBlocksIDs IDs getBlocksIDs(long cursor) throws TwitterException Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/ids Parameters: cursor - cursor Returns: Returns an array of numeric user ids the authenticating user is blocking. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.2 See Also: GET blocks/ids | Twitter Developers createBlock User createBlock(long userId) throws TwitterException Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create/[id].json Parameters: userId - the ID of the user to block Returns: the blocked user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: POST blocks/create | Twitter Developers createBlock User createBlock(java.lang.String screenName) throws TwitterException Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create/[id].json Parameters: screenName - the screen_name of the user to block Returns: the blocked user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: POST blocks/create | Twitter Developers destroyBlock User destroyBlock(long userId) throws TwitterException Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/destroy/[id].json Parameters: userId - the ID of the user to block Returns: the unblocked user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: POST blocks/destroy | Twitter Developers destroyBlock User destroyBlock(java.lang.String screen_name) throws TwitterException Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/destroy/[id].json Parameters: screen_name - the screen_name of the user to block Returns: the unblocked user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.0.1 See Also: POST blocks/destroy | Twitter Developers getMutesList PagableResponseList<User> getMutesList(long cursor) throws TwitterException Returns a list of user objects that the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/list Parameters: cursor - Causes the list of muted users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Returns: a list of user objects that the authenticating user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET blocks/blocking | Twitter Developers getMutesIDs IDs getMutesIDs(long cursor) throws TwitterException Returns an array of numeric user ids the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/ids Parameters: cursor - Causes the list of muted users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Returns: Returns an array of numeric user ids the authenticating user is muting. Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: GET blocks/ids | Twitter Developers createMute User createMute(long userId) throws TwitterException Mutes the user specified in the ID parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Parameters: userId - the user_id of the user to mute Returns: the muted user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: POST mutes/users/create | Twitter Developers createMute User createMute(java.lang.String screenName) throws TwitterException Mutes the user specified in the screen name parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Parameters: screenName - the screen_name of the user to mute Returns: the muted user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: POST mutes/users/create | Twitter Developers destroyMute User destroyMute(long userId) throws TwitterException Un-mutes the user specified in the ID parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Parameters: userId - the ID of the user to mute Returns: the unmuted user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: POST mutes/users/destroy | Twitter Developers destroyMute User destroyMute(java.lang.String screenName) throws TwitterException Un-mutes the user specified in the screen name parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Parameters: screenName - the screen_name of the user to mute Returns: the unmuted user Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 4.0.2 See Also: POST mutes/users/destroy | Twitter Developers lookupUsers ResponseList<User> lookupUsers(long... ids) throws TwitterException Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Parameters: ids - Specifies the screen names of the users to return. Returns: users Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: GET users/lookup | Twitter Developers lookupUsers ResponseList<User> lookupUsers(java.lang.String... screenNames) throws TwitterException Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Parameters: screenNames - Specifies the screen names of the users to return. Returns: users Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.1 See Also: GET users/lookup | Twitter Developers showUser User showUser(long userId) throws TwitterException Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Parameters: userId - the ID of the user for whom to request the detail Returns: users Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 2.1.0 See Also: GET users/show | Twitter Developers showUser User showUser(java.lang.String screenName) throws TwitterException Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Parameters: screenName - the screen name of the user for whom to request the detail Returns: User Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/show | Twitter Developers searchUsers ResponseList<User> searchUsers(java.lang.String query, int page) throws TwitterException Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. This method calls https://api.twitter.com/1.1/users/search.json Parameters: query - The query to run against people search. page - Specifies the page of results to retrieve. Number of statuses per page is fixed to 20. Returns: the list of Users matches the provided Throws: TwitterException - when Twitter service or network is unavailable See Also: GET users/search | Twitter Developers getContributees ResponseList<User> getContributees(long userId) throws TwitterException Returns an array of users that the specified user can contribute to. Parameters: userId - The user id of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers getContributees ResponseList<User> getContributees(java.lang.String screenName) throws TwitterException Returns an array of users that the specified user can contribute to. Parameters: screenName - The screen name of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers getContributors ResponseList<User> getContributors(long userId) throws TwitterException Returns an array of users who can contribute to the specified account. Parameters: userId - The user id of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers getContributors ResponseList<User> getContributors(java.lang.String screenName) throws TwitterException Returns an array of users who can contribute to the specified account. Parameters: screenName - The screen name of the user for whom to return results for Returns: list of contributors Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers removeProfileBanner void removeProfileBanner() throws TwitterException Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success. This method calls https://api.twitter.com/1.1/account/remove_profile_banner.json Throws: TwitterException - when Twitter service or network is unavailable Since: Twitter4J 3.0.0 See Also: POST account/remove_profile_banner | Twitter Developers updateProfileBanner void updateProfileBanner(java.io.File image) throws TwitterException Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) Since: Twitter4J 3.0.0 See Also: POST account/update_profile_banner | Twitter Developers updateProfileBanner void updateProfileBanner(java.io.InputStream image) throws TwitterException Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. Throws: TwitterException - when Twitter service or network is unavailable, or when the specified file is not found (FileNotFoundException will be nested), or when the specified file object in not representing a file (IOException will be nested) Since: Twitter4J 3.0.0 See Also: POST account/update_profile_banner | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method UsersResourcesAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="UsersResourcesAsync"; } } catch(err) { } //--> var methods = {"i0":6,"i1":6,"i2":6,"i3":6,"i4":6,"i5":6,"i6":6,"i7":6,"i8":6,"i9":6,"i10":6,"i11":6,"i12":6,"i13":6,"i14":6,"i15":6,"i16":6,"i17":6,"i18":6,"i19":6,"i20":6,"i21":6,"i22":6,"i23":6,"i24":6,"i25":6,"i26":6,"i27":6,"i28":6,"i29":6,"i30":6,"i31":6,"i32":6,"i33":6,"i34":6}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],4:["t3","Abstract Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.api Interface UsersResourcesAsync All Known Subinterfaces: AsyncTwitter All Known Implementing Classes: AsyncTwitterImpl public interface UsersResourcesAsync Author: Joern Huxhorn - jhuxhorn at googlemail.com Method Summary All Methods Instance Methods Abstract Methods  Modifier and Type Method and Description void createBlock(long userId) Blocks the user specified in the ID parameter as the authenticating user. void createBlock(java.lang.String screenName) Blocks the user specified in the ID parameter as the authenticating user. void createMute(long userId) Mutes the user specified in the ID parameter as the authenticating user. void createMute(java.lang.String screenName) Mutes the user specified in the screen name parameter as the authenticating user. void destroyBlock(long userId) Un-blocks the user specified in the ID parameter as the authenticating user. void destroyBlock(java.lang.String screenName) Un-blocks the user specified in the ID parameter as the authenticating user. void destroyMute(long userId) Un-mutes the user specified in the ID parameter as the authenticating user. void destroyMute(java.lang.String screenName) Un-mutes the user specified in the screen name parameter as the authenticating user. void getAccountSettings() Returns the current trend, geo and sleep time information for the authenticating user. void getBlocksIDs() Returns an array of numeric user ids the authenticating user is blocking. void getBlocksIDs(long cursor) Returns an array of numeric user ids the authenticating user is blocking. void getBlocksList() Returns a list of user objects that the authenticating user is blocking. void getBlocksList(long cursor) Returns a list of user objects that the authenticating user is blocking. void getContributees(long userId) Returns an array of users that the specified user can contribute to. void getContributees(java.lang.String screenName) Returns an array of users that the specified user can contribute to. void getContributors(long userId) Returns an array of users who can contribute to the specified account. void getContributors(java.lang.String screenName) Returns an array of users who can contribute to the specified account. void getMutesIDs(long cursor) Returns an array of numeric user ids the authenticating user is muting. void getMutesList(long cursor) Returns a list of user objects that the authenticating user is muting. void lookupUsers(long... ids) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. void lookupUsers(java.lang.String... screenNames) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. void removeProfileBanner() Removes the uploaded profile banner for the authenticating user. void searchUsers(java.lang.String query, int page) Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. void showUser(long userId) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. void showUser(java.lang.String screenName) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. void updateAccountSettings(java.lang.Integer trendLocationWoeid, java.lang.Boolean sleepTimeEnabled, java.lang.String startSleepTime, java.lang.String endSleepTime, java.lang.String timeZone, java.lang.String lang) Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. void updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) Sets values that users are able to set under the "Account" tab of their settings page. void updateProfileBackgroundImage(java.io.File image, boolean tile) Updates the authenticating user's profile background image. void updateProfileBackgroundImage(java.io.InputStream image, boolean tile) Updates the authenticating user's profile background image. void updateProfileBanner(java.io.File image) Uploads a profile banner on behalf of the authenticating user. void updateProfileBanner(java.io.InputStream image) Uploads a profile banner on behalf of the authenticating user. void updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. void updateProfileImage(java.io.File image) Updates the authenticating user's profile image. void updateProfileImage(java.io.InputStream image) Updates the authenticating user's profile image. void verifyCredentials() Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Method Detail getAccountSettings void getAccountSettings() Returns the current trend, geo and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Since: Twitter4J 2.1.9 See Also: GET account/settings | Twitter Developers verifyCredentials void verifyCredentials() Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid. This method calls https://api.twitter.com/1.1/account/verify_credentials.json Since: Twitter4J 2.1.3 See Also: GET account/verify_credentials | Twitter Developers updateAccountSettings void updateAccountSettings(java.lang.Integer trendLocationWoeid, java.lang.Boolean sleepTimeEnabled, java.lang.String startSleepTime, java.lang.String endSleepTime, java.lang.String timeZone, java.lang.String lang) Updates the current trend, geo, language, timezone and sleep time information for the authenticating user. This method has not been finalized and the interface is subject to change in incompatible ways. This method calls https://api.twitter.com/1.1/account/settings.json Parameters: trendLocationWoeid - Optional. The Yahoo! Where On Earth ID to use as the user's default trend location. sleepTimeEnabled - Optional. Whether sleep time is enabled for the user startSleepTime - Optional. The hour that sleep time should begin if it is enabled. endSleepTime - Optional. The hour that sleep time should end if it is enabled. timeZone - Optional. The timezone dates and times should be displayed in for the user. lang - Optional. The language which Twitter should render in for this user. (two letter ISO 639-1) Since: Twitter4J 2.2.4 See Also: POST account/settings | Twitter Developers updateProfile void updateProfile(java.lang.String name, java.lang.String url, java.lang.String location, java.lang.String description) Sets values that users are able to set under the "Account" tab of their settings page. Only the parameters specified(non-null) will be updated. Parameters: name - Optional. Maximum of 20 characters. url - Optional. Maximum of 100 characters. Will be prepended with "http://" if not present. location - Optional. Maximum of 30 characters. The contents are not normalized or geocoded in any way. description - Optional. Maximum of 160 characters. Since: Twitter4J 2.1.8 See Also: POST account/update_profile | Twitter Developers updateProfileBackgroundImage void updateProfileBackgroundImage(java.io.File image, boolean tile) Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. Since: Twitter4J 2.1.0 See Also: POST account/update_profile_background_image | Twitter Developers updateProfileBackgroundImage void updateProfileBackgroundImage(java.io.InputStream image, boolean tile) Updates the authenticating user's profile background image. This method calls https://api.twitter.com/1.1/account/update_profile_background_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. tile - If set to true the background image will be displayed tiled. The image will not be tiled otherwise. Since: Twitter4J 2.1.11 See Also: POST account/update_profile_background_image | Twitter Developers updateProfileColors void updateProfileColors(java.lang.String profileBackgroundColor, java.lang.String profileTextColor, java.lang.String profileLinkColor, java.lang.String profileSidebarFillColor, java.lang.String profileSidebarBorderColor) Sets one or more hex values that control the color scheme of the authenticating user's profile page on twitter.com. Each parameter's value must be a valid hexadecimal value, and may be either three or six characters (ex: #fff or #ffffff). This method calls https://api.twitter.com/1.1/account/update_profile_colors Parameters: profileBackgroundColor - optional, can be null profileTextColor - optional, can be null profileLinkColor - optional, can be null profileSidebarFillColor - optional, can be null profileSidebarBorderColor - optional, can be null Since: Twitter4J 2.0.0 See Also: POST account/update_profile_colors | Twitter Developers updateProfileImage void updateProfileImage(java.io.File image) Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Since: Twitter4J 2.1.0 See Also: POST account/update_profile_image | Twitter Developers updateProfileImage void updateProfileImage(java.io.InputStream image) Updates the authenticating user's profile image. This method calls https://api.twitter.com/1.1/account/update_profile_image.json Parameters: image - Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Since: Twitter4J 2.1.11 See Also: POST account/update_profile_image | Twitter Developers getBlocksList void getBlocksList() Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.xml Since: Twitter4J 2.0.4 See Also: GET blocks/blocking | Twitter Developers getBlocksList void getBlocksList(long cursor) Returns a list of user objects that the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking.xml Parameters: cursor - Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Since: Twitter4J 2.0.4 See Also: GET blocks/blocking | Twitter Developers getBlocksIDs void getBlocksIDs() Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking/ids Since: Twitter4J 2.0.4 See Also: GET blocks/ids | Twitter Developers getBlocksIDs void getBlocksIDs(long cursor) Returns an array of numeric user ids the authenticating user is blocking. This method calls https://api.twitter.com/1.1/blocks/blocking/ids Parameters: cursor - cursor Since: Twitter4J 3.0.2 See Also: GET blocks/ids | Twitter Developers createBlock void createBlock(long userId) Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Parameters: userId - the screen_name of the user to block Since: Twitter4J 2.1.0 See Also: POST blocks/create | Twitter Developers createBlock void createBlock(java.lang.String screenName) Blocks the user specified in the ID parameter as the authenticating user. Returns the blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Parameters: screenName - the screen_name of the user to block Since: Twitter4J 2.0.1 See Also: POST blocks/create | Twitter Developers destroyBlock void destroyBlock(long userId) Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Parameters: userId - the ID of the user to block Since: Twitter4J 2.1.0 See Also: POST blocks/destroy | Twitter Developers destroyBlock void destroyBlock(java.lang.String screenName) Un-blocks the user specified in the ID parameter as the authenticating user. Returns the un-blocked user in the requested format when successful. This method calls https://api.twitter.com/1.1/blocks/create%C2%A0 Parameters: screenName - the screen_name of the user to block Since: Twitter4J 2.0.1 See Also: POST blocks/destroy | Twitter Developers getMutesList void getMutesList(long cursor) Returns a list of user objects that the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/list Parameters: cursor - Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Since: Twitter4J 4.0.2 See Also: GET mutes/users/list | Twitter Developers getMutesIDs void getMutesIDs(long cursor) Returns an array of numeric user ids the authenticating user is muting. This method calls https://api.twitter.com/1.1/mutes/users/ids Parameters: cursor - Causes the list of muted users to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." Since: Twitter4J 4.0.2 See Also: GET mutes/users/ids | Twitter Developers createMute void createMute(long userId) Mutes the user specified in the ID parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Parameters: userId - the ID of the user to mute Since: Twitter4J 4.0.2 See Also: POST mutes/users/create | Twitter Developers createMute void createMute(java.lang.String screenName) Mutes the user specified in the screen name parameter as the authenticating user. Returns the muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/create Parameters: screenName - the screen_name of the user to mute Since: Twitter4J 4.0.2 See Also: POST mutes/users/create | Twitter Developers destroyMute void destroyMute(long userId) Un-mutes the user specified in the ID parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Parameters: userId - the ID of the user to mute Since: Twitter4J 4.0.2 See Also: POST mutes/users/destroy | Twitter Developers destroyMute void destroyMute(java.lang.String screenName) Un-mutes the user specified in the screen name parameter as the authenticating user. Returns the un-muted user in the requested format when successful. This method calls https://api.twitter.com/1.1/mutes/users/destroy Parameters: screenName - the screen_name of the user to mute Since: Twitter4J 4.0.2 See Also: POST mutes/users/destroy | Twitter Developers lookupUsers void lookupUsers(long... ids) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Parameters: ids - Specifies the screen names of the users to retrieve. Since: Twitter4J 2.1.1 See Also: GET users/lookup | Twitter Developers lookupUsers void lookupUsers(java.lang.String... screenNames) Return up to 100 users worth of extended information, specified by either ID, screen name, or combination of the two. The author's most recent status (if the authenticating user has permission) will be returned inline. This method calls https://api.twitter.com/1.1/users/lookup.json Parameters: screenNames - Specifies the screen names of the users to retrieve. Since: Twitter4J 2.1.1 See Also: GET users/lookup | Twitter Developers showUser void showUser(long userId) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Parameters: userId - the ID of the user for whom to request the retrieve See Also: GET users/show | Twitter Developers showUser void showUser(java.lang.String screenName) Returns extended information of a given user, specified by ID or screen name as per the required id parameter. The author's most recent status will be returned inline. This method calls https://api.twitter.com/1.1/users/show.json Parameters: screenName - the screen name of the user for whom to request the detail See Also: GET users/show | Twitter Developers searchUsers void searchUsers(java.lang.String query, int page) Run a search for users similar to the Find People button on Twitter.com; the same results returned by people search on Twitter.com will be returned by using this API. Usage note: It is only possible to retrieve the first 1000 matches from this API. This method calls https://api.twitter.com/1.1/users/search.json Parameters: query - The query to run against people search. page - Specifies the page of results to retrieve. Number of statuses per page is fixed to 20. See Also: GET users/search | Twitter Developers getContributees void getContributees(long userId) Returns an array of users that the specified user can contribute to. Parameters: userId - The user id of the user for whom to return results for Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers getContributees void getContributees(java.lang.String screenName) Returns an array of users that the specified user can contribute to. Parameters: screenName - The screen name of the user for whom to return results for Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers getContributors void getContributors(long userId) Returns an array of users who can contribute to the specified account. Parameters: userId - The user id of the user for whom to return results for Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers getContributors void getContributors(java.lang.String screenName) Returns an array of users who can contribute to the specified account. Parameters: screenName - The screen name of the user for whom to return results for Since: Twitter4J 3.0.0 See Also: GET users/contributors | Twitter Developers removeProfileBanner void removeProfileBanner() Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success. This method calls https://api.twitter.com/1.1/account/remove_profile_banner.json Since: Twitter4J 3.0.0 See Also: POST account/remove_profile_banner | Twitter Developers updateProfileBanner void updateProfileBanner(java.io.File image) Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. Since: Twitter4J 3.0.0 See Also: POST account/update_profile_banner | Twitter Developers updateProfileBanner void updateProfileBanner(java.io.InputStream image) Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners. Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload. This method calls https://api.twitter.com/1.1/account/update_profile_banner.json Parameters: image - For best results, upload an <5MB image that is exactly 1252px by 626px. Since: Twitter4J 3.0.0 See Also: POST account/update_profile_banner | Twitter Developers Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method Version <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="Version"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class Version java.lang.Object twitter4j.Version public final class Version extends java.lang.Object Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private static java.lang.String TITLE  private static java.lang.String VERSION  Constructor Summary Constructors  Modifier Constructor and Description private Version()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static java.lang.String getVersion()  static void main(java.lang.String[] args) prints the version string Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail VERSION private static final java.lang.String VERSION See Also: Constant Field Values TITLE private static final java.lang.String TITLE See Also: Constant Field Values Constructor Detail Version private Version() Method Detail getVersion public static java.lang.String getVersion() main public static void main(java.lang.String[] args) prints the version string Parameters: args - will be just ignored. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method VersionAsync <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="VersionAsync"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class VersionAsync java.lang.Object twitter4j.VersionAsync public final class VersionAsync extends java.lang.Object Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private static java.lang.String TITLE  private static java.lang.String VERSION  Constructor Summary Constructors  Modifier Constructor and Description private VersionAsync()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static java.lang.String getVersion()  static void main(java.lang.String[] args) prints the version string Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail VERSION private static final java.lang.String VERSION See Also: Constant Field Values TITLE private static final java.lang.String TITLE See Also: Constant Field Values Constructor Detail VersionAsync private VersionAsync() Method Detail getVersion public static java.lang.String getVersion() main public static void main(java.lang.String[] args) prints the version string Parameters: args - will be just ignored. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method VersionStream <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="VersionStream"; } } catch(err) { } //--> var methods = {"i0":9,"i1":9}; var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j Class VersionStream java.lang.Object twitter4j.VersionStream public final class VersionStream extends java.lang.Object Author: Yusuke Yamamoto - yusuke at mac.com Field Summary Fields  Modifier and Type Field and Description private static java.lang.String TITLE  private static java.lang.String VERSION  Constructor Summary Constructors  Modifier Constructor and Description private VersionStream()  Method Summary All Methods Static Methods Concrete Methods  Modifier and Type Method and Description static java.lang.String getVersion()  static void main(java.lang.String[] args) prints the version string Methods inherited from class java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail VERSION private static final java.lang.String VERSION See Also: Constant Field Values TITLE private static final java.lang.String TITLE See Also: Constant Field Values Constructor Detail VersionStream private VersionStream() Method Detail getVersion public static java.lang.String getVersion() main public static void main(java.lang.String[] args) prints the version string Parameters: args - will be just ignored. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method YFrogUpload <!-- try { if (location.href.indexOf('is-external=true') == -1) { parent.document.title="YFrogUpload"; } } catch(err) { } //--> var methods = {"i0":10,"i1":10}; var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]}; var altColor = "altColor"; var rowColor = "rowColor"; var tableTab = "tableTab"; var activeTableTab = "activeTableTab"; JavaScript is disabled on your browser. Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_top"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method twitter4j.media Class YFrogUpload java.lang.Object twitter4j.media.AbstractImageUploadImpl twitter4j.media.YFrogUpload All Implemented Interfaces: ImageUpload class YFrogUpload extends AbstractImageUploadImpl Since: Twitter4J 2.1.8 Author: Rémy Rakic - remy.rakic at gmail.com, Takao Nakaguchi - takao.nakaguchi at gmail.com, withgod - noname at withgod.jp Field Summary Fields inherited from class twitter4j.media.AbstractImageUploadImpl apiKey, headers, httpResponse, image, message, oauth, postParameter, TWITTER_VERIFY_CREDENTIALS_JSON_V1_1, uploadUrl Constructor Summary Constructors  Constructor and Description YFrogUpload(Configuration conf, OAuthAuthorization oauth)  Method Summary All Methods Instance Methods Concrete Methods  Modifier and Type Method and Description protected java.lang.String postUpload()  protected void preUpload()  Methods inherited from class twitter4j.media.AbstractImageUploadImpl appendHttpParameters, equals, generateVerifyCredentialsAuthorizationHeader, generateVerifyCredentialsAuthorizationURL, hashCode, toString, upload, upload, upload, upload Methods inherited from class java.lang.Object clone, finalize, getClass, notify, notifyAll, wait, wait, wait Constructor Detail YFrogUpload public YFrogUpload(Configuration conf, OAuthAuthorization oauth) Method Detail postUpload protected java.lang.String postUpload() throws TwitterException Specified by: postUpload in class AbstractImageUploadImpl Throws: TwitterException preUpload protected void preUpload() throws TwitterException Specified by: preUpload in class AbstractImageUploadImpl Throws: TwitterException Skip navigation links Overview Package Class Tree Deprecated Index Help Prev Class Next Class Frames No Frames All Classes <!-- allClassesLink = document.getElementById("allclasses_navbar_bottom"); if(window==top) { allClassesLink.style.display = "block"; } else { allClassesLink.style.display = "none"; } //--> Summary:  Nested |  Field |  Constr |  Method Detail:  Field |  Constr |  Method 